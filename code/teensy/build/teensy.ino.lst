
/home/adev/dev/bsense/code/teensy/build/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ac0 	.word	0x20000ac0
6000142c:	20000fe0 	.word	0x20000fe0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fab5 	bl	60001ad0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa9a 	bl	60001ae8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa6f 	bl	60001ab8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa71 	bl	60001ac0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00002978 	.word	0x00002978
600015ec:	60001c04 	.word	0x60001c04
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ac0 	.word	0x20000ac0
600015f8:	60004580 	.word	0x60004580
600015fc:	20000000 	.word	0x20000000
60001600:	20000800 	.word	0x20000800
60001604:	00000c21 	.word	0x00000c21
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00001ff5 	.word	0x00001ff5
60001618:	20000f7c 	.word	0x20000f7c
6000161c:	00001ff9 	.word	0x00001ff9
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20000f80 	.word	0x20000f80
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20000fe0 	.word	0x20000fe0
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20000f6c 	.word	0x20000f6c
60001900:	20000f68 	.word	0x20000f68
60001904:	20000f70 	.word	0x20000f70
60001908:	20000f74 	.word	0x20000f74
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000800 	.word	0x20000800
60001918:	00000dad 	.word	0x00000dad

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8cc 	bl	60001ac8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f8a5 	bl	60001ad8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f899 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000800 	.word	0x20000800
60001a00:	00000f95 	.word	0x00000f95

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	20000faf 	.word	0x20000faf

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <____libc_init_array_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <____libc_init_array_veneer+0x4>
60001abc:	0000287d 	.word	0x0000287d

60001ac0 <__main_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__main_veneer+0x4>
60001ac4:	00000921 	.word	0x00000921

60001ac8 <__usb_init_serialnumber_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__usb_init_serialnumber_veneer+0x4>
60001acc:	00001705 	.word	0x00001705

60001ad0 <__set_arm_clock_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__set_arm_clock_veneer+0x4>
60001ad4:	00002019 	.word	0x00002019

60001ad8 <__delay_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__delay_veneer+0x4>
60001adc:	00000761 	.word	0x00000761

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	000027cd 	.word	0x000027cd

60001ae8 <__pwm_init_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__pwm_init_veneer+0x4>
60001aec:	00000b2d 	.word	0x00000b2d

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045 000004f5 00000735              E.......5...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
void buzzer(int amp, int tone) // set the buzzer amplitude and tone
{
    analogWrite(PIN_BUZZER_AMP, amp);
    analogWrite(PIN_BUZZER_TONE, tone);
    buzz_state = amp;
}
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ac0 	.word	0x20000ac0
      3c:	20000ac0 	.word	0x20000ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20000f18 	.word	0x20000f18
      64:	60006000 	.word	0x60006000

00000068 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
      68:	6803      	ldr	r3, [r0, #0]
      6a:	4718      	bx	r3

0000006c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
      6c:	680b      	ldr	r3, [r1, #0]
      6e:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
      70:	4770      	bx	lr
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
      72:	bf00      	nop

00000074 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
      74:	680b      	ldr	r3, [r1, #0]
      76:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
      78:	4770      	bx	lr
			event.triggerEvent(0, timer);
      7a:	bf00      	nop

0000007c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
      7c:	4770      	bx	lr
      7e:	bf00      	nop

00000080 <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      80:	b510      	push	{r4, lr}
      82:	4604      	mov	r4, r0
		end();
      84:	f000 fb1e 	bl	6c4 <IntervalTimer::end()>
	}
      88:	4620      	mov	r0, r4
      8a:	bd10      	pop	{r4, pc}

0000008c <TimerHandler()>:
			break;
      8c:	b538      	push	{r3, r4, r5, lr}
      8e:	4d33      	ldr	r5, [pc, #204]	; (15c <TimerHandler()+0xd0>)
      90:	f000 fbba 	bl	808 <micros>
	if(!(ch & 0x80)) {
      94:	4c32      	ldr	r4, [pc, #200]	; (160 <TimerHandler()+0xd4>)
      96:	782b      	ldrb	r3, [r5, #0]
	if (pin > sizeof(pin_to_channel)) return 0;
      98:	6020      	str	r0, [r4, #0]
}
      9a:	b173      	cbz	r3, ba <TimerHandler()+0x2e>
      9c:	4b31      	ldr	r3, [pc, #196]	; (164 <TimerHandler()+0xd8>)
      9e:	681b      	ldr	r3, [r3, #0]
      a0:	4298      	cmp	r0, r3
      a2:	d91e      	bls.n	e2 <TimerHandler()+0x56>
      a4:	2100      	movs	r1, #0
      a6:	4608      	mov	r0, r1
      a8:	f000 fc9c 	bl	9e4 <analogWrite>
      ac:	2001      	movs	r0, #1
      ae:	2100      	movs	r1, #0
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      b0:	f000 fbd4 	bl	85c <digitalWrite>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b4:	2300      	movs	r3, #0
      b6:	6820      	ldr	r0, [r4, #0]
      b8:	702b      	strb	r3, [r5, #0]
      ba:	4b2b      	ldr	r3, [pc, #172]	; (168 <TimerHandler()+0xdc>)
      bc:	681b      	ldr	r3, [r3, #0]
      be:	4283      	cmp	r3, r0
      c0:	d203      	bcs.n	ca <TimerHandler()+0x3e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	4d2a      	ldr	r5, [pc, #168]	; (16c <TimerHandler()+0xe0>)
      c4:	782b      	ldrb	r3, [r5, #0]
      c6:	2b00      	cmp	r3, #0
      c8:	d13b      	bne.n	142 <TimerHandler()+0xb6>
      ca:	4b29      	ldr	r3, [pc, #164]	; (170 <TimerHandler()+0xe4>)
      cc:	681b      	ldr	r3, [r3, #0]
      ce:	4283      	cmp	r3, r0
}
      d0:	d202      	bcs.n	d8 <TimerHandler()+0x4c>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4d28      	ldr	r5, [pc, #160]	; (174 <TimerHandler()+0xe8>)
      d4:	782b      	ldrb	r3, [r5, #0]
      d6:	bb43      	cbnz	r3, 12a <TimerHandler()+0x9e>
      d8:	4b27      	ldr	r3, [pc, #156]	; (178 <TimerHandler()+0xec>)
      da:	681b      	ldr	r3, [r3, #0]
    if (t_us > delay_trig)
      dc:	4283      	cmp	r3, r0
      de:	d31a      	bcc.n	116 <TimerHandler()+0x8a>
}
      e0:	bd38      	pop	{r3, r4, r5, pc}
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
      e2:	1ac0      	subs	r0, r0, r3
      e4:	4b25      	ldr	r3, [pc, #148]	; (17c <TimerHandler()+0xf0>)
      e6:	2100      	movs	r1, #0
      e8:	e9d3 2300 	ldrd	r2, r3, [r3]
      ec:	0852      	lsrs	r2, r2, #1
      ee:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
      f2:	085b      	lsrs	r3, r3, #1
      f4:	f002 f9ec 	bl	24d0 <__aeabi_uldivmod>
            vib1(ampVib1, dir);                                         // set the vibration1 amplitude and direction
      f8:	4b21      	ldr	r3, [pc, #132]	; (180 <TimerHandler()+0xf4>)
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
      fa:	4605      	mov	r5, r0
    analogWrite(PIN_VIB1_PWM, amp * 4);
      fc:	2000      	movs	r0, #0
      fe:	7819      	ldrb	r1, [r3, #0]
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
     100:	f005 0501 	and.w	r5, r5, #1
    analogWrite(PIN_VIB1_PWM, amp * 4);
     104:	0089      	lsls	r1, r1, #2
     106:	f000 fc6d 	bl	9e4 <analogWrite>
    digitalWrite(PIN_VIB1_PH, dir);
     10a:	2001      	movs	r0, #1
     10c:	4629      	mov	r1, r5
     10e:	f000 fba5 	bl	85c <digitalWrite>
    if (t_us > delay_us_vib2 && vib2_state)
     112:	6820      	ldr	r0, [r4, #0]
}
     114:	e7d1      	b.n	ba <TimerHandler()+0x2e>

void trigger_pulse(bool state) // trigger a pulse on the trigger pin
{
    digitalWrite(PIN_TRIG, state);
     116:	2100      	movs	r1, #0
     118:	200c      	movs	r0, #12
     11a:	f000 fb9f 	bl	85c <digitalWrite>
    digitalWrite(LED_BUILTIN, state);
     11e:	2100      	movs	r1, #0
     120:	200d      	movs	r0, #13
}
     122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(LED_BUILTIN, state);
     126:	f000 bb99 	b.w	85c <digitalWrite>
    analogWrite(PIN_BUZZER_AMP, amp);
     12a:	2100      	movs	r1, #0
     12c:	2005      	movs	r0, #5
     12e:	f000 fc59 	bl	9e4 <analogWrite>
    analogWrite(PIN_BUZZER_TONE, tone);
     132:	2004      	movs	r0, #4
     134:	2100      	movs	r1, #0
     136:	f000 fc55 	bl	9e4 <analogWrite>
    buzz_state = amp;
     13a:	2300      	movs	r3, #0
    if (t_us > delay_trig)
     13c:	6820      	ldr	r0, [r4, #0]
    buzz_state = amp;
     13e:	702b      	strb	r3, [r5, #0]
        buzz_state = false;
     140:	e7ca      	b.n	d8 <TimerHandler()+0x4c>
    analogWrite(PIN_VIB2_PWM, amp);
     142:	2100      	movs	r1, #0
     144:	2002      	movs	r0, #2
     146:	f000 fc4d 	bl	9e4 <analogWrite>
    digitalWrite(PIN_VIB2_PH, false);
     14a:	2003      	movs	r0, #3
     14c:	2100      	movs	r1, #0
     14e:	f000 fb85 	bl	85c <digitalWrite>
    vib2_state = amp;
     152:	2300      	movs	r3, #0
    if (t_us > delay_us_buzz && buzz_state)
     154:	6820      	ldr	r0, [r4, #0]
    vib2_state = amp;
     156:	702b      	strb	r3, [r5, #0]
}
     158:	e7b7      	b.n	ca <TimerHandler()+0x3e>
     15a:	bf00      	nop
     15c:	20000fbd 	.word	0x20000fbd
     160:	20000f88 	.word	0x20000f88
     164:	20000efc 	.word	0x20000efc
     168:	20000f00 	.word	0x20000f00
     16c:	20000fbe 	.word	0x20000fbe
     170:	20000ef8 	.word	0x20000ef8
     174:	20000fae 	.word	0x20000fae
     178:	20000ef4 	.word	0x20000ef4
     17c:	20000ce8 	.word	0x20000ce8
     180:	20000fac 	.word	0x20000fac

00000184 <setup>:
}

void setup()
{
     184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Initialize pins
    pinMode(PIN_TRIG, OUTPUT);
     188:	2101      	movs	r1, #1
{
     18a:	b08d      	sub	sp, #52	; 0x34
    pinMode(PIN_TRIG, OUTPUT);
     18c:	200c      	movs	r0, #12
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     18e:	4d32      	ldr	r5, [pc, #200]	; (258 <setup+0xd4>)
     190:	f000 fb8e 	bl	8b0 <pinMode>
    pinMode(PIN_VIB1_PWM, OUTPUT);
     194:	2101      	movs	r1, #1
     196:	2000      	movs	r0, #0
     198:	4c30      	ldr	r4, [pc, #192]	; (25c <setup+0xd8>)
     19a:	f000 fb89 	bl	8b0 <pinMode>
    pinMode(PIN_VIB1_PH, OUTPUT);
     19e:	2101      	movs	r1, #1
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1a0:	4f2f      	ldr	r7, [pc, #188]	; (260 <setup+0xdc>)
				if (elapsed > 750) break;
     1a2:	f240 28ee 	movw	r8, #750	; 0x2ee
     1a6:	4608      	mov	r0, r1
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1a8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 270 <setup+0xec>
     1ac:	f000 fb80 	bl	8b0 <pinMode>

    pinMode(PIN_VIB2_PWM, OUTPUT);
     1b0:	2101      	movs	r1, #1
     1b2:	2002      	movs	r0, #2
     1b4:	f000 fb7c 	bl	8b0 <pinMode>
    pinMode(PIN_VIB2_PH, OUTPUT);
     1b8:	2101      	movs	r1, #1
     1ba:	2003      	movs	r0, #3
     1bc:	f000 fb78 	bl	8b0 <pinMode>

    pinMode(PIN_BUZZER_TONE, OUTPUT);
     1c0:	2101      	movs	r1, #1
     1c2:	2004      	movs	r0, #4
     1c4:	f000 fb74 	bl	8b0 <pinMode>
    pinMode(PIN_BUZZER_AMP, OUTPUT);
     1c8:	2101      	movs	r1, #1
     1ca:	2005      	movs	r0, #5
     1cc:	f000 fb70 	bl	8b0 <pinMode>
    pinMode(LED_BUILTIN, OUTPUT);
     1d0:	2101      	movs	r1, #1
     1d2:	200d      	movs	r0, #13
     1d4:	f000 fb6c 	bl	8b0 <pinMode>
    digitalWrite(PIN_BUZZER_AMP, HIGH);
     1d8:	2101      	movs	r1, #1
     1da:	2005      	movs	r0, #5
     1dc:	f000 fb3e 	bl	85c <digitalWrite>
		uint32_t millis_begin = systick_millis_count;
     1e0:	682e      	ldr	r6, [r5, #0]
		yield();
     1e2:	f001 fe79 	bl	1ed8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1e6:	7823      	ldrb	r3, [r4, #0]
     1e8:	b34b      	cbz	r3, 23e <setup+0xba>
     1ea:	783b      	ldrb	r3, [r7, #0]
     1ec:	07db      	lsls	r3, r3, #31
     1ee:	d526      	bpl.n	23e <setup+0xba>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1f0:	682b      	ldr	r3, [r5, #0]
     1f2:	f8d9 2000 	ldr.w	r2, [r9]
     1f6:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1f8:	2b0e      	cmp	r3, #14
     1fa:	d920      	bls.n	23e <setup+0xba>

    // Initialize Serial communication and button pin
    Serial.begin(115200);
    delay(100);
     1fc:	2064      	movs	r0, #100	; 0x64
     1fe:	f000 faaf 	bl	760 <delay>
    pinMode(LED_BUILTIN, OUTPUT);
     202:	2101      	movs	r1, #1
     204:	200d      	movs	r0, #13
     206:	f000 fb53 	bl	8b0 <pinMode>
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
     20a:	4b16      	ldr	r3, [pc, #88]	; (264 <setup+0xe0>)

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
     20c:	4a16      	ldr	r2, [pc, #88]	; (268 <setup+0xe4>)
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
     20e:	a902      	add	r1, sp, #8
     210:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
     212:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
     214:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
     216:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
     218:	f7ff ff28 	bl	6c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
     21c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
     220:	a906      	add	r1, sp, #24
     222:	4812      	ldr	r0, [pc, #72]	; (26c <setup+0xe8>)
     224:	f000 f9cc 	bl	5c0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     228:	9b06      	ldr	r3, [sp, #24]
     22a:	a808      	add	r0, sp, #32
     22c:	68db      	ldr	r3, [r3, #12]
     22e:	4798      	blx	r3
     230:	9b00      	ldr	r3, [sp, #0]
     232:	a802      	add	r0, sp, #8
     234:	68db      	ldr	r3, [r3, #12]
     236:	4798      	blx	r3

    myTimer.begin(TimerHandler, TIMER_INTERVAL_US); // start the timer with the handler and interval
}
     238:	b00d      	add	sp, #52	; 0x34
     23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     23e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     240:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     242:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     244:	b12a      	cbz	r2, 252 <setup+0xce>
				if (elapsed > 2000) break;
     246:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     24a:	d8d7      	bhi.n	1fc <setup+0x78>
			yield();
     24c:	f001 fe44 	bl	1ed8 <yield>
     250:	e7c7      	b.n	1e2 <setup+0x5e>
				if (elapsed > 750) break;
     252:	4543      	cmp	r3, r8
     254:	d9fa      	bls.n	24c <setup+0xc8>
     256:	e7d1      	b.n	1fc <setup+0x78>
     258:	20000f80 	.word	0x20000f80
     25c:	20000fba 	.word	0x20000fba
     260:	20000fb9 	.word	0x20000fb9
     264:	200002b8 	.word	0x200002b8
     268:	0000008d 	.word	0x0000008d
     26c:	200006e0 	.word	0x200006e0
     270:	20000f94 	.word	0x20000f94

00000274 <loop>:

void loop()
{
     274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        virtual int available() { return usb_serial_available(); }
     278:	f001 fd46 	bl	1d08 <usb_serial_available>
    if (Serial.available() >= 3)
     27c:	2802      	cmp	r0, #2
     27e:	dc01      	bgt.n	284 <loop+0x10>
            default:
                break;
            }
        }
    }
     280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     284:	4e87      	ldr	r6, [pc, #540]	; (4a4 <loop+0x230>)
	// Read up to length bytes into a buffer.  readBytes() will wait up to
	// the number of milliseconds configured by setTimeout().  The return value
	// is the number of bytes actually read, which may be zero if your PC
	// does not send anything.  To read without waiting, configure setTimeout(0).
	size_t readBytes(char *buffer, size_t length) {
		size_t count=0;
     286:	2400      	movs	r4, #0
     288:	4d87      	ldr	r5, [pc, #540]	; (4a8 <loop+0x234>)
		unsigned long startMillis = millis();
		do {
			count += usb_serial_read(buffer + count, length - count);
			if (count >= length) return count;
		} while(millis() - startMillis < _timeout);
     28a:	f8df 8260 	ldr.w	r8, [pc, #608]	; 4ec <loop+0x278>
     28e:	6837      	ldr	r7, [r6, #0]
     290:	e005      	b.n	29e <loop+0x2a>
     292:	6833      	ldr	r3, [r6, #0]
     294:	f8d8 2008 	ldr.w	r2, [r8, #8]
     298:	1bdb      	subs	r3, r3, r7
     29a:	4293      	cmp	r3, r2
     29c:	d26e      	bcs.n	37c <loop+0x108>
			count += usb_serial_read(buffer + count, length - count);
     29e:	f1c4 0103 	rsb	r1, r4, #3
     2a2:	1928      	adds	r0, r5, r4
     2a4:	f001 fc9e 	bl	1be4 <usb_serial_read>
     2a8:	4404      	add	r4, r0
			if (count >= length) return count;
     2aa:	2c02      	cmp	r4, #2
     2ac:	d9f1      	bls.n	292 <loop+0x1e>
        if (buff[0] == STARTING_CHAR)
     2ae:	782b      	ldrb	r3, [r5, #0]
     2b0:	2baa      	cmp	r3, #170	; 0xaa
     2b2:	d1e5      	bne.n	280 <loop+0xc>
            source = buff[1];                     // read what type of stimulus is {v: vibration1, w: vibration2, b: buzzer}
     2b4:	786b      	ldrb	r3, [r5, #1]
		size_t count=0;
     2b6:	2400      	movs	r4, #0
     2b8:	f8df 9234 	ldr.w	r9, [pc, #564]	; 4f0 <loop+0x27c>
            len = buff[2];                        // read the length of the message
     2bc:	78af      	ldrb	r7, [r5, #2]
            source = buff[1];                     // read what type of stimulus is {v: vibration1, w: vibration2, b: buzzer}
     2be:	f889 3000 	strb.w	r3, [r9]
            len = buff[2];                        // read the length of the message
     2c2:	4b7a      	ldr	r3, [pc, #488]	; (4ac <loop+0x238>)
     2c4:	f8d6 8000 	ldr.w	r8, [r6]
		} while(millis() - startMillis < _timeout);
     2c8:	f8df a220 	ldr.w	sl, [pc, #544]	; 4ec <loop+0x278>
     2cc:	701f      	strb	r7, [r3, #0]
     2ce:	e007      	b.n	2e0 <loop+0x6c>
     2d0:	6833      	ldr	r3, [r6, #0]
     2d2:	f8da 2008 	ldr.w	r2, [sl, #8]
     2d6:	eba3 0308 	sub.w	r3, r3, r8
     2da:	4293      	cmp	r3, r2
     2dc:	f080 80dd 	bcs.w	49a <loop+0x226>
			count += usb_serial_read(buffer + count, length - count);
     2e0:	1b39      	subs	r1, r7, r4
     2e2:	1928      	adds	r0, r5, r4
     2e4:	f001 fc7e 	bl	1be4 <usb_serial_read>
     2e8:	4404      	add	r4, r0
			if (count >= length) return count;
     2ea:	42a7      	cmp	r7, r4
     2ec:	d8f0      	bhi.n	2d0 <loop+0x5c>
            micros_time = micros();               // get the current time
     2ee:	4c70      	ldr	r4, [pc, #448]	; (4b0 <loop+0x23c>)
     2f0:	f000 fa8a 	bl	808 <micros>
    digitalWrite(PIN_TRIG, state);
     2f4:	2101      	movs	r1, #1
            micros_time = micros();               // get the current time
     2f6:	6020      	str	r0, [r4, #0]
    digitalWrite(PIN_TRIG, state);
     2f8:	200c      	movs	r0, #12
     2fa:	f000 faaf 	bl	85c <digitalWrite>
    digitalWrite(LED_BUILTIN, state);
     2fe:	2101      	movs	r1, #1
     300:	200d      	movs	r0, #13
     302:	f000 faab 	bl	85c <digitalWrite>
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     306:	6821      	ldr	r1, [r4, #0]
            switch (source)
     308:	f899 3000 	ldrb.w	r3, [r9]
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     30c:	f241 3288 	movw	r2, #5000	; 0x1388
     310:	4868      	ldr	r0, [pc, #416]	; (4b4 <loop+0x240>)
     312:	440a      	add	r2, r1
            switch (source)
     314:	3b62      	subs	r3, #98	; 0x62
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     316:	6002      	str	r2, [r0, #0]
            switch (source)
     318:	2b15      	cmp	r3, #21
     31a:	d8b1      	bhi.n	280 <loop+0xc>
     31c:	a201      	add	r2, pc, #4	; (adr r2, 324 <loop+0xb0>)
     31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     322:	bf00      	nop
     324:	0000045d 	.word	0x0000045d
     328:	000003e5 	.word	0x000003e5
     32c:	00000281 	.word	0x00000281
     330:	00000281 	.word	0x00000281
     334:	00000281 	.word	0x00000281
     338:	00000281 	.word	0x00000281
     33c:	00000281 	.word	0x00000281
     340:	00000281 	.word	0x00000281
     344:	00000281 	.word	0x00000281
     348:	00000281 	.word	0x00000281
     34c:	00000281 	.word	0x00000281
     350:	00000281 	.word	0x00000281
     354:	00000281 	.word	0x00000281
     358:	00000281 	.word	0x00000281
     35c:	00000281 	.word	0x00000281
     360:	00000281 	.word	0x00000281
     364:	00000281 	.word	0x00000281
     368:	00000281 	.word	0x00000281
     36c:	00000281 	.word	0x00000281
     370:	00000281 	.word	0x00000281
     374:	000003b9 	.word	0x000003b9
     378:	0000038d 	.word	0x0000038d
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
     37c:	2301      	movs	r3, #1
     37e:	f888 300c 	strb.w	r3, [r8, #12]
        if (buff[0] == STARTING_CHAR)
     382:	782b      	ldrb	r3, [r5, #0]
     384:	2baa      	cmp	r3, #170	; 0xaa
     386:	f47f af7b 	bne.w	280 <loop+0xc>
     38a:	e793      	b.n	2b4 <loop+0x40>
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration2 in microseconds
     38c:	786c      	ldrb	r4, [r5, #1]
     38e:	4b4a      	ldr	r3, [pc, #296]	; (4b8 <loop+0x244>)
     390:	4a4a      	ldr	r2, [pc, #296]	; (4bc <loop+0x248>)
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     392:	8868      	ldrh	r0, [r5, #2]
                ampVib2 =  buff[0]; // read the amplitude of the vibration2
     394:	782d      	ldrb	r5, [r5, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration2 in microseconds
     396:	fbb3 f3f4 	udiv	r3, r3, r4
     39a:	6013      	str	r3, [r2, #0]
                ampVib2 =  buff[0]; // read the amplitude of the vibration2
     39c:	4b48      	ldr	r3, [pc, #288]	; (4c0 <loop+0x24c>)
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     39e:	4c49      	ldr	r4, [pc, #292]	; (4c4 <loop+0x250>)
                ampVib2 =  buff[0]; // read the amplitude of the vibration2
     3a0:	701d      	strb	r5, [r3, #0]
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     3a6:	fb03 1100 	mla	r1, r3, r0, r1
                vib2_state = true; // update the state
     3aa:	4b47      	ldr	r3, [pc, #284]	; (4c8 <loop+0x254>)
     3ac:	2001      	movs	r0, #1
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3ae:	6021      	str	r1, [r4, #0]
                vib2_state = true; // update the state
     3b0:	7018      	strb	r0, [r3, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration2 in microseconds
     3b2:	2300      	movs	r3, #0
     3b4:	6053      	str	r3, [r2, #4]
                break;
     3b6:	e763      	b.n	280 <loop+0xc>
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3b8:	786c      	ldrb	r4, [r5, #1]
     3ba:	4a3f      	ldr	r2, [pc, #252]	; (4b8 <loop+0x244>)
     3bc:	483f      	ldr	r0, [pc, #252]	; (4bc <loop+0x248>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     3be:	886b      	ldrh	r3, [r5, #2]
                ampVib1 = buff[0]; // read the amplitude of the vibration1
     3c0:	782d      	ldrb	r5, [r5, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3c2:	fbb2 f2f4 	udiv	r2, r2, r4
     3c6:	6002      	str	r2, [r0, #0]
                ampVib1 = buff[0]; // read the amplitude of the vibration1
     3c8:	4a40      	ldr	r2, [pc, #256]	; (4cc <loop+0x258>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     3ca:	4c41      	ldr	r4, [pc, #260]	; (4d0 <loop+0x25c>)
                ampVib1 = buff[0]; // read the amplitude of the vibration1
     3cc:	7015      	strb	r5, [r2, #0]
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     3d2:	fb02 1303 	mla	r3, r2, r3, r1
                vib1_state = true; // update the state
     3d6:	4a3f      	ldr	r2, [pc, #252]	; (4d4 <loop+0x260>)
     3d8:	2101      	movs	r1, #1
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     3da:	6023      	str	r3, [r4, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3dc:	2300      	movs	r3, #0
                vib1_state = true; // update the state
     3de:	7011      	strb	r1, [r2, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3e0:	6043      	str	r3, [r0, #4]
                break;
     3e2:	e74d      	b.n	280 <loop+0xc>
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     3e4:	782b      	ldrb	r3, [r5, #0]
    analogWrite(PIN_VIB2_PWM, amp);
     3e6:	2002      	movs	r0, #2
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     3e8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 4e4 <loop+0x270>
                toneBuzz = buff[1];                 // read the tone of the buzzer
     3ec:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 4e8 <loop+0x274>
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     3f0:	f889 3000 	strb.w	r3, [r9]
                toneBuzz = buff[1];                 // read the tone of the buzzer
     3f4:	786b      	ldrb	r3, [r5, #1]
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     3f6:	4f38      	ldr	r7, [pc, #224]	; (4d8 <loop+0x264>)
                toneBuzz = buff[1];                 // read the tone of the buzzer
     3f8:	f888 3000 	strb.w	r3, [r8]
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     3fc:	886b      	ldrh	r3, [r5, #2]
                ampVib2 = buff[4];                  // read the amplitude of the vibration2
     3fe:	792e      	ldrb	r6, [r5, #4]
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     400:	803b      	strh	r3, [r7, #0]
                ampVib2 = buff[4];                  // read the amplitude of the vibration2
     402:	4b2f      	ldr	r3, [pc, #188]	; (4c0 <loop+0x24c>)
    analogWrite(PIN_VIB2_PWM, amp);
     404:	4631      	mov	r1, r6
                ampVib2 = buff[4];                  // read the amplitude of the vibration2
     406:	701e      	strb	r6, [r3, #0]
    analogWrite(PIN_VIB2_PWM, amp);
     408:	f000 faec 	bl	9e4 <analogWrite>
    digitalWrite(PIN_VIB2_PH, false);
     40c:	2100      	movs	r1, #0
     40e:	2003      	movs	r0, #3
     410:	f000 fa24 	bl	85c <digitalWrite>
    vib2_state = amp;
     414:	3e00      	subs	r6, #0
                delay_us_vib2 = micros_time + 100; //*dt; //the vibration2 pulse is 100us
     416:	6823      	ldr	r3, [r4, #0]
    analogWrite(PIN_BUZZER_AMP, amp);
     418:	f04f 0005 	mov.w	r0, #5
    vib2_state = amp;
     41c:	bf18      	it	ne
     41e:	2601      	movne	r6, #1
     420:	4a29      	ldr	r2, [pc, #164]	; (4c8 <loop+0x254>)
                buzzer(ampBuzz, toneBuzz);
     422:	f899 5000 	ldrb.w	r5, [r9]
                delay_us_vib2 = micros_time + 100; //*dt; //the vibration2 pulse is 100us
     426:	3364      	adds	r3, #100	; 0x64
    vib2_state = amp;
     428:	7016      	strb	r6, [r2, #0]
                buzzer(ampBuzz, toneBuzz);
     42a:	f898 8000 	ldrb.w	r8, [r8]
    analogWrite(PIN_BUZZER_AMP, amp);
     42e:	4629      	mov	r1, r5
                delay_us_vib2 = micros_time + 100; //*dt; //the vibration2 pulse is 100us
     430:	4a24      	ldr	r2, [pc, #144]	; (4c4 <loop+0x250>)
     432:	6013      	str	r3, [r2, #0]
    analogWrite(PIN_BUZZER_AMP, amp);
     434:	f000 fad6 	bl	9e4 <analogWrite>
    analogWrite(PIN_BUZZER_TONE, tone);
     438:	4641      	mov	r1, r8
     43a:	2004      	movs	r0, #4
     43c:	f000 fad2 	bl	9e4 <analogWrite>
    buzz_state = amp;
     440:	3d00      	subs	r5, #0
     442:	4a26      	ldr	r2, [pc, #152]	; (4dc <loop+0x268>)
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     444:	f04f 0064 	mov.w	r0, #100	; 0x64
     448:	8839      	ldrh	r1, [r7, #0]
    buzz_state = amp;
     44a:	bf18      	it	ne
     44c:	2501      	movne	r5, #1
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     44e:	6823      	ldr	r3, [r4, #0]
    buzz_state = amp;
     450:	7015      	strb	r5, [r2, #0]
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     452:	fb00 3301 	mla	r3, r0, r1, r3
     456:	4a22      	ldr	r2, [pc, #136]	; (4e0 <loop+0x26c>)
     458:	6013      	str	r3, [r2, #0]
     45a:	e711      	b.n	280 <loop+0xc>
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     45c:	782e      	ldrb	r6, [r5, #0]
    analogWrite(PIN_BUZZER_AMP, amp);
     45e:	2005      	movs	r0, #5
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     460:	4a20      	ldr	r2, [pc, #128]	; (4e4 <loop+0x270>)
                toneBuzz = buff[1];                 // read the tone of the buzzer
     462:	786f      	ldrb	r7, [r5, #1]
    analogWrite(PIN_BUZZER_AMP, amp);
     464:	4631      	mov	r1, r6
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     466:	886b      	ldrh	r3, [r5, #2]
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     468:	7016      	strb	r6, [r2, #0]
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     46a:	4d1b      	ldr	r5, [pc, #108]	; (4d8 <loop+0x264>)
                toneBuzz = buff[1];                 // read the tone of the buzzer
     46c:	4a1e      	ldr	r2, [pc, #120]	; (4e8 <loop+0x274>)
                timeBuzz = *((uint16_t *)&buff[2]); // read the duration of the buzzer
     46e:	802b      	strh	r3, [r5, #0]
                toneBuzz = buff[1];                 // read the tone of the buzzer
     470:	7017      	strb	r7, [r2, #0]
    analogWrite(PIN_BUZZER_AMP, amp);
     472:	f000 fab7 	bl	9e4 <analogWrite>
    analogWrite(PIN_BUZZER_TONE, tone);
     476:	4639      	mov	r1, r7
     478:	2004      	movs	r0, #4
     47a:	f000 fab3 	bl	9e4 <analogWrite>
    buzz_state = amp;
     47e:	3e00      	subs	r6, #0
     480:	4a16      	ldr	r2, [pc, #88]	; (4dc <loop+0x268>)
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     482:	f04f 0064 	mov.w	r0, #100	; 0x64
     486:	8829      	ldrh	r1, [r5, #0]
    buzz_state = amp;
     488:	bf18      	it	ne
     48a:	2601      	movne	r6, #1
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     48c:	6823      	ldr	r3, [r4, #0]
    buzz_state = amp;
     48e:	7016      	strb	r6, [r2, #0]
                delay_us_buzz = micros_time + 100 * timeBuzz; // the buzzer pulse is 100us*duration
     490:	fb00 3301 	mla	r3, r0, r1, r3
     494:	4a12      	ldr	r2, [pc, #72]	; (4e0 <loop+0x26c>)
     496:	6013      	str	r3, [r2, #0]
                break;
     498:	e6f2      	b.n	280 <loop+0xc>
     49a:	2301      	movs	r3, #1
     49c:	f88a 300c 	strb.w	r3, [sl, #12]
		setReadError();
		return count;
     4a0:	e725      	b.n	2ee <loop+0x7a>
     4a2:	bf00      	nop
     4a4:	20000f80 	.word	0x20000f80
     4a8:	20000eb4 	.word	0x20000eb4
     4ac:	20000fb0 	.word	0x20000fb0
     4b0:	20000f14 	.word	0x20000f14
     4b4:	20000ef4 	.word	0x20000ef4
     4b8:	000f4240 	.word	0x000f4240
     4bc:	20000ce8 	.word	0x20000ce8
     4c0:	20000fad 	.word	0x20000fad
     4c4:	20000f00 	.word	0x20000f00
     4c8:	20000fbe 	.word	0x20000fbe
     4cc:	20000fac 	.word	0x20000fac
     4d0:	20000efc 	.word	0x20000efc
     4d4:	20000fbd 	.word	0x20000fbd
     4d8:	20000fa2 	.word	0x20000fa2
     4dc:	20000fae 	.word	0x20000fae
     4e0:	20000ef8 	.word	0x20000ef8
     4e4:	20000fab 	.word	0x20000fab
     4e8:	20000fb5 	.word	0x20000fb5
     4ec:	20000674 	.word	0x20000674
     4f0:	20000fb4 	.word	0x20000fb4

000004f4 <_GLOBAL__sub_I_myTimer>:
IntervalTimer myTimer;
     4f4:	4a02      	ldr	r2, [pc, #8]	; (500 <_GLOBAL__sub_I_myTimer+0xc>)
     4f6:	4903      	ldr	r1, [pc, #12]	; (504 <_GLOBAL__sub_I_myTimer+0x10>)
     4f8:	4803      	ldr	r0, [pc, #12]	; (508 <_GLOBAL__sub_I_myTimer+0x14>)
     4fa:	f001 bfe3 	b.w	24c4 <__aeabi_atexit>
     4fe:	bf00      	nop
     500:	2000068c 	.word	0x2000068c
     504:	00000081 	.word	0x00000081
     508:	200006e0 	.word	0x200006e0

0000050c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
     50c:	4770      	bx	lr
     50e:	bf00      	nop

00000510 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
     510:	4770      	bx	lr
     512:	bf00      	nop

00000514 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
     514:	4770      	bx	lr
     516:	bf00      	nop

00000518 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
     518:	4770      	bx	lr
     51a:	bf00      	nop

0000051c <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
     51c:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
     51e:	4c1a      	ldr	r4, [pc, #104]	; (588 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
     520:	4d1a      	ldr	r5, [pc, #104]	; (58c <pit_isr()+0x70>)
     522:	6823      	ldr	r3, [r4, #0]
     524:	42ab      	cmp	r3, r5
     526:	d002      	beq.n	52e <pit_isr()+0x12>
     528:	4a19      	ldr	r2, [pc, #100]	; (590 <pit_isr()+0x74>)
     52a:	68d1      	ldr	r1, [r2, #12]
     52c:	bb29      	cbnz	r1, 57a <pit_isr()+0x5e>
     52e:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
     530:	42ab      	cmp	r3, r5
     532:	d002      	beq.n	53a <pit_isr()+0x1e>
     534:	4a16      	ldr	r2, [pc, #88]	; (590 <pit_isr()+0x74>)
     536:	69d1      	ldr	r1, [r2, #28]
     538:	b9c9      	cbnz	r1, 56e <pit_isr()+0x52>
     53a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
     53c:	42ab      	cmp	r3, r5
     53e:	d002      	beq.n	546 <pit_isr()+0x2a>
     540:	4a13      	ldr	r2, [pc, #76]	; (590 <pit_isr()+0x74>)
     542:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     544:	b969      	cbnz	r1, 562 <pit_isr()+0x46>
     546:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
     548:	42ab      	cmp	r3, r5
     54a:	d009      	beq.n	560 <pit_isr()+0x44>
     54c:	4a10      	ldr	r2, [pc, #64]	; (590 <pit_isr()+0x74>)
     54e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     550:	b131      	cbz	r1, 560 <pit_isr()+0x44>
     552:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     554:	681b      	ldr	r3, [r3, #0]
     556:	480f      	ldr	r0, [pc, #60]	; (594 <pit_isr()+0x78>)
     558:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
     55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     55e:	4718      	bx	r3
     560:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
     562:	2101      	movs	r1, #1
     564:	681b      	ldr	r3, [r3, #0]
     566:	480c      	ldr	r0, [pc, #48]	; (598 <pit_isr()+0x7c>)
     568:	62d1      	str	r1, [r2, #44]	; 0x2c
     56a:	4798      	blx	r3
        );
     56c:	e7eb      	b.n	546 <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
     56e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     570:	681b      	ldr	r3, [r3, #0]
     572:	480a      	ldr	r0, [pc, #40]	; (59c <pit_isr()+0x80>)
     574:	61d1      	str	r1, [r2, #28]
     576:	4798      	blx	r3
        );
     578:	e7df      	b.n	53a <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
     57a:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	f104 0008 	add.w	r0, r4, #8
     582:	60d1      	str	r1, [r2, #12]
     584:	4798      	blx	r3
        );
     586:	e7d2      	b.n	52e <pit_isr()+0x12>
     588:	20000ac0 	.word	0x20000ac0
     58c:	20000280 	.word	0x20000280
     590:	40084100 	.word	0x40084100
     594:	20000b10 	.word	0x20000b10
     598:	20000af8 	.word	0x20000af8
     59c:	20000ae0 	.word	0x20000ae0

000005a0 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     5a0:	b538      	push	{r3, r4, r5, lr}
     5a2:	4c06      	ldr	r4, [pc, #24]	; (5bc <__tcf_0+0x1c>)
     5a4:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
     5ac:	4620      	mov	r0, r4
     5ae:	3c18      	subs	r4, #24
     5b0:	68db      	ldr	r3, [r3, #12]
     5b2:	4798      	blx	r3
     5b4:	42ac      	cmp	r4, r5
     5b6:	d1f7      	bne.n	5a8 <__tcf_0+0x8>
     5b8:	bd38      	pop	{r3, r4, r5, pc}
     5ba:	bf00      	nop
     5bc:	20000b10 	.word	0x20000b10

000005c0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
     5c0:	6803      	ldr	r3, [r0, #0]
{
     5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5c6:	4604      	mov	r4, r0
     5c8:	b088      	sub	sp, #32
     5ca:	4617      	mov	r7, r2
	if (channel) {
     5cc:	2b00      	cmp	r3, #0
     5ce:	d04b      	beq.n	668 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
     5d0:	2200      	movs	r2, #0
     5d2:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
     5d4:	2201      	movs	r2, #1
     5d6:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
     5d8:	4d30      	ldr	r5, [pc, #192]	; (69c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
     5da:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5dc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 6c0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
     5e0:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
     5e2:	f851 3b08 	ldr.w	r3, [r1], #8
     5e6:	112d      	asrs	r5, r5, #4
     5e8:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
     5ea:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5ec:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
     5f0:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5f2:	00f6      	lsls	r6, r6, #3
     5f4:	f106 0008 	add.w	r0, r6, #8
     5f8:	f858 3006 	ldr.w	r3, [r8, r6]
     5fc:	4440      	add	r0, r8
     5fe:	68db      	ldr	r3, [r3, #12]
     600:	9001      	str	r0, [sp, #4]
     602:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
     604:	4a26      	ldr	r2, [pc, #152]	; (6a0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
     606:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
     608:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
     60c:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
     60e:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
     612:	689b      	ldr	r3, [r3, #8]
     614:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     616:	9b02      	ldr	r3, [sp, #8]
     618:	a804      	add	r0, sp, #16
     61a:	68db      	ldr	r3, [r3, #12]
     61c:	4798      	blx	r3
	channel->LDVAL = cycles;
     61e:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
     620:	2203      	movs	r2, #3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     622:	4820      	ldr	r0, [pc, #128]	; (6a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
     624:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
     626:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
     628:	4a1f      	ldr	r2, [pc, #124]	; (6a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
     62a:	7923      	ldrb	r3, [r4, #4]
     62c:	4c1f      	ldr	r4, [pc, #124]	; (6ac <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
     62e:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     630:	7813      	ldrb	r3, [r2, #0]
     632:	7851      	ldrb	r1, [r2, #1]
     634:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
     638:	428b      	cmp	r3, r1
     63a:	bf28      	it	cs
     63c:	460b      	movcs	r3, r1
     63e:	7891      	ldrb	r1, [r2, #2]
     640:	78d2      	ldrb	r2, [r2, #3]
     642:	428b      	cmp	r3, r1
     644:	bf28      	it	cs
     646:	460b      	movcs	r3, r1
     648:	4293      	cmp	r3, r2
     64a:	bf28      	it	cs
     64c:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     64e:	4c18      	ldr	r4, [pc, #96]	; (6b0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
     650:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     654:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
     658:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     65a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
     65e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
     662:	b008      	add	sp, #32
     664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     668:	4a12      	ldr	r2, [pc, #72]	; (6b4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
     66a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
     66c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     670:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
     672:	2201      	movs	r2, #1
     674:	4b10      	ldr	r3, [pc, #64]	; (6b8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
     676:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
     678:	4a10      	ldr	r2, [pc, #64]	; (6bc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
     67a:	4613      	mov	r3, r2
     67c:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
     67e:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
     680:	6898      	ldr	r0, [r3, #8]
     682:	2800      	cmp	r0, #0
     684:	d0a8      	beq.n	5d8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
     686:	3310      	adds	r3, #16
     688:	4293      	cmp	r3, r2
     68a:	6023      	str	r3, [r4, #0]
     68c:	d1f8      	bne.n	680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
     68e:	2300      	movs	r3, #0
				return false;
     690:	4618      	mov	r0, r3
				channel = NULL;
     692:	6023      	str	r3, [r4, #0]
}
     694:	b008      	add	sp, #32
     696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     69a:	bf00      	nop
     69c:	bff7bf00 	.word	0xbff7bf00
     6a0:	20000280 	.word	0x20000280
     6a4:	20000800 	.word	0x20000800
     6a8:	20000684 	.word	0x20000684
     6ac:	0000051d 	.word	0x0000051d
     6b0:	e000e400 	.word	0xe000e400
     6b4:	400fc000 	.word	0x400fc000
     6b8:	40084000 	.word	0x40084000
     6bc:	40084100 	.word	0x40084100
     6c0:	20000ac0 	.word	0x20000ac0

000006c4 <IntervalTimer::end()>:
void IntervalTimer::end() {
     6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
     6c6:	6803      	ldr	r3, [r0, #0]
     6c8:	b343      	cbz	r3, 71c <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
     6ca:	4c15      	ldr	r4, [pc, #84]	; (720 <IntervalTimer::end()+0x5c>)
     6cc:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     6ce:	4e15      	ldr	r6, [pc, #84]	; (724 <IntervalTimer::end()+0x60>)
     6d0:	441c      	add	r4, r3
     6d2:	1124      	asrs	r4, r4, #4
     6d4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
     6d8:	00ed      	lsls	r5, r5, #3
     6da:	5973      	ldr	r3, [r6, r5]
     6dc:	f105 0008 	add.w	r0, r5, #8
     6e0:	68db      	ldr	r3, [r3, #12]
     6e2:	4430      	add	r0, r6
     6e4:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
     6e6:	4b10      	ldr	r3, [pc, #64]	; (728 <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
     6e8:	2100      	movs	r1, #0
		channel->TFLG = 1;
     6ea:	2201      	movs	r2, #1
     6ec:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
     6ee:	683b      	ldr	r3, [r7, #0]
     6f0:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
     6f2:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
     6f4:	23ff      	movs	r3, #255	; 0xff
     6f6:	4a0d      	ldr	r2, [pc, #52]	; (72c <IntervalTimer::end()+0x68>)
     6f8:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     6fa:	7813      	ldrb	r3, [r2, #0]
     6fc:	7850      	ldrb	r0, [r2, #1]
     6fe:	7894      	ldrb	r4, [r2, #2]
     700:	4283      	cmp	r3, r0
     702:	bf28      	it	cs
     704:	4603      	movcs	r3, r0
     706:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     708:	4a09      	ldr	r2, [pc, #36]	; (730 <IntervalTimer::end()+0x6c>)
     70a:	42a3      	cmp	r3, r4
     70c:	bf28      	it	cs
     70e:	4623      	movcs	r3, r4
     710:	4283      	cmp	r3, r0
     712:	bf28      	it	cs
     714:	4603      	movcs	r3, r0
     716:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
     71a:	6039      	str	r1, [r7, #0]
}
     71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     71e:	bf00      	nop
     720:	bff7bf00 	.word	0xbff7bf00
     724:	20000ac0 	.word	0x20000ac0
     728:	20000280 	.word	0x20000280
     72c:	20000684 	.word	0x20000684
     730:	e000e400 	.word	0xe000e400

00000734 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
     734:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
     736:	4b06      	ldr	r3, [pc, #24]	; (750 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     738:	2000      	movs	r0, #0
     73a:	4c06      	ldr	r4, [pc, #24]	; (754 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
     73c:	4a06      	ldr	r2, [pc, #24]	; (758 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
     73e:	601c      	str	r4, [r3, #0]
     740:	619c      	str	r4, [r3, #24]
     742:	631c      	str	r4, [r3, #48]	; 0x30
     744:	649c      	str	r4, [r3, #72]	; 0x48
     746:	4905      	ldr	r1, [pc, #20]	; (75c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
     748:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     74c:	f001 beba 	b.w	24c4 <__aeabi_atexit>
     750:	20000ac0 	.word	0x20000ac0
     754:	20000280 	.word	0x20000280
     758:	2000068c 	.word	0x2000068c
     75c:	000005a1 	.word	0x000005a1

00000760 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     760:	b900      	cbnz	r0, 764 <delay+0x4>
     762:	4770      	bx	lr
{
     764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     768:	2101      	movs	r1, #1
     76a:	4681      	mov	r9, r0
     76c:	4c21      	ldr	r4, [pc, #132]	; (7f4 <delay+0x94>)
     76e:	4d22      	ldr	r5, [pc, #136]	; (7f8 <delay+0x98>)
     770:	4e22      	ldr	r6, [pc, #136]	; (7fc <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     772:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     776:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     778:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     77a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     77e:	2b00      	cmp	r3, #0
     780:	d1f7      	bne.n	772 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     782:	491f      	ldr	r1, [pc, #124]	; (800 <delay+0xa0>)
     784:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     786:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     78a:	f8df a078 	ldr.w	sl, [pc, #120]	; 804 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     78e:	1a1b      	subs	r3, r3, r0
     790:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     792:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     796:	f8da 2000 	ldr.w	r2, [sl]
     79a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     79e:	455a      	cmp	r2, fp
     7a0:	bf94      	ite	ls
     7a2:	4490      	addls	r8, r2
     7a4:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     7a6:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     7aa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     7ac:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     7ae:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     7b2:	2b00      	cmp	r3, #0
     7b4:	d1f7      	bne.n	7a6 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     7b6:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7b8:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     7bc:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     7be:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7c2:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     7c6:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     7ca:	bf94      	ite	ls
     7cc:	4462      	addls	r2, ip
     7ce:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     7d2:	eba2 0208 	sub.w	r2, r2, r8
     7d6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     7da:	d306      	bcc.n	7ea <delay+0x8a>
			if (--msec == 0) return;
     7dc:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     7e0:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     7e4:	d1df      	bne.n	7a6 <delay+0x46>
}
     7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     7ea:	f001 fb75 	bl	1ed8 <yield>
		while ((micros() - start) >= 1000) {
     7ee:	4904      	ldr	r1, [pc, #16]	; (800 <delay+0xa0>)
     7f0:	e7d9      	b.n	7a6 <delay+0x46>
     7f2:	bf00      	nop
     7f4:	20000f84 	.word	0x20000f84
     7f8:	20000f80 	.word	0x20000f80
     7fc:	20000f7c 	.word	0x20000f7c
     800:	e0001000 	.word	0xe0001000
     804:	20000f78 	.word	0x20000f78

00000808 <micros>:
{
     808:	b430      	push	{r4, r5}
     80a:	4b0f      	ldr	r3, [pc, #60]	; (848 <micros+0x40>)
     80c:	f04f 0c01 	mov.w	ip, #1
     810:	4d0e      	ldr	r5, [pc, #56]	; (84c <micros+0x44>)
     812:	4c0f      	ldr	r4, [pc, #60]	; (850 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     814:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
     818:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     81a:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     81c:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
     820:	2a00      	cmp	r2, #0
     822:	d1f7      	bne.n	814 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     824:	4b0b      	ldr	r3, [pc, #44]	; (854 <micros+0x4c>)
     826:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     828:	4a0b      	ldr	r2, [pc, #44]	; (858 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
     82a:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
     82c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     830:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
     832:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     836:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
     83a:	bc30      	pop	{r4, r5}
     83c:	428a      	cmp	r2, r1
     83e:	bf94      	ite	ls
     840:	1880      	addls	r0, r0, r2
     842:	1840      	addhi	r0, r0, r1
     844:	4770      	bx	lr
     846:	bf00      	nop
     848:	20000f84 	.word	0x20000f84
     84c:	20000f80 	.word	0x20000f80
     850:	20000f7c 	.word	0x20000f7c
     854:	e0001000 	.word	0xe0001000
     858:	20000f78 	.word	0x20000f78

0000085c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     85c:	2827      	cmp	r0, #39	; 0x27
     85e:	d816      	bhi.n	88e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     860:	0102      	lsls	r2, r0, #4
     862:	4b10      	ldr	r3, [pc, #64]	; (8a4 <digitalWrite+0x48>)
     864:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     868:	589b      	ldr	r3, [r3, r2]
{
     86a:	b410      	push	{r4}
	mask = p->mask;
     86c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     86e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     870:	4214      	tst	r4, r2
     872:	d005      	beq.n	880 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
     874:	b961      	cbnz	r1, 890 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     876:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     87e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     880:	6883      	ldr	r3, [r0, #8]
		if (val) {
     882:	b151      	cbz	r1, 89a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     884:	4a08      	ldr	r2, [pc, #32]	; (8a8 <digitalWrite+0x4c>)
}
     886:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	4770      	bx	lr
     88e:	4770      	bx	lr
     890:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     898:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     89a:	4a04      	ldr	r2, [pc, #16]	; (8ac <digitalWrite+0x50>)
}
     89c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     8a0:	601a      	str	r2, [r3, #0]
}
     8a2:	4770      	bx	lr
     8a4:	200002c8 	.word	0x200002c8
     8a8:	0001f038 	.word	0x0001f038
     8ac:	00013038 	.word	0x00013038

000008b0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     8b0:	2827      	cmp	r0, #39	; 0x27
     8b2:	d829      	bhi.n	908 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     8b4:	4b16      	ldr	r3, [pc, #88]	; (910 <pinMode+0x60>)
     8b6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     8b8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     8ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8be:	589a      	ldr	r2, [r3, r2]
{
     8c0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8c2:	6853      	ldr	r3, [r2, #4]
     8c4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     8c6:	d00e      	beq.n	8e6 <pinMode+0x36>
     8c8:	2904      	cmp	r1, #4
     8ca:	d00c      	beq.n	8e6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8cc:	ea23 0304 	bic.w	r3, r3, r4
     8d0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8d2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     8d4:	b1a9      	cbz	r1, 902 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     8d6:	2902      	cmp	r1, #2
     8d8:	d017      	beq.n	90a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     8da:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     8dc:	bf0c      	ite	eq
     8de:	4a0d      	ldreq	r2, [pc, #52]	; (914 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     8e0:	4a0d      	ldrne	r2, [pc, #52]	; (918 <pinMode+0x68>)
     8e2:	601a      	str	r2, [r3, #0]
     8e4:	e007      	b.n	8f6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     8e6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     8e8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     8ea:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8ec:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     8ee:	d008      	beq.n	902 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     8f0:	f640 0238 	movw	r2, #2104	; 0x838
     8f4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     8f6:	6843      	ldr	r3, [r0, #4]
     8f8:	2215      	movs	r2, #21
}
     8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     8fe:	601a      	str	r2, [r3, #0]
}
     900:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     902:	2238      	movs	r2, #56	; 0x38
     904:	601a      	str	r2, [r3, #0]
     906:	e7f6      	b.n	8f6 <pinMode+0x46>
     908:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     90a:	4a04      	ldr	r2, [pc, #16]	; (91c <pinMode+0x6c>)
     90c:	601a      	str	r2, [r3, #0]
     90e:	e7f2      	b.n	8f6 <pinMode+0x46>
     910:	200002c8 	.word	0x200002c8
     914:	00013038 	.word	0x00013038
     918:	00010038 	.word	0x00010038
     91c:	0001f038 	.word	0x0001f038

00000920 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     920:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     922:	f7ff fc2f 	bl	184 <setup>
	while (1) {
		loop();
     926:	f7ff fca5 	bl	274 <loop>
		yield();
     92a:	f001 fad5 	bl	1ed8 <yield>
	while (1) {
     92e:	e7fa      	b.n	926 <main+0x6>

00000930 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
     930:	f04f 0c01 	mov.w	ip, #1
     934:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
     938:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     93c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
     940:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
     942:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
     946:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     94a:	4c25      	ldr	r4, [pc, #148]	; (9e0 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
     94c:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     950:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     952:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     954:	fb0e 3303 	mla	r3, lr, r3, r3
     958:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
     95c:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     95e:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
     962:	4573      	cmp	r3, lr
     964:	b2a4      	uxth	r4, r4
     966:	bf28      	it	cs
     968:	4673      	movcs	r3, lr
     96a:	4334      	orrs	r4, r6
	switch (channel) {
     96c:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     96e:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
     972:	d00d      	beq.n	990 <flexpwmWrite+0x60>
     974:	2a02      	cmp	r2, #2
     976:	d028      	beq.n	9ca <flexpwmWrite+0x9a>
     978:	b1c2      	cbz	r2, 9ac <flexpwmWrite+0x7c>
     97a:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     97e:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
     982:	fa1f fc8c 	uxth.w	ip, ip
     986:	ea4c 0c02 	orr.w	ip, ip, r2
     98a:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
     98e:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
     990:	b29b      	uxth	r3, r3
     992:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     996:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
     998:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     99a:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     99e:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
     9a2:	b29b      	uxth	r3, r3
     9a4:	432b      	orrs	r3, r5
     9a6:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
     9aa:	e7e8      	b.n	97e <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
     9ac:	ebae 0e03 	sub.w	lr, lr, r3
     9b0:	f00c 020f 	and.w	r2, ip, #15
     9b4:	fa1f fe8e 	uxth.w	lr, lr
     9b8:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
     9bc:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     9c0:	b29b      	uxth	r3, r3
     9c2:	4313      	orrs	r3, r2
     9c4:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
     9c8:	e7d9      	b.n	97e <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
     9ca:	b29b      	uxth	r3, r3
     9cc:	f00c 020f 	and.w	r2, ip, #15
     9d0:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
     9d2:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     9d6:	b29b      	uxth	r3, r3
     9d8:	431e      	orrs	r6, r3
     9da:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
     9de:	e7ce      	b.n	97e <flexpwmWrite+0x4e>
     9e0:	200006fe 	.word	0x200006fe

000009e4 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
     9e4:	2827      	cmp	r0, #39	; 0x27
     9e6:	d84b      	bhi.n	a80 <analogWrite+0x9c>
{
     9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
     9ea:	4d2a      	ldr	r5, [pc, #168]	; (a94 <analogWrite+0xb0>)
     9ec:	4604      	mov	r4, r0
	if (info->type == 1) {
     9ee:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
     9f2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
     9f6:	2a01      	cmp	r2, #1
     9f8:	d02d      	beq.n	a56 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
     9fa:	2a02      	cmp	r2, #2
     9fc:	d13f      	bne.n	a7e <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     9fe:	786b      	ldrb	r3, [r5, #1]
     a00:	f3c3 1001 	ubfx	r0, r3, #4, #2
     a04:	2803      	cmp	r0, #3
     a06:	d03e      	beq.n	a86 <analogWrite+0xa2>
     a08:	4a23      	ldr	r2, [pc, #140]	; (a98 <analogWrite+0xb4>)
     a0a:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
     a0e:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     a12:	4822      	ldr	r0, [pc, #136]	; (a9c <analogWrite+0xb8>)
     a14:	b289      	uxth	r1, r1
     a16:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     a18:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     a1c:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     a1e:	f8bc e006 	ldrh.w	lr, [ip, #6]
     a22:	0158      	lsls	r0, r3, #5
     a24:	f8bc 3010 	ldrh.w	r3, [ip, #16]
     a28:	fa1f fe8e 	uxth.w	lr, lr
     a2c:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
     a30:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     a34:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
     a38:	fb0e f101 	mul.w	r1, lr, r1
     a3c:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
     a3e:	458e      	cmp	lr, r1
     a40:	d923      	bls.n	a8a <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
     a42:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
     a44:	f1c3 0301 	rsb	r3, r3, #1
     a48:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
     a4a:	b289      	uxth	r1, r1
     a4c:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
     a4e:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
     a52:	8211      	strh	r1, [r2, #16]
}
     a54:	e00d      	b.n	a72 <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
     a56:	786a      	ldrb	r2, [r5, #1]
     a58:	f3c2 1301 	ubfx	r3, r2, #4, #2
     a5c:	2b03      	cmp	r3, #3
     a5e:	d010      	beq.n	a82 <analogWrite+0x9e>
     a60:	480f      	ldr	r0, [pc, #60]	; (aa0 <analogWrite+0xbc>)
     a62:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
     a66:	b28b      	uxth	r3, r1
     a68:	f002 0103 	and.w	r1, r2, #3
     a6c:	78aa      	ldrb	r2, [r5, #2]
     a6e:	f7ff ff5f 	bl	930 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
     a72:	4b0c      	ldr	r3, [pc, #48]	; (aa4 <analogWrite+0xc0>)
     a74:	78ea      	ldrb	r2, [r5, #3]
     a76:	eb03 1304 	add.w	r3, r3, r4, lsl #4
     a7a:	685b      	ldr	r3, [r3, #4]
     a7c:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
     a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a80:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
     a82:	4809      	ldr	r0, [pc, #36]	; (aa8 <analogWrite+0xc4>)
     a84:	e7ef      	b.n	a66 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
     a86:	4a09      	ldr	r2, [pc, #36]	; (aac <analogWrite+0xc8>)
     a88:	e7c1      	b.n	a0e <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
     a8a:	1e99      	subs	r1, r3, #2
     a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     a90:	e7db      	b.n	a4a <analogWrite+0x66>
     a92:	bf00      	nop
     a94:	20000548 	.word	0x20000548
     a98:	401dc000 	.word	0x401dc000
     a9c:	200006fe 	.word	0x200006fe
     aa0:	403dc000 	.word	0x403dc000
     aa4:	200002c8 	.word	0x200002c8
     aa8:	403e8000 	.word	0x403e8000
     aac:	401e8000 	.word	0x401e8000

00000ab0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     ab0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
     ab2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     ab4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
     ab8:	4619      	mov	r1, r3
{
     aba:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     abc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     ac0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     ac4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ac8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
     acc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
     ad0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
     ad2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     ad6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     ada:	b29b      	uxth	r3, r3
     adc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     ae0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ae4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
     ae8:	3101      	adds	r1, #1
     aea:	eb00 1343 	add.w	r3, r0, r3, lsl #5
     aee:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     af0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     af2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     af6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     af8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     afa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     afc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     afe:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
     b02:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     b04:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     b06:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     b08:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
     b0a:	d1eb      	bne.n	ae4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     b0c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     b10:	b29b      	uxth	r3, r3
     b12:	f043 030f 	orr.w	r3, r3, #15
     b16:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     b1a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     b1e:	b29b      	uxth	r3, r3
     b20:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     b24:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
     b28:	bd10      	pop	{r4, pc}
     b2a:	bf00      	nop

00000b2c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b2c:	4b37      	ldr	r3, [pc, #220]	; (c0c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b2e:	4a38      	ldr	r2, [pc, #224]	; (c10 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b30:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     b32:	4838      	ldr	r0, [pc, #224]	; (c14 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b34:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
     b38:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b3a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b3c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b40:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b44:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b48:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b4c:	430a      	orrs	r2, r1
     b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
     b52:	f7ff ffad 	bl	ab0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
     b56:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b5a:	f7ff ffa9 	bl	ab0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
     b5e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b62:	f7ff ffa5 	bl	ab0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
     b66:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b6a:	f7ff ffa1 	bl	ab0 <flexpwm_init>
	for (i=0; i < 4; i++) {
     b6e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     b70:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b74:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
     b78:	4611      	mov	r1, r2
     b7a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     b7e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     b82:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     b84:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     b86:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     b88:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b8a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b8e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b90:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     b92:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     b96:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b98:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     b9a:	d1ee      	bne.n	b7a <pwm_init+0x4e>
     b9c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     b9e:	481e      	ldr	r0, [pc, #120]	; (c18 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     ba0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     ba4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     ba8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     baa:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     bae:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     bb2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     bb6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     bba:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     bbc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     bbe:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     bc0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     bc2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     bc6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     bc8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     bca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     bce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     bd0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     bd2:	d1ee      	bne.n	bb2 <pwm_init+0x86>
     bd4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     bd6:	4811      	ldr	r0, [pc, #68]	; (c1c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     bd8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     bda:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     bde:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     be0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     be4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     be8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     bec:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     bf0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     bf2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     bf4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     bf6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     bf8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     bfa:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     bfc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     bfe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     c02:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     c04:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
     c08:	d1ee      	bne.n	be8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     c0a:	bd70      	pop	{r4, r5, r6, pc}
     c0c:	400fc000 	.word	0x400fc000
     c10:	fc030000 	.word	0xfc030000
     c14:	403dc000 	.word	0x403dc000
     c18:	401e0000 	.word	0x401e0000
     c1c:	401e4000 	.word	0x401e4000

00000c20 <unused_interrupt_vector>:
	__disable_irq();
     c20:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     c22:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     c26:	4c52      	ldr	r4, [pc, #328]	; (d70 <unused_interrupt_vector+0x150>)
     c28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     c2c:	f01e 0f04 	tst.w	lr, #4
     c30:	bf0c      	ite	eq
     c32:	f3ef 8208 	mrseq	r2, MSP
     c36:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     c3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     c3e:	4e4d      	ldr	r6, [pc, #308]	; (d74 <unused_interrupt_vector+0x154>)
	while (p < end) {
     c40:	4d4d      	ldr	r5, [pc, #308]	; (d78 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     c42:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     c46:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     c4a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     c4e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     c52:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     c56:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     c5a:	6993      	ldr	r3, [r2, #24]
     c5c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     c60:	69d3      	ldr	r3, [r2, #28]
     c62:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     c66:	f000 f8a3 	bl	db0 <tempmonGetTemp>
     c6a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     c6e:	f001 fc17 	bl	24a0 <rtc_get>
	info->len = sizeof(*info) / 4;
     c72:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     c78:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     c7c:	460b      	mov	r3, r1
     c7e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     c82:	493e      	ldr	r1, [pc, #248]	; (d7c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     c84:	1d30      	adds	r0, r6, #4
     c86:	405a      	eors	r2, r3
     c88:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     c8a:	f002 0301 	and.w	r3, r2, #1
     c8e:	3c01      	subs	r4, #1
     c90:	fb01 f303 	mul.w	r3, r1, r3
     c94:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     c98:	d1f7      	bne.n	c8a <unused_interrupt_vector+0x6a>
	while (p < end) {
     c9a:	42a8      	cmp	r0, r5
     c9c:	d002      	beq.n	ca4 <unused_interrupt_vector+0x84>
		crc ^= *p++;
     c9e:	6873      	ldr	r3, [r6, #4]
     ca0:	4606      	mov	r6, r0
     ca2:	e7ef      	b.n	c84 <unused_interrupt_vector+0x64>
	info->crc = crc;
     ca4:	4b32      	ldr	r3, [pc, #200]	; (d70 <unused_interrupt_vector+0x150>)
     ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     caa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     cae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     cb2:	4930      	ldr	r1, [pc, #192]	; (d74 <unused_interrupt_vector+0x154>)
     cb4:	4a32      	ldr	r2, [pc, #200]	; (d80 <unused_interrupt_vector+0x160>)
     cb6:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     cba:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     cbe:	f3bf 8f4f 	dsb	sy
	asm("isb");
     cc2:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     cc6:	4a2f      	ldr	r2, [pc, #188]	; (d84 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     cc8:	2502      	movs	r5, #2
     cca:	482f      	ldr	r0, [pc, #188]	; (d88 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     ccc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     cce:	492f      	ldr	r1, [pc, #188]	; (d8c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     cd0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     cd4:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     cd6:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     cd8:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     cda:	482d      	ldr	r0, [pc, #180]	; (d90 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     cdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ce4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     ce6:	680b      	ldr	r3, [r1, #0]
     ce8:	4283      	cmp	r3, r0
     cea:	d83d      	bhi.n	d68 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     cec:	4d26      	ldr	r5, [pc, #152]	; (d88 <unused_interrupt_vector+0x168>)
     cee:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     cf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     cf8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     cfa:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     cfc:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     d00:	4924      	ldr	r1, [pc, #144]	; (d94 <unused_interrupt_vector+0x174>)
     d02:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     d06:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     d0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     d0e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     d12:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     d16:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     d1a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     d1e:	e001      	b.n	d24 <unused_interrupt_vector+0x104>
		usb_isr();
     d20:	f000 f938 	bl	f94 <usb_isr>
		if (PIT_TFLG0) {
     d24:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     d28:	2b00      	cmp	r3, #0
     d2a:	d0f9      	beq.n	d20 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     d2c:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     d2e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     d32:	2c4f      	cmp	r4, #79	; 0x4f
     d34:	d9f4      	bls.n	d20 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d36:	4b18      	ldr	r3, [pc, #96]	; (d98 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     d38:	2002      	movs	r0, #2
     d3a:	4918      	ldr	r1, [pc, #96]	; (d9c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     d40:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d44:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d46:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     d4a:	b93b      	cbnz	r3, d5c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     d4c:	4814      	ldr	r0, [pc, #80]	; (da0 <unused_interrupt_vector+0x180>)
     d4e:	4915      	ldr	r1, [pc, #84]	; (da4 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d50:	4a0d      	ldr	r2, [pc, #52]	; (d88 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     d52:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d54:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     d58:	2b00      	cmp	r3, #0
     d5a:	d0fa      	beq.n	d52 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     d5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     d60:	4a11      	ldr	r2, [pc, #68]	; (da8 <unused_interrupt_vector+0x188>)
     d62:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     d66:	e7fe      	b.n	d66 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     d68:	f001 f956 	bl	2018 <set_arm_clock>
     d6c:	e7be      	b.n	cec <unused_interrupt_vector+0xcc>
     d6e:	bf00      	nop
     d70:	2027ff00 	.word	0x2027ff00
     d74:	2027ff80 	.word	0x2027ff80
     d78:	2027ffa8 	.word	0x2027ffa8
     d7c:	edb88320 	.word	0xedb88320
     d80:	2027ffa0 	.word	0x2027ffa0
     d84:	400fc000 	.word	0x400fc000
     d88:	40084000 	.word	0x40084000
     d8c:	20000670 	.word	0x20000670
     d90:	0bcd3d80 	.word	0x0bcd3d80
     d94:	00249f00 	.word	0x00249f00
     d98:	400d9000 	.word	0x400d9000
     d9c:	402e0000 	.word	0x402e0000
     da0:	400f8000 	.word	0x400f8000
     da4:	0bad00f1 	.word	0x0bad00f1
     da8:	05fa0004 	.word	0x05fa0004

00000dac <Panic_Temp_isr>:
  unused_interrupt_vector();
     dac:	f7ff bf38 	b.w	c20 <unused_interrupt_vector>

00000db0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     db0:	4a12      	ldr	r2, [pc, #72]	; (dfc <tempmonGetTemp+0x4c>)
     db2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     db6:	075b      	lsls	r3, r3, #29
     db8:	d5fb      	bpl.n	db2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     dba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     dbe:	4810      	ldr	r0, [pc, #64]	; (e00 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     dc0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     dc4:	490f      	ldr	r1, [pc, #60]	; (e04 <tempmonGetTemp+0x54>)
     dc6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     dca:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     dce:	ed91 6a00 	vldr	s12, [r1]
     dd2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     dd6:	4a0c      	ldr	r2, [pc, #48]	; (e08 <tempmonGetTemp+0x58>)
     dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     ddc:	4b0b      	ldr	r3, [pc, #44]	; (e0c <tempmonGetTemp+0x5c>)
     dde:	edd2 6a00 	vldr	s13, [r2]
     de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
     de6:	ed93 7a00 	vldr	s14, [r3]
     dea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     dee:	ee67 7a86 	vmul.f32	s15, s15, s12
     df2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     df6:	ee37 0a40 	vsub.f32	s0, s14, s0
     dfa:	4770      	bx	lr
     dfc:	400d8100 	.word	0x400d8100
     e00:	20000f68 	.word	0x20000f68
     e04:	20000f70 	.word	0x20000f70
     e08:	20000f74 	.word	0x20000f74
     e0c:	20000f6c 	.word	0x20000f6c

00000e10 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     e12:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     e14:	b11b      	cbz	r3, e1e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     e16:	6853      	ldr	r3, [r2, #4]
     e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e1c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     e1e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     e20:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     e22:	b33c      	cbz	r4, e74 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     e24:	4b1a      	ldr	r3, [pc, #104]	; (e90 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     e26:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     e28:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     e2c:	420c      	tst	r4, r1
     e2e:	d11d      	bne.n	e6c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     e30:	4e18      	ldr	r6, [pc, #96]	; (e94 <schedule_transfer+0x84>)
     e32:	6877      	ldr	r7, [r6, #4]
     e34:	e004      	b.n	e40 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     e36:	6874      	ldr	r4, [r6, #4]
     e38:	1be4      	subs	r4, r4, r7
     e3a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     e3e:	d20b      	bcs.n	e58 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     e40:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e44:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     e48:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     e4c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     e50:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e54:	0464      	lsls	r4, r4, #17
     e56:	d5ee      	bpl.n	e36 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     e58:	400d      	ands	r5, r1
     e5a:	d107      	bne.n	e6c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     e5c:	4c0c      	ldr	r4, [pc, #48]	; (e90 <schedule_transfer+0x80>)
		endpoint->status = 0;
     e5e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     e62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e66:	430b      	orrs	r3, r1
     e68:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     e6c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     e6e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     e70:	bcf0      	pop	{r4, r5, r6, r7}
     e72:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     e74:	4d06      	ldr	r5, [pc, #24]	; (e90 <schedule_transfer+0x80>)
	endpoint->status = 0;
     e76:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     e7a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     e7e:	430b      	orrs	r3, r1
     e80:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     e84:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     e86:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     e88:	b662      	cpsie	i
}
     e8a:	bcf0      	pop	{r4, r5, r6, r7}
     e8c:	4770      	bx	lr
     e8e:	bf00      	nop
     e90:	402e0000 	.word	0x402e0000
     e94:	e0001000 	.word	0xe0001000

00000e98 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     e98:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     e9a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     e9c:	b19d      	cbz	r5, ec6 <run_callbacks+0x2e>
     e9e:	4606      	mov	r6, r0
     ea0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     ea2:	2400      	movs	r4, #0
     ea4:	e003      	b.n	eae <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     ea6:	6812      	ldr	r2, [r2, #0]
		count++;
     ea8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     eaa:	2a01      	cmp	r2, #1
     eac:	d00c      	beq.n	ec8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     eae:	6853      	ldr	r3, [r2, #4]
     eb0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     eb4:	d0f7      	beq.n	ea6 <run_callbacks+0xe>
			ep->first_transfer = t;
     eb6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     eb8:	b12c      	cbz	r4, ec6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     eba:	4628      	mov	r0, r5
		ep->callback_function(first);
     ebc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     ebe:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     ec0:	4798      	blx	r3
	while (count) {
     ec2:	3c01      	subs	r4, #1
     ec4:	d1f9      	bne.n	eba <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     ec6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     ec8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     ecc:	e7f4      	b.n	eb8 <run_callbacks+0x20>
     ece:	bf00      	nop

00000ed0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     ed0:	b430      	push	{r4, r5}
	if (len > 0) {
     ed2:	b9d9      	cbnz	r1, f0c <endpoint0_transmit.constprop.0+0x3c>
     ed4:	4c1f      	ldr	r4, [pc, #124]	; (f54 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     ed6:	4b20      	ldr	r3, [pc, #128]	; (f58 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     ed8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     eda:	4a20      	ldr	r2, [pc, #128]	; (f5c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     edc:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ede:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     ee2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     ee4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     ee6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     eea:	2480      	movs	r4, #128	; 0x80
     eec:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     eee:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     ef2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     ef6:	481a      	ldr	r0, [pc, #104]	; (f60 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     ef8:	432b      	orrs	r3, r5
     efa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     efe:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     f00:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f04:	2b00      	cmp	r3, #0
     f06:	d1fb      	bne.n	f00 <endpoint0_transmit.constprop.0+0x30>
}
     f08:	bc30      	pop	{r4, r5}
     f0a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f0c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     f0e:	4b15      	ldr	r3, [pc, #84]	; (f64 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     f10:	4c10      	ldr	r4, [pc, #64]	; (f54 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     f12:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f14:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     f18:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     f1a:	4a10      	ldr	r2, [pc, #64]	; (f5c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f1c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f1e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     f22:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f24:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f26:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     f2a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f2c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f2e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f32:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f36:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     f38:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f3a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     f3c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     f3e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     f46:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     f4a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f4e:	2b00      	cmp	r3, #0
     f50:	d1fb      	bne.n	f4a <endpoint0_transmit.constprop.0+0x7a>
     f52:	e7c0      	b.n	ed6 <endpoint0_transmit.constprop.0+0x6>
     f54:	20000000 	.word	0x20000000
     f58:	20000b20 	.word	0x20000b20
     f5c:	402e0000 	.word	0x402e0000
     f60:	20000f0c 	.word	0x20000f0c
     f64:	20000b40 	.word	0x20000b40

00000f68 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     f68:	4908      	ldr	r1, [pc, #32]	; (f8c <usb_stop_sof_interrupts+0x24>)
     f6a:	2201      	movs	r2, #1
     f6c:	780b      	ldrb	r3, [r1, #0]
     f6e:	fa02 f000 	lsl.w	r0, r2, r0
     f72:	ea23 0000 	bic.w	r0, r3, r0
     f76:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     f78:	b930      	cbnz	r0, f88 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     f7a:	4a05      	ldr	r2, [pc, #20]	; (f90 <usb_stop_sof_interrupts+0x28>)
     f7c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f84:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     f88:	4770      	bx	lr
     f8a:	bf00      	nop
     f8c:	20000fb3 	.word	0x20000fb3
     f90:	402e0000 	.word	0x402e0000

00000f94 <usb_isr>:
{
     f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     f98:	4c97      	ldr	r4, [pc, #604]	; (11f8 <usb_isr+0x264>)
{
     f9a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     f9c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     fa0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
     fa2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     fa6:	d553      	bpl.n	1050 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     fa8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     fac:	2a00      	cmp	r2, #0
     fae:	d04a      	beq.n	1046 <usb_isr+0xb2>
     fb0:	4e92      	ldr	r6, [pc, #584]	; (11fc <usb_isr+0x268>)
     fb2:	f8df a260 	ldr.w	sl, [pc, #608]	; 1214 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
     fb6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 122c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     fba:	f8df b274 	ldr.w	fp, [pc, #628]	; 1230 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     fbe:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1234 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
     fc2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     fc6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     fca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     fd2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     fd6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fda:	049d      	lsls	r5, r3, #18
     fdc:	d5f5      	bpl.n	fca <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     fde:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     fe6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     fea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     fee:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     ff2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
     ff6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
     ffa:	d1fa      	bne.n	ff2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
     ffc:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
     ffe:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    1000:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    1004:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    1008:	f000 81cf 	beq.w	13aa <usb_isr+0x416>
    100c:	f200 80db 	bhi.w	11c6 <usb_isr+0x232>
    1010:	f240 3102 	movw	r1, #770	; 0x302
    1014:	428b      	cmp	r3, r1
    1016:	f000 81e7 	beq.w	13e8 <usb_isr+0x454>
    101a:	f200 809a 	bhi.w	1152 <usb_isr+0x1be>
    101e:	2b82      	cmp	r3, #130	; 0x82
    1020:	f000 81cb 	beq.w	13ba <usb_isr+0x426>
    1024:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1028:	f040 808a 	bne.w	1140 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    102c:	f010 0f78 	tst.w	r0, #120	; 0x78
    1030:	b283      	uxth	r3, r0
    1032:	f000 8203 	beq.w	143c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1036:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    103a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    103e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1042:	2a00      	cmp	r2, #0
    1044:	d1bd      	bne.n	fc2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1046:	4a6c      	ldr	r2, [pc, #432]	; (11f8 <usb_isr+0x264>)
    1048:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    104c:	2b00      	cmp	r3, #0
    104e:	d142      	bne.n	10d6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1050:	067e      	lsls	r6, r7, #25
    1052:	d516      	bpl.n	1082 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1054:	4b68      	ldr	r3, [pc, #416]	; (11f8 <usb_isr+0x264>)
    1056:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    105a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    105e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1062:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1066:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    106a:	2c00      	cmp	r4, #0
    106c:	d1fb      	bne.n	1066 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    106e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1072:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1076:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    107a:	f000 fd31 	bl	1ae0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    107e:	4b60      	ldr	r3, [pc, #384]	; (1200 <usb_isr+0x26c>)
    1080:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    1082:	01fc      	lsls	r4, r7, #7
    1084:	d503      	bpl.n	108e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1086:	4b5f      	ldr	r3, [pc, #380]	; (1204 <usb_isr+0x270>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	b103      	cbz	r3, 108e <usb_isr+0xfa>
    108c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    108e:	01b8      	lsls	r0, r7, #6
    1090:	d503      	bpl.n	109a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1092:	4b5d      	ldr	r3, [pc, #372]	; (1208 <usb_isr+0x274>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	b103      	cbz	r3, 109a <usb_isr+0x106>
    1098:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    109a:	0779      	lsls	r1, r7, #29
    109c:	d508      	bpl.n	10b0 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    109e:	4b56      	ldr	r3, [pc, #344]	; (11f8 <usb_isr+0x264>)
    10a0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    10a4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    10a8:	d047      	beq.n	113a <usb_isr+0x1a6>
			usb_high_speed = 1;
    10aa:	4b58      	ldr	r3, [pc, #352]	; (120c <usb_isr+0x278>)
    10ac:	2201      	movs	r2, #1
    10ae:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    10b0:	4b51      	ldr	r3, [pc, #324]	; (11f8 <usb_isr+0x264>)
    10b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    10b6:	061a      	lsls	r2, r3, #24
    10b8:	d50a      	bpl.n	10d0 <usb_isr+0x13c>
    10ba:	063b      	lsls	r3, r7, #24
    10bc:	d508      	bpl.n	10d0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    10be:	4a54      	ldr	r2, [pc, #336]	; (1210 <usb_isr+0x27c>)
    10c0:	7813      	ldrb	r3, [r2, #0]
    10c2:	b12b      	cbz	r3, 10d0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    10c4:	3b01      	subs	r3, #1
    10c6:	b2db      	uxtb	r3, r3
    10c8:	7013      	strb	r3, [r2, #0]
    10ca:	2b00      	cmp	r3, #0
    10cc:	f000 8272 	beq.w	15b4 <usb_isr+0x620>
}
    10d0:	b003      	add	sp, #12
    10d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    10d6:	494f      	ldr	r1, [pc, #316]	; (1214 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    10d8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    10dc:	6808      	ldr	r0, [r1, #0]
    10de:	4203      	tst	r3, r0
    10e0:	f040 81d1 	bne.w	1486 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    10e4:	4a46      	ldr	r2, [pc, #280]	; (1200 <usb_isr+0x26c>)
    10e6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    10e8:	401c      	ands	r4, r3
    10ea:	d0b1      	beq.n	1050 <usb_isr+0xbc>
				while (tx) {
    10ec:	ea5f 4814 	movs.w	r8, r4, lsr #16
    10f0:	d010      	beq.n	1114 <usb_isr+0x180>
    10f2:	4e42      	ldr	r6, [pc, #264]	; (11fc <usb_isr+0x268>)
					tx &= ~(1<<p);
    10f4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    10f8:	fa98 f5a8 	rbit	r5, r8
    10fc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1100:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    1104:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1108:	3040      	adds	r0, #64	; 0x40
    110a:	f7ff fec5 	bl	e98 <run_callbacks>
				while (tx) {
    110e:	ea38 0805 	bics.w	r8, r8, r5
    1112:	d1f1      	bne.n	10f8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    1114:	b2a4      	uxth	r4, r4
				while(rx) {
    1116:	2c00      	cmp	r4, #0
    1118:	d09a      	beq.n	1050 <usb_isr+0xbc>
    111a:	4e38      	ldr	r6, [pc, #224]	; (11fc <usb_isr+0x268>)
					rx &= ~(1<<p);
    111c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1120:	fa94 f5a4 	rbit	r5, r4
    1124:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1128:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    112c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1130:	f7ff feb2 	bl	e98 <run_callbacks>
				while(rx) {
    1134:	43ac      	bics	r4, r5
    1136:	d1f3      	bne.n	1120 <usb_isr+0x18c>
    1138:	e78a      	b.n	1050 <usb_isr+0xbc>
			usb_high_speed = 0;
    113a:	4a34      	ldr	r2, [pc, #208]	; (120c <usb_isr+0x278>)
    113c:	7013      	strb	r3, [r2, #0]
    113e:	e7b7      	b.n	10b0 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1140:	2b80      	cmp	r3, #128	; 0x80
    1142:	f47f af78 	bne.w	1036 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    1146:	4834      	ldr	r0, [pc, #208]	; (1218 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1148:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    114a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    114c:	f7ff fec0 	bl	ed0 <endpoint0_transmit.constprop.0>
		return;
    1150:	e775      	b.n	103e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1152:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1156:	f000 810b 	beq.w	1370 <usb_isr+0x3dc>
    115a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    115e:	2b01      	cmp	r3, #1
    1160:	f63f af69 	bhi.w	1036 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1164:	4b2d      	ldr	r3, [pc, #180]	; (121c <usb_isr+0x288>)
    1166:	685d      	ldr	r5, [r3, #4]
    1168:	2d00      	cmp	r5, #0
    116a:	f43f af64 	beq.w	1036 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    116e:	fa1f fc8c 	uxth.w	ip, ip
    1172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    1176:	e004      	b.n	1182 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1178:	691d      	ldr	r5, [r3, #16]
    117a:	330c      	adds	r3, #12
    117c:	2d00      	cmp	r5, #0
    117e:	f43f af5a 	beq.w	1036 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1182:	881a      	ldrh	r2, [r3, #0]
    1184:	4572      	cmp	r2, lr
    1186:	d1f7      	bne.n	1178 <usb_isr+0x1e4>
    1188:	885a      	ldrh	r2, [r3, #2]
    118a:	4562      	cmp	r2, ip
    118c:	d1f4      	bne.n	1178 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    118e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1192:	2a03      	cmp	r2, #3
    1194:	f000 81a5 	beq.w	14e2 <usb_isr+0x54e>
					datalen = list->length;
    1198:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    119a:	0c00      	lsrs	r0, r0, #16
    119c:	4282      	cmp	r2, r0
    119e:	bf28      	it	cs
    11a0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    11a2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    11a6:	f040 81a1 	bne.w	14ec <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    11aa:	4b18      	ldr	r3, [pc, #96]	; (120c <usb_isr+0x278>)
    11ac:	491c      	ldr	r1, [pc, #112]	; (1220 <usb_isr+0x28c>)
    11ae:	7818      	ldrb	r0, [r3, #0]
    11b0:	4b1c      	ldr	r3, [pc, #112]	; (1224 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    11b2:	9201      	str	r2, [sp, #4]
    11b4:	2800      	cmp	r0, #0
    11b6:	bf18      	it	ne
    11b8:	4619      	movne	r1, r3
    11ba:	481b      	ldr	r0, [pc, #108]	; (1228 <usb_isr+0x294>)
    11bc:	f001 f8a4 	bl	2308 <memcpy>
    11c0:	4d19      	ldr	r5, [pc, #100]	; (1228 <usb_isr+0x294>)
    11c2:	9a01      	ldr	r2, [sp, #4]
    11c4:	e1e1      	b.n	158a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    11c6:	f242 2121 	movw	r1, #8737	; 0x2221
    11ca:	428b      	cmp	r3, r1
    11cc:	d07c      	beq.n	12c8 <usb_isr+0x334>
    11ce:	d933      	bls.n	1238 <usb_isr+0x2a4>
    11d0:	f242 3121 	movw	r1, #8993	; 0x2321
    11d4:	428b      	cmp	r3, r1
    11d6:	f000 8081 	beq.w	12dc <usb_isr+0x348>
    11da:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    11de:	428b      	cmp	r3, r1
    11e0:	f47f af29 	bne.w	1036 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    11e4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    11e8:	b283      	uxth	r3, r0
    11ea:	f47f af24 	bne.w	1036 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    11ee:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    11f2:	f363 0c0f 	bfi	ip, r3, #0, #16
    11f6:	e7b5      	b.n	1164 <usb_isr+0x1d0>
    11f8:	402e0000 	.word	0x402e0000
    11fc:	20000000 	.word	0x20000000
    1200:	20000f10 	.word	0x20000f10
    1204:	20000f98 	.word	0x20000f98
    1208:	20000f9c 	.word	0x20000f9c
    120c:	20000fbb 	.word	0x20000fbb
    1210:	20000fbc 	.word	0x20000fbc
    1214:	20000f0c 	.word	0x20000f0c
    1218:	20000f30 	.word	0x20000f30
    121c:	200005e8 	.word	0x200005e8
    1220:	60001b30 	.word	0x60001b30
    1224:	60001b94 	.word	0x60001b94
    1228:	20200000 	.word	0x20200000
    122c:	20000f04 	.word	0x20000f04
    1230:	b8c6cf5d 	.word	0xb8c6cf5d
    1234:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1238:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    123c:	d066      	beq.n	130c <usb_isr+0x378>
    123e:	f242 0121 	movw	r1, #8225	; 0x2021
    1242:	428b      	cmp	r3, r1
    1244:	f47f aef7 	bne.w	1036 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1248:	0c03      	lsrs	r3, r0, #16
    124a:	2b07      	cmp	r3, #7
    124c:	f47f aef3 	bne.w	1036 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1250:	4bb2      	ldr	r3, [pc, #712]	; (151c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1252:	49b3      	ldr	r1, [pc, #716]	; (1520 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1254:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1256:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1258:	49b2      	ldr	r1, [pc, #712]	; (1524 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    125a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    125c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1260:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    1264:	2201      	movs	r2, #1
    1266:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1268:	4aaf      	ldr	r2, [pc, #700]	; (1528 <usb_isr+0x594>)
    126a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    126c:	4aaf      	ldr	r2, [pc, #700]	; (152c <usb_isr+0x598>)
    126e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1270:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    1274:	f041 0101 	orr.w	r1, r1, #1
    1278:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    127c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1280:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1284:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1286:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1288:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    128c:	2b00      	cmp	r3, #0
    128e:	d1fb      	bne.n	1288 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1290:	4aa7      	ldr	r2, [pc, #668]	; (1530 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1292:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1294:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    1296:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1298:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    129a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    129c:	f248 0380 	movw	r3, #32896	; 0x8080
    12a0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    12a6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    12aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    12b2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    12b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    12ba:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    12be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12c2:	2b00      	cmp	r3, #0
    12c4:	d1fb      	bne.n	12be <usb_isr+0x32a>
    12c6:	e6ba      	b.n	103e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    12c8:	b280      	uxth	r0, r0
    12ca:	b938      	cbnz	r0, 12dc <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    12cc:	4b99      	ldr	r3, [pc, #612]	; (1534 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    12ce:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    12d2:	6819      	ldr	r1, [r3, #0]
    12d4:	4b98      	ldr	r3, [pc, #608]	; (1538 <usb_isr+0x5a4>)
    12d6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    12d8:	4b98      	ldr	r3, [pc, #608]	; (153c <usb_isr+0x5a8>)
    12da:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    12dc:	4b94      	ldr	r3, [pc, #592]	; (1530 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    12de:	2200      	movs	r2, #0
    12e0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    12e2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    12e4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    12e6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    12e8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12ea:	2280      	movs	r2, #128	; 0x80
    12ec:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    12f2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    12f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    12fe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1302:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1306:	2b00      	cmp	r3, #0
    1308:	d1fb      	bne.n	1302 <usb_isr+0x36e>
    130a:	e698      	b.n	103e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    130c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1310:	4b8b      	ldr	r3, [pc, #556]	; (1540 <usb_isr+0x5ac>)
    1312:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1314:	4b8b      	ldr	r3, [pc, #556]	; (1544 <usb_isr+0x5b0>)
    1316:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    131a:	4b8b      	ldr	r3, [pc, #556]	; (1548 <usb_isr+0x5b4>)
    131c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1320:	4b8a      	ldr	r3, [pc, #552]	; (154c <usb_isr+0x5b8>)
    1322:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    1326:	f000 fbdd 	bl	1ae4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    132a:	2280      	movs	r2, #128	; 0x80
    132c:	4629      	mov	r1, r5
    132e:	4888      	ldr	r0, [pc, #544]	; (1550 <usb_isr+0x5bc>)
    1330:	f001 fa4c 	bl	27cc <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1334:	4b87      	ldr	r3, [pc, #540]	; (1554 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1336:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1338:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    133c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1340:	4b7b      	ldr	r3, [pc, #492]	; (1530 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1342:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1344:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    1346:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1348:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    134a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    134c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    134e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1352:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1356:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    135a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    135e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1362:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    1366:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    136a:	2b00      	cmp	r3, #0
    136c:	d1fb      	bne.n	1366 <usb_isr+0x3d2>
    136e:	e666      	b.n	103e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1370:	4b6f      	ldr	r3, [pc, #444]	; (1530 <usb_isr+0x59c>)
    1372:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    1374:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1376:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1378:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    137a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    137c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    137e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1380:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1384:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1388:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1390:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1394:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1398:	2b00      	cmp	r3, #0
    139a:	d1fb      	bne.n	1394 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    139c:	0c13      	lsrs	r3, r2, #16
    139e:	065b      	lsls	r3, r3, #25
    13a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    13a4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    13a8:	e649      	b.n	103e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    13aa:	4b65      	ldr	r3, [pc, #404]	; (1540 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    13ac:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    13ae:	486a      	ldr	r0, [pc, #424]	; (1558 <usb_isr+0x5c4>)
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    13b4:	f7ff fd8c 	bl	ed0 <endpoint0_transmit.constprop.0>
		return;
    13b8:	e641      	b.n	103e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    13ba:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    13bc:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    13c0:	f47f ae39 	bne.w	1036 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    13c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    13c8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    13cc:	4a62      	ldr	r2, [pc, #392]	; (1558 <usb_isr+0x5c4>)
    13ce:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    13d0:	0618      	lsls	r0, r3, #24
    13d2:	f100 809e 	bmi.w	1512 <usb_isr+0x57e>
    13d6:	07cb      	lsls	r3, r1, #31
    13d8:	d501      	bpl.n	13de <usb_isr+0x44a>
			reply_buffer[0] = 1;
    13da:	2301      	movs	r3, #1
    13dc:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    13de:	2102      	movs	r1, #2
    13e0:	485d      	ldr	r0, [pc, #372]	; (1558 <usb_isr+0x5c4>)
    13e2:	f7ff fd75 	bl	ed0 <endpoint0_transmit.constprop.0>
		return;
    13e6:	e62a      	b.n	103e <usb_isr+0xaa>
		if (endpoint > 7) break;
    13e8:	f010 0f78 	tst.w	r0, #120	; 0x78
    13ec:	b283      	uxth	r3, r0
    13ee:	f47f ae22 	bne.w	1036 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    13f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    13f6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    13fa:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    13fe:	bf14      	ite	ne
    1400:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1404:	f043 0301 	orreq.w	r3, r3, #1
    1408:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    140c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    140e:	4b48      	ldr	r3, [pc, #288]	; (1530 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1410:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1412:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1414:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1416:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1418:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    141a:	2280      	movs	r2, #128	; 0x80
    141c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    141e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1422:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1426:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    142a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    142e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1432:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1436:	2b00      	cmp	r3, #0
    1438:	d1fb      	bne.n	1432 <usb_isr+0x49e>
    143a:	e600      	b.n	103e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    143c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1440:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1444:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1448:	bf14      	ite	ne
    144a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    144e:	f023 0301 	biceq.w	r3, r3, #1
    1452:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1456:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1458:	4b35      	ldr	r3, [pc, #212]	; (1530 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    145a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    145c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    145e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1460:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1462:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1464:	2280      	movs	r2, #128	; 0x80
    1466:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1468:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    146c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1470:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1478:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    147c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1480:	2b00      	cmp	r3, #0
    1482:	d1fb      	bne.n	147c <usb_isr+0x4e8>
    1484:	e5db      	b.n	103e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    1486:	2000      	movs	r0, #0
    1488:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    148a:	4926      	ldr	r1, [pc, #152]	; (1524 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    148c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    148e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1490:	f242 0121 	movw	r1, #8225	; 0x2021
    1494:	428c      	cmp	r4, r1
    1496:	f47f ae25 	bne.w	10e4 <usb_isr+0x150>
    149a:	b280      	uxth	r0, r0
    149c:	2800      	cmp	r0, #0
    149e:	f47f ae21 	bne.w	10e4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    14a2:	492e      	ldr	r1, [pc, #184]	; (155c <usb_isr+0x5c8>)
    14a4:	4c2e      	ldr	r4, [pc, #184]	; (1560 <usb_isr+0x5cc>)
    14a6:	c903      	ldmia	r1, {r0, r1}
    14a8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    14aa:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    14ac:	ea4f 4111 	mov.w	r1, r1, lsr #16
    14b0:	6020      	str	r0, [r4, #0]
    14b2:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    14b4:	f47f ae16 	bne.w	10e4 <usb_isr+0x150>
	__disable_irq();
    14b8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    14ba:	482a      	ldr	r0, [pc, #168]	; (1564 <usb_isr+0x5d0>)
    14bc:	7801      	ldrb	r1, [r0, #0]
    14be:	f041 0108 	orr.w	r1, r1, #8
    14c2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    14c4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    14c8:	060d      	lsls	r5, r1, #24
    14ca:	d405      	bmi.n	14d8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    14cc:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    14ce:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    14d0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    14d4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    14d8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    14da:	4a23      	ldr	r2, [pc, #140]	; (1568 <usb_isr+0x5d4>)
    14dc:	2150      	movs	r1, #80	; 0x50
    14de:	7011      	strb	r1, [r2, #0]
    14e0:	e600      	b.n	10e4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    14e2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    14e4:	782a      	ldrb	r2, [r5, #0]
    14e6:	4282      	cmp	r2, r0
    14e8:	bf28      	it	cs
    14ea:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    14ec:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    14f0:	d144      	bne.n	157c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    14f2:	4b1e      	ldr	r3, [pc, #120]	; (156c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    14f4:	4d1e      	ldr	r5, [pc, #120]	; (1570 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    14f6:	7818      	ldrb	r0, [r3, #0]
    14f8:	491e      	ldr	r1, [pc, #120]	; (1574 <usb_isr+0x5e0>)
    14fa:	4b1f      	ldr	r3, [pc, #124]	; (1578 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    14fc:	9201      	str	r2, [sp, #4]
    14fe:	2800      	cmp	r0, #0
    1500:	bf18      	it	ne
    1502:	4619      	movne	r1, r3
    1504:	4628      	mov	r0, r5
    1506:	f000 feff 	bl	2308 <memcpy>
					usb_descriptor_buffer[1] = 7;
    150a:	2307      	movs	r3, #7
    150c:	706b      	strb	r3, [r5, #1]
    150e:	9a01      	ldr	r2, [sp, #4]
    1510:	e03b      	b.n	158a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1512:	03c9      	lsls	r1, r1, #15
    1514:	f53f af61 	bmi.w	13da <usb_isr+0x446>
    1518:	e761      	b.n	13de <usb_isr+0x44a>
    151a:	bf00      	nop
    151c:	20000b40 	.word	0x20000b40
    1520:	20001f04 	.word	0x20001f04
    1524:	20000ce0 	.word	0x20000ce0
    1528:	00070080 	.word	0x00070080
    152c:	20002f04 	.word	0x20002f04
    1530:	20000b20 	.word	0x20000b20
    1534:	20000f80 	.word	0x20000f80
    1538:	20000f94 	.word	0x20000f94
    153c:	20000fb9 	.word	0x20000fb9
    1540:	20000fba 	.word	0x20000fba
    1544:	00cc0002 	.word	0x00cc0002
    1548:	000200c8 	.word	0x000200c8
    154c:	00c80002 	.word	0x00c80002
    1550:	20000080 	.word	0x20000080
    1554:	74d59319 	.word	0x74d59319
    1558:	20000f30 	.word	0x20000f30
    155c:	20000f04 	.word	0x20000f04
    1560:	20000f8c 	.word	0x20000f8c
    1564:	20000fb3 	.word	0x20000fb3
    1568:	20000fbc 	.word	0x20000fbc
    156c:	20000fbb 	.word	0x20000fbb
    1570:	20200000 	.word	0x20200000
    1574:	60001b94 	.word	0x60001b94
    1578:	60001b30 	.word	0x60001b30
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    157c:	4629      	mov	r1, r5
    157e:	4d10      	ldr	r5, [pc, #64]	; (15c0 <usb_isr+0x62c>)
    1580:	9201      	str	r2, [sp, #4]
    1582:	4628      	mov	r0, r5
    1584:	f000 fec0 	bl	2308 <memcpy>
    1588:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    158a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    158e:	4415      	add	r5, r2
	asm("dsb");
    1590:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1594:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1598:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    159c:	3320      	adds	r3, #32
	} while (location < end_addr);
    159e:	429d      	cmp	r5, r3
    15a0:	d8fa      	bhi.n	1598 <usb_isr+0x604>
	asm("dsb");
    15a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    15a6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    15aa:	4805      	ldr	r0, [pc, #20]	; (15c0 <usb_isr+0x62c>)
    15ac:	4611      	mov	r1, r2
    15ae:	f7ff fc8f 	bl	ed0 <endpoint0_transmit.constprop.0>
				return;
    15b2:	e544      	b.n	103e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    15b4:	2003      	movs	r0, #3
    15b6:	f7ff fcd7 	bl	f68 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    15ba:	f001 f9cd 	bl	2958 <___reboot_Teensyduino__veneer>
    15be:	bf00      	nop
    15c0:	20200000 	.word	0x20200000

000015c4 <usb_config_rx>:
{
    15c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15c8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    15ca:	1e83      	subs	r3, r0, #2
    15cc:	2b02      	cmp	r3, #2
    15ce:	d901      	bls.n	15d4 <usb_config_rx+0x10>
}
    15d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15d4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1624 <usb_config_rx+0x60>
    15d8:	4615      	mov	r5, r2
    15da:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    15dc:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15de:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    15e2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15e4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    15e8:	2100      	movs	r1, #0
    15ea:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15ee:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    15f0:	f001 f8ec 	bl	27cc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15f4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    15f8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15fa:	0952      	lsrs	r2, r2, #5
    15fc:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    1600:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    1604:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1608:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    160c:	2f00      	cmp	r7, #0
    160e:	d0df      	beq.n	15d0 <usb_config_rx+0xc>
    1610:	4a03      	ldr	r2, [pc, #12]	; (1620 <usb_config_rx+0x5c>)
    1612:	40b3      	lsls	r3, r6
    1614:	6811      	ldr	r1, [r2, #0]
    1616:	430b      	orrs	r3, r1
    1618:	6013      	str	r3, [r2, #0]
}
    161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    161e:	bf00      	nop
    1620:	20000f10 	.word	0x20000f10
    1624:	20000000 	.word	0x20000000

00001628 <usb_config_tx>:
{
    1628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    162c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    162e:	1e81      	subs	r1, r0, #2
    1630:	2902      	cmp	r1, #2
    1632:	d901      	bls.n	1638 <usb_config_tx+0x10>
}
    1634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1638:	01c7      	lsls	r7, r0, #7
    163a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1688 <usb_config_tx+0x60>
    163e:	4692      	mov	sl, r2
    1640:	4604      	mov	r4, r0
    1642:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1644:	223c      	movs	r2, #60	; 0x3c
    1646:	2100      	movs	r1, #0
    1648:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    164a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    164e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1650:	f108 0004 	add.w	r0, r8, #4
    1654:	f001 f8ba 	bl	27cc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1658:	faba f28a 	clz	r2, sl
    165c:	0952      	lsrs	r2, r2, #5
    165e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1662:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1666:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1668:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    166c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1670:	2e00      	cmp	r6, #0
    1672:	d0df      	beq.n	1634 <usb_config_tx+0xc>
    1674:	4b03      	ldr	r3, [pc, #12]	; (1684 <usb_config_tx+0x5c>)
    1676:	3410      	adds	r4, #16
    1678:	6819      	ldr	r1, [r3, #0]
    167a:	40a2      	lsls	r2, r4
    167c:	430a      	orrs	r2, r1
    167e:	601a      	str	r2, [r3, #0]
}
    1680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1684:	20000f10 	.word	0x20000f10
    1688:	20000000 	.word	0x20000000

0000168c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    168c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    168e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1690:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1692:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    169a:	b410      	push	{r4}
	transfer->next = 1;
    169c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    169e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    16a0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    16a4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    16a6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    16aa:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    16ae:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    16b0:	6181      	str	r1, [r0, #24]
}
    16b2:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    16b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    16ba:	4770      	bx	lr

000016bc <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16bc:	1e83      	subs	r3, r0, #2
{
    16be:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16c0:	2b02      	cmp	r3, #2
    16c2:	d900      	bls.n	16c6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    16c4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    16c6:	4b06      	ldr	r3, [pc, #24]	; (16e0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    16c8:	f100 0110 	add.w	r1, r0, #16
    16cc:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    16d0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    16d4:	fa0c f101 	lsl.w	r1, ip, r1
    16d8:	3040      	adds	r0, #64	; 0x40
    16da:	f7ff bb99 	b.w	e10 <schedule_transfer>
    16de:	bf00      	nop
    16e0:	20000000 	.word	0x20000000

000016e4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16e4:	1e83      	subs	r3, r0, #2
{
    16e6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16e8:	2b02      	cmp	r3, #2
    16ea:	d900      	bls.n	16ee <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    16ec:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    16ee:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    16f0:	4b02      	ldr	r3, [pc, #8]	; (16fc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    16f2:	4081      	lsls	r1, r0
    16f4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    16f8:	f7ff bb8a 	b.w	e10 <schedule_transfer>
    16fc:	20000000 	.word	0x20000000

00001700 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1700:	6840      	ldr	r0, [r0, #4]
#endif
}
    1702:	4770      	bx	lr

00001704 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1704:	4a12      	ldr	r2, [pc, #72]	; (1750 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1706:	4b13      	ldr	r3, [pc, #76]	; (1754 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1708:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    170c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    1710:	4298      	cmp	r0, r3
{
    1712:	b510      	push	{r4, lr}
    1714:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    1716:	d202      	bcs.n	171e <usb_init_serialnumber+0x1a>
    1718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    171c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    171e:	4c0e      	ldr	r4, [pc, #56]	; (1758 <usb_init_serialnumber+0x54>)
    1720:	a901      	add	r1, sp, #4
    1722:	220a      	movs	r2, #10
    1724:	f000 fe8a 	bl	243c <ultoa>
	for (i=0; i<10; i++) {
    1728:	a901      	add	r1, sp, #4
    172a:	2300      	movs	r3, #0
    172c:	4620      	mov	r0, r4
		char c = buf[i];
    172e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    1732:	3301      	adds	r3, #1
		if (!c) break;
    1734:	b13a      	cbz	r2, 1746 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    1736:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    1738:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    173c:	d1f7      	bne.n	172e <usb_init_serialnumber+0x2a>
    173e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1740:	7023      	strb	r3, [r4, #0]
}
    1742:	b004      	add	sp, #16
    1744:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1746:	005b      	lsls	r3, r3, #1
    1748:	b2db      	uxtb	r3, r3
    174a:	7023      	strb	r3, [r4, #0]
}
    174c:	b004      	add	sp, #16
    174e:	bd10      	pop	{r4, pc}
    1750:	401f4400 	.word	0x401f4400
    1754:	00989680 	.word	0x00989680
    1758:	200006e8 	.word	0x200006e8

0000175c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    175c:	f000 bae0 	b.w	1d20 <usb_serial_flush_input>

00001760 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1760:	f000 bab0 	b.w	1cc4 <usb_serial_peekchar>

00001764 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1764:	f000 bb14 	b.w	1d90 <usb_serial_getchar>

00001768 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1768:	f000 bace 	b.w	1d08 <usb_serial_available>

0000176c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    176c:	f000 bb6a 	b.w	1e44 <usb_serial_flush_output>

00001770 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1770:	f000 bb40 	b.w	1df4 <usb_serial_write_buffer_free>

00001774 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1774:	4608      	mov	r0, r1
    1776:	4611      	mov	r1, r2
    1778:	f000 bb30 	b.w	1ddc <usb_serial_write>

0000177c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    177c:	4608      	mov	r0, r1
    177e:	f000 bb17 	b.w	1db0 <usb_serial_putchar>
    1782:	bf00      	nop

00001784 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1786:	4c14      	ldr	r4, [pc, #80]	; (17d8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1788:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    178c:	4e13      	ldr	r6, [pc, #76]	; (17dc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    178e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1792:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1796:	4f12      	ldr	r7, [pc, #72]	; (17e0 <rx_queue_transfer+0x5c>)
    1798:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    179c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    179e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    17a2:	4621      	mov	r1, r4
    17a4:	883a      	ldrh	r2, [r7, #0]
    17a6:	4630      	mov	r0, r6
    17a8:	f7ff ff70 	bl	168c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    17ac:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    17ae:	4423      	add	r3, r4
	asm("dsb");
    17b0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    17b4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    17b8:	3420      	adds	r4, #32
	} while (location < end_addr);
    17ba:	42a3      	cmp	r3, r4
    17bc:	d8fa      	bhi.n	17b4 <rx_queue_transfer+0x30>
	asm("dsb");
    17be:	f3bf 8f4f 	dsb	sy
	asm("isb");
    17c2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    17c6:	2003      	movs	r0, #3
    17c8:	4631      	mov	r1, r6
    17ca:	f7ff ff8b 	bl	16e4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    17ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    17d2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    17d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17d8:	20200080 	.word	0x20200080
    17dc:	20000b60 	.word	0x20000b60
    17e0:	20000fa0 	.word	0x20000fa0

000017e4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17e4:	4b24      	ldr	r3, [pc, #144]	; (1878 <rx_event+0x94>)
{
    17e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17ea:	881c      	ldrh	r4, [r3, #0]
    17ec:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    17ee:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17f0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    17f4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    17f6:	2c00      	cmp	r4, #0
    17f8:	dd24      	ble.n	1844 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    17fa:	4920      	ldr	r1, [pc, #128]	; (187c <rx_event+0x98>)
		if (head != rx_tail) {
    17fc:	4820      	ldr	r0, [pc, #128]	; (1880 <rx_event+0x9c>)
		uint32_t head = rx_head;
    17fe:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    1800:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    1802:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    1804:	4e1f      	ldr	r6, [pc, #124]	; (1884 <rx_event+0xa0>)
		if (head != rx_tail) {
    1806:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    1808:	481f      	ldr	r0, [pc, #124]	; (1888 <rx_event+0xa4>)
		if (head != rx_tail) {
    180a:	d007      	beq.n	181c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    180c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1810:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1814:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1818:	4294      	cmp	r4, r2
    181a:	d918      	bls.n	184e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    181c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    181e:	2200      	movs	r2, #0
		rx_count[i] = len;
    1820:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    1824:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    1826:	4e19      	ldr	r6, [pc, #100]	; (188c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1828:	bf88      	it	hi
    182a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    182c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    1830:	bf98      	it	ls
    1832:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    1834:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    1836:	4b16      	ldr	r3, [pc, #88]	; (1890 <rx_event+0xac>)
		rx_head = head;
    1838:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    183a:	681a      	ldr	r2, [r3, #0]
    183c:	4414      	add	r4, r2
    183e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    1844:	4628      	mov	r0, r5
}
    1846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    184a:	f7ff bf9b 	b.w	1784 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    184e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1852:	4910      	ldr	r1, [pc, #64]	; (1894 <rx_event+0xb0>)
    1854:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1856:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1858:	4408      	add	r0, r1
    185a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    185e:	f000 fd53 	bl	2308 <memcpy>
				rx_available += len;
    1862:	4a0b      	ldr	r2, [pc, #44]	; (1890 <rx_event+0xac>)
				rx_queue_transfer(i);
    1864:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1866:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    186a:	6813      	ldr	r3, [r2, #0]
    186c:	4423      	add	r3, r4
}
    186e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1872:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1874:	f7ff bf86 	b.w	1784 <rx_queue_transfer>
    1878:	20000fa0 	.word	0x20000fa0
    187c:	20000fb1 	.word	0x20000fb1
    1880:	20000fb2 	.word	0x20000fb2
    1884:	20000f3c 	.word	0x20000f3c
    1888:	20000f5c 	.word	0x20000f5c
    188c:	20000f4c 	.word	0x20000f4c
    1890:	20000f38 	.word	0x20000f38
    1894:	20200080 	.word	0x20200080

00001898 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1898:	4b1d      	ldr	r3, [pc, #116]	; (1910 <usb_serial_flush_callback+0x78>)
    189a:	781a      	ldrb	r2, [r3, #0]
    189c:	2a00      	cmp	r2, #0
    189e:	d136      	bne.n	190e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    18a0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    18a4:	4a1b      	ldr	r2, [pc, #108]	; (1914 <usb_serial_flush_callback+0x7c>)
    18a6:	7812      	ldrb	r2, [r2, #0]
    18a8:	b38a      	cbz	r2, 190e <usb_serial_flush_callback+0x76>
{
    18aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    18ae:	4d1a      	ldr	r5, [pc, #104]	; (1918 <usb_serial_flush_callback+0x80>)
    18b0:	882a      	ldrh	r2, [r5, #0]
    18b2:	b352      	cbz	r2, 190a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    18b4:	4e19      	ldr	r6, [pc, #100]	; (191c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    18b6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    18ba:	4f19      	ldr	r7, [pc, #100]	; (1920 <usb_serial_flush_callback+0x88>)
    18bc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    18be:	4c19      	ldr	r4, [pc, #100]	; (1924 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    18c0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    18c4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    18c8:	4642      	mov	r2, r8
    18ca:	4638      	mov	r0, r7
    18cc:	4621      	mov	r1, r4
    18ce:	f7ff fedd 	bl	168c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    18d2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    18d6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    18da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    18de:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    18e2:	3420      	adds	r4, #32
	} while (location < end_addr);
    18e4:	42a2      	cmp	r2, r4
    18e6:	d8fa      	bhi.n	18de <usb_serial_flush_callback+0x46>
	asm("dsb");
    18e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    18ec:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    18f0:	2004      	movs	r0, #4
    18f2:	4639      	mov	r1, r7
    18f4:	f7ff fee2 	bl	16bc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    18f8:	7833      	ldrb	r3, [r6, #0]
    18fa:	3301      	adds	r3, #1
    18fc:	b2db      	uxtb	r3, r3
    18fe:	2b03      	cmp	r3, #3
    1900:	bf88      	it	hi
    1902:	2300      	movhi	r3, #0
    1904:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1906:	2300      	movs	r3, #0
    1908:	802b      	strh	r3, [r5, #0]
}
    190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    190e:	4770      	bx	lr
    1910:	20000fb8 	.word	0x20000fb8
    1914:	20000fba 	.word	0x20000fba
    1918:	20000fa4 	.word	0x20000fa4
    191c:	20000fb7 	.word	0x20000fb7
    1920:	20000c60 	.word	0x20000c60
    1924:	20201080 	.word	0x20201080

00001928 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    192c:	b085      	sub	sp, #20
	while (size > 0) {
    192e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1932:	2900      	cmp	r1, #0
    1934:	f000 80bf 	beq.w	1ab6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1938:	2300      	movs	r3, #0
    193a:	4c60      	ldr	r4, [pc, #384]	; (1abc <usb_serial_write.part.0+0x194>)
    193c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1ad8 <usb_serial_write.part.0+0x1b0>
    1940:	f8df a198 	ldr.w	sl, [pc, #408]	; 1adc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    1944:	4f5e      	ldr	r7, [pc, #376]	; (1ac0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    1946:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1948:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    194a:	4a5e      	ldr	r2, [pc, #376]	; (1ac4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    194c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    194e:	4b5e      	ldr	r3, [pc, #376]	; (1ac8 <usb_serial_write.part.0+0x1a0>)
    1950:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    1952:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    1956:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    195a:	2b00      	cmp	r3, #0
    195c:	f040 80a7 	bne.w	1aae <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    1960:	461e      	mov	r6, r3
		int waiting=0;
    1962:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    1964:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    1966:	4648      	mov	r0, r9
    1968:	f7ff feca 	bl	1700 <usb_transfer_status>
			if (!(status & 0x80)) {
    196c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    1970:	f000 808c 	beq.w	1a8c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    1974:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    1978:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    197c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    1980:	b905      	cbnz	r5, 1984 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    1982:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    1984:	2b00      	cmp	r3, #0
    1986:	d17d      	bne.n	1a84 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1988:	683b      	ldr	r3, [r7, #0]
    198a:	1b9b      	subs	r3, r3, r6
    198c:	2b78      	cmp	r3, #120	; 0x78
    198e:	f200 8087 	bhi.w	1aa0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    1992:	4b4e      	ldr	r3, [pc, #312]	; (1acc <usb_serial_write.part.0+0x1a4>)
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	2b00      	cmp	r3, #0
    1998:	d074      	beq.n	1a84 <usb_serial_write.part.0+0x15c>
			yield();
    199a:	f000 fa9d 	bl	1ed8 <yield>
			tx_noautoflush = 1;
    199e:	2201      	movs	r2, #1
		while (!tx_available) {
    19a0:	f8b8 3000 	ldrh.w	r3, [r8]
    19a4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    19a6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    19a8:	2b00      	cmp	r3, #0
    19aa:	d0dc      	beq.n	1966 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    19ac:	4a46      	ldr	r2, [pc, #280]	; (1ac8 <usb_serial_write.part.0+0x1a0>)
    19ae:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    19b2:	7811      	ldrb	r1, [r2, #0]
    19b4:	461a      	mov	r2, r3
    19b6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    19ba:	4d45      	ldr	r5, [pc, #276]	; (1ad0 <usb_serial_write.part.0+0x1a8>)
    19bc:	02c9      	lsls	r1, r1, #11
    19be:	4428      	add	r0, r5
		if (size >= tx_available) {
    19c0:	9d01      	ldr	r5, [sp, #4]
    19c2:	4295      	cmp	r5, r2
    19c4:	d217      	bcs.n	19f6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    19c6:	9303      	str	r3, [sp, #12]
    19c8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    19cc:	462a      	mov	r2, r5
    19ce:	f000 fc9b 	bl	2308 <memcpy>
			tx_available -= size;
    19d2:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    19d8:	1b5b      	subs	r3, r3, r5
    19da:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19de:	4b3d      	ldr	r3, [pc, #244]	; (1ad4 <usb_serial_write.part.0+0x1ac>)
    19e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    19e4:	f3bf 8f4f 	dsb	sy
			sent += size;
    19e8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    19ea:	2300      	movs	r3, #0
			sent += size;
    19ec:	4428      	add	r0, r5
		tx_noautoflush = 0;
    19ee:	7023      	strb	r3, [r4, #0]
}
    19f0:	b005      	add	sp, #20
    19f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    19f6:	4b36      	ldr	r3, [pc, #216]	; (1ad0 <usb_serial_write.part.0+0x1a8>)
    19f8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    19fa:	9902      	ldr	r1, [sp, #8]
    19fc:	f000 fc84 	bl	2308 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1a00:	2300      	movs	r3, #0
    1a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a06:	4629      	mov	r1, r5
    1a08:	4648      	mov	r0, r9
    1a0a:	f7ff fe3f 	bl	168c <usb_prepare_transfer>
	asm("dsb");
    1a0e:	f3bf 8f4f 	dsb	sy
    1a12:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    1a16:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1a1a:	4293      	cmp	r3, r2
    1a1c:	bf34      	ite	cc
    1a1e:	2301      	movcc	r3, #1
    1a20:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    1a22:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1a26:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1a2a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    1a2e:	3520      	adds	r5, #32
	} while (location < end_addr);
    1a30:	42ab      	cmp	r3, r5
    1a32:	d1fa      	bne.n	1a2a <usb_serial_write.part.0+0x102>
	asm("dsb");
    1a34:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a38:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1a3c:	2004      	movs	r0, #4
    1a3e:	4649      	mov	r1, r9
    1a40:	f7ff fe3c 	bl	16bc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1a44:	4a20      	ldr	r2, [pc, #128]	; (1ac8 <usb_serial_write.part.0+0x1a0>)
    1a46:	7813      	ldrb	r3, [r2, #0]
    1a48:	3301      	adds	r3, #1
    1a4a:	b2db      	uxtb	r3, r3
    1a4c:	2b03      	cmp	r3, #3
    1a4e:	bf84      	itt	hi
    1a50:	2300      	movhi	r3, #0
    1a52:	4a1d      	ldrhi	r2, [pc, #116]	; (1ac8 <usb_serial_write.part.0+0x1a0>)
    1a54:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1a56:	f8b8 3000 	ldrh.w	r3, [r8]
    1a5a:	9a01      	ldr	r2, [sp, #4]
    1a5c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    1a5e:	9a00      	ldr	r2, [sp, #0]
    1a60:	441a      	add	r2, r3
			size -= tx_available;
    1a62:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    1a64:	9200      	str	r2, [sp, #0]
			data += tx_available;
    1a66:	9a02      	ldr	r2, [sp, #8]
    1a68:	441a      	add	r2, r3
			tx_available = 0;
    1a6a:	2300      	movs	r3, #0
			data += tx_available;
    1a6c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    1a6e:	4a19      	ldr	r2, [pc, #100]	; (1ad4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    1a70:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    1a74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    1a78:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    1a7c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    1a7e:	2900      	cmp	r1, #0
    1a80:	f47f af62 	bne.w	1948 <usb_serial_write.part.0+0x20>
	return sent;
    1a84:	9800      	ldr	r0, [sp, #0]
}
    1a86:	b005      	add	sp, #20
    1a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    1a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a90:	4b0d      	ldr	r3, [pc, #52]	; (1ac8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    1a92:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a96:	7819      	ldrb	r1, [r3, #0]
				break;
    1a98:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    1a9a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    1a9e:	e78a      	b.n	19b6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    1aa0:	2301      	movs	r3, #1
				return sent;
    1aa2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    1aa4:	f88a 3000 	strb.w	r3, [sl]
}
    1aa8:	b005      	add	sp, #20
    1aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1aae:	461a      	mov	r2, r3
    1ab0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1ab4:	e77f      	b.n	19b6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    1ab6:	9801      	ldr	r0, [sp, #4]
	return sent;
    1ab8:	e7e5      	b.n	1a86 <usb_serial_write.part.0+0x15e>
    1aba:	bf00      	nop
    1abc:	20000fb8 	.word	0x20000fb8
    1ac0:	20000f80 	.word	0x20000f80
    1ac4:	20000c60 	.word	0x20000c60
    1ac8:	20000fb7 	.word	0x20000fb7
    1acc:	20000fba 	.word	0x20000fba
    1ad0:	20201080 	.word	0x20201080
    1ad4:	402e0000 	.word	0x402e0000
    1ad8:	20000fa4 	.word	0x20000fa4
    1adc:	20000fb6 	.word	0x20000fb6

00001ae0 <usb_serial_reset>:
}
    1ae0:	4770      	bx	lr
    1ae2:	bf00      	nop

00001ae4 <usb_serial_configure>:
	if (usb_high_speed) {
    1ae4:	4b2d      	ldr	r3, [pc, #180]	; (1b9c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1ae6:	2100      	movs	r1, #0
    1ae8:	2280      	movs	r2, #128	; 0x80
    1aea:	482d      	ldr	r0, [pc, #180]	; (1ba0 <usb_serial_configure+0xbc>)
{
    1aec:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1aee:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1af0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1af2:	4d2c      	ldr	r5, [pc, #176]	; (1ba4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1af4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1af6:	4e2c      	ldr	r6, [pc, #176]	; (1ba8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1af8:	bf0c      	ite	eq
    1afa:	2340      	moveq	r3, #64	; 0x40
    1afc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1b00:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1b02:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1b04:	f000 fe62 	bl	27cc <memset>
	tx_head = 0;
    1b08:	4a28      	ldr	r2, [pc, #160]	; (1bac <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b0a:	4621      	mov	r1, r4
	tx_available = 0;
    1b0c:	4b28      	ldr	r3, [pc, #160]	; (1bb0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    1b0e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b10:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b14:	4827      	ldr	r0, [pc, #156]	; (1bb4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1b16:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b18:	f000 fe58 	bl	27cc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1b1c:	4a26      	ldr	r2, [pc, #152]	; (1bb8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b1e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1b20:	4b26      	ldr	r3, [pc, #152]	; (1bbc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b22:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1b24:	e9c2 4400 	strd	r4, r4, [r2]
    1b28:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1b2c:	4a24      	ldr	r2, [pc, #144]	; (1bc0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1b2e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1b32:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1b34:	4a23      	ldr	r2, [pc, #140]	; (1bc4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1b36:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1b3a:	4b23      	ldr	r3, [pc, #140]	; (1bc8 <usb_serial_configure+0xe4>)
    1b3c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b3e:	4623      	mov	r3, r4
	rx_available = 0;
    1b40:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b42:	4622      	mov	r2, r4
    1b44:	f7ff fd70 	bl	1628 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1b48:	4622      	mov	r2, r4
    1b4a:	8831      	ldrh	r1, [r6, #0]
    1b4c:	2003      	movs	r0, #3
    1b4e:	4b1f      	ldr	r3, [pc, #124]	; (1bcc <usb_serial_configure+0xe8>)
    1b50:	f7ff fd38 	bl	15c4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1b54:	4623      	mov	r3, r4
    1b56:	2201      	movs	r2, #1
    1b58:	8829      	ldrh	r1, [r5, #0]
    1b5a:	2004      	movs	r0, #4
    1b5c:	f7ff fd64 	bl	1628 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b60:	4620      	mov	r0, r4
    1b62:	3401      	adds	r4, #1
    1b64:	f7ff fe0e 	bl	1784 <rx_queue_transfer>
    1b68:	2c08      	cmp	r4, #8
    1b6a:	d1f9      	bne.n	1b60 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1b6c:	4b18      	ldr	r3, [pc, #96]	; (1bd0 <usb_serial_configure+0xec>)
    1b6e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1b70:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1b72:	4818      	ldr	r0, [pc, #96]	; (1bd4 <usb_serial_configure+0xf0>)
    1b74:	4c18      	ldr	r4, [pc, #96]	; (1bd8 <usb_serial_configure+0xf4>)
    1b76:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1b78:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1b80:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1b84:	4915      	ldr	r1, [pc, #84]	; (1bdc <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1b86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1b8a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1b8e:	b121      	cbz	r1, 1b9a <usb_serial_configure+0xb6>
    1b90:	4a13      	ldr	r2, [pc, #76]	; (1be0 <usb_serial_configure+0xfc>)
    1b92:	7813      	ldrb	r3, [r2, #0]
    1b94:	f043 0301 	orr.w	r3, r3, #1
    1b98:	7013      	strb	r3, [r2, #0]
}
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
    1b9c:	20000fbb 	.word	0x20000fbb
    1ba0:	20000c60 	.word	0x20000c60
    1ba4:	20000fa6 	.word	0x20000fa6
    1ba8:	20000fa0 	.word	0x20000fa0
    1bac:	20000fb7 	.word	0x20000fb7
    1bb0:	20000fa4 	.word	0x20000fa4
    1bb4:	20000b60 	.word	0x20000b60
    1bb8:	20000f3c 	.word	0x20000f3c
    1bbc:	20000f4c 	.word	0x20000f4c
    1bc0:	20000fb1 	.word	0x20000fb1
    1bc4:	20000f38 	.word	0x20000f38
    1bc8:	20000fb2 	.word	0x20000fb2
    1bcc:	000017e5 	.word	0x000017e5
    1bd0:	402e0000 	.word	0x402e0000
    1bd4:	20000f98 	.word	0x20000f98
    1bd8:	00001899 	.word	0x00001899
    1bdc:	00000000 	.word	0x00000000
    1be0:	20000fbf 	.word	0x20000fbf

00001be4 <usb_serial_read>:
{
    1be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1be8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1bec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    1bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1cbc <usb_serial_read+0xd8>
{
    1bf4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bf6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    1bfa:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    1bfc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    1c00:	2900      	cmp	r1, #0
    1c02:	d04f      	beq.n	1ca4 <usb_serial_read+0xc0>
    1c04:	4680      	mov	r8, r0
    1c06:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    1c08:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    1c0a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1cc0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    1c0e:	4b26      	ldr	r3, [pc, #152]	; (1ca8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    1c10:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c14:	4925      	ldr	r1, [pc, #148]	; (1cac <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    1c16:	781b      	ldrb	r3, [r3, #0]
    1c18:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    1c1a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    1c1e:	d03f      	beq.n	1ca0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    1c20:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    1c22:	4b23      	ldr	r3, [pc, #140]	; (1cb0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c24:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    1c26:	bf28      	it	cs
    1c28:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1c2a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    1c2c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c30:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    1c34:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    1c36:	4b1f      	ldr	r3, [pc, #124]	; (1cb4 <usb_serial_read+0xd0>)
    1c38:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    1c3c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    1c40:	42aa      	cmp	r2, r5
    1c42:	d21c      	bcs.n	1c7e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1c44:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    1c48:	4918      	ldr	r1, [pc, #96]	; (1cac <usb_serial_read+0xc8>)
			rx_available -= len;
    1c4a:	4c1b      	ldr	r4, [pc, #108]	; (1cb8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1c4c:	4461      	add	r1, ip
    1c4e:	9201      	str	r2, [sp, #4]
    1c50:	f000 fb5a 	bl	2308 <memcpy>
			rx_available -= len;
    1c54:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    1c56:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    1c5a:	4658      	mov	r0, fp
			rx_index[i] += len;
    1c5c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    1c5e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    1c62:	442a      	add	r2, r5
			rx_available -= len;
    1c64:	4439      	add	r1, r7
			rx_index[i] += len;
    1c66:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    1c6a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1c6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1c74:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    1c78:	b003      	add	sp, #12
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c7e:	462a      	mov	r2, r5
			count += avail;
    1c80:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c82:	f000 fb41 	bl	2308 <memcpy>
			rx_available -= avail;
    1c86:	490c      	ldr	r1, [pc, #48]	; (1cb8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    1c88:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1c8a:	4630      	mov	r0, r6
			rx_available -= avail;
    1c8c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    1c8e:	44a8      	add	r8, r5
			rx_available -= avail;
    1c90:	1b52      	subs	r2, r2, r5
    1c92:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    1c94:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    1c98:	f7ff fd74 	bl	1784 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    1c9c:	45bb      	cmp	fp, r7
    1c9e:	d8b6      	bhi.n	1c0e <usb_serial_read+0x2a>
	return count;
    1ca0:	4638      	mov	r0, r7
    1ca2:	e7e3      	b.n	1c6c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    1ca4:	4608      	mov	r0, r1
    1ca6:	e7e1      	b.n	1c6c <usb_serial_read+0x88>
    1ca8:	20000fb1 	.word	0x20000fb1
    1cac:	20200080 	.word	0x20200080
    1cb0:	20000f5c 	.word	0x20000f5c
    1cb4:	20000f3c 	.word	0x20000f3c
    1cb8:	20000f38 	.word	0x20000f38
    1cbc:	20000fb2 	.word	0x20000fb2
    1cc0:	20000f4c 	.word	0x20000f4c

00001cc4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    1cc4:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    1cc6:	4a0c      	ldr	r2, [pc, #48]	; (1cf8 <usb_serial_peekchar+0x34>)
    1cc8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    1cca:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    1ccc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    1cce:	428a      	cmp	r2, r1
    1cd0:	d00d      	beq.n	1cee <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1cd2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1cd4:	4809      	ldr	r0, [pc, #36]	; (1cfc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cd6:	4a0a      	ldr	r2, [pc, #40]	; (1d00 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    1cd8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cda:	490a      	ldr	r1, [pc, #40]	; (1d04 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    1cdc:	bf28      	it	cs
    1cde:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1ce0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1ce2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    1ce6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    1cea:	5c58      	ldrb	r0, [r3, r1]
    1cec:	4770      	bx	lr
	if (tail == rx_head) return -1;
    1cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1cf2:	4770      	bx	lr
    1cf4:	20000fb1 	.word	0x20000fb1
    1cf8:	20000fb2 	.word	0x20000fb2
    1cfc:	20000f5c 	.word	0x20000f5c
    1d00:	20200080 	.word	0x20200080
    1d04:	20000f4c 	.word	0x20000f4c

00001d08 <usb_serial_available>:
	uint32_t n = rx_available;
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <usb_serial_available+0x14>)
{
    1d0a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1d0c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1d0e:	b10c      	cbz	r4, 1d14 <usb_serial_available+0xc>
}
    1d10:	4620      	mov	r0, r4
    1d12:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    1d14:	f000 f8e0 	bl	1ed8 <yield>
}
    1d18:	4620      	mov	r0, r4
    1d1a:	bd10      	pop	{r4, pc}
    1d1c:	20000f38 	.word	0x20000f38

00001d20 <usb_serial_flush_input>:
{
    1d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1d24:	4e14      	ldr	r6, [pc, #80]	; (1d78 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    1d26:	4d15      	ldr	r5, [pc, #84]	; (1d7c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    1d28:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    1d2a:	782a      	ldrb	r2, [r5, #0]
    1d2c:	4293      	cmp	r3, r2
    1d2e:	d021      	beq.n	1d74 <usb_serial_flush_input+0x54>
    1d30:	b2dc      	uxtb	r4, r3
    1d32:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1d84 <usb_serial_flush_input+0x64>
    1d36:	f8df b050 	ldr.w	fp, [pc, #80]	; 1d88 <usb_serial_flush_input+0x68>
    1d3a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1d8c <usb_serial_flush_input+0x6c>
    1d3e:	4f10      	ldr	r7, [pc, #64]	; (1d80 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    1d40:	3401      	adds	r4, #1
    1d42:	2c08      	cmp	r4, #8
		rx_tail = tail;
    1d44:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    1d48:	d901      	bls.n	1d4e <usb_serial_flush_input+0x2e>
    1d4a:	2400      	movs	r4, #0
    1d4c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    1d4e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1d52:	f8db 3000 	ldr.w	r3, [fp]
    1d56:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    1d5a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    1d5e:	1a52      	subs	r2, r2, r1
    1d60:	1a9b      	subs	r3, r3, r2
    1d62:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1d66:	f7ff fd0d 	bl	1784 <rx_queue_transfer>
		rx_tail = tail;
    1d6a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    1d6e:	782b      	ldrb	r3, [r5, #0]
    1d70:	42a3      	cmp	r3, r4
    1d72:	d1e5      	bne.n	1d40 <usb_serial_flush_input+0x20>
}
    1d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	20000fb2 	.word	0x20000fb2
    1d7c:	20000fb1 	.word	0x20000fb1
    1d80:	20000f4c 	.word	0x20000f4c
    1d84:	20000f5c 	.word	0x20000f5c
    1d88:	20000f38 	.word	0x20000f38
    1d8c:	20000f3c 	.word	0x20000f3c

00001d90 <usb_serial_getchar>:
{
    1d90:	b500      	push	{lr}
    1d92:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    1d94:	2101      	movs	r1, #1
    1d96:	f10d 0007 	add.w	r0, sp, #7
    1d9a:	f7ff ff23 	bl	1be4 <usb_serial_read>
    1d9e:	b120      	cbz	r0, 1daa <usb_serial_getchar+0x1a>
    1da0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    1da4:	b003      	add	sp, #12
    1da6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    1daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1dae:	e7f9      	b.n	1da4 <usb_serial_getchar+0x14>

00001db0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    1db0:	4b09      	ldr	r3, [pc, #36]	; (1dd8 <usb_serial_putchar+0x28>)
{
    1db2:	b500      	push	{lr}
    1db4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    1db6:	781b      	ldrb	r3, [r3, #0]
{
    1db8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    1dbc:	b13b      	cbz	r3, 1dce <usb_serial_putchar+0x1e>
    1dbe:	2101      	movs	r1, #1
    1dc0:	f10d 0007 	add.w	r0, sp, #7
    1dc4:	f7ff fdb0 	bl	1928 <usb_serial_write.part.0>
}
    1dc8:	b003      	add	sp, #12
    1dca:	f85d fb04 	ldr.w	pc, [sp], #4
    1dce:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1dd2:	b003      	add	sp, #12
    1dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    1dd8:	20000fba 	.word	0x20000fba

00001ddc <usb_serial_write>:
	if (!usb_configuration) return 0;
    1ddc:	4b04      	ldr	r3, [pc, #16]	; (1df0 <usb_serial_write+0x14>)
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1de4:	b10b      	cbz	r3, 1dea <usb_serial_write+0xe>
    1de6:	f7ff bd9f 	b.w	1928 <usb_serial_write.part.0>
}
    1dea:	4610      	mov	r0, r2
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop
    1df0:	20000fba 	.word	0x20000fba

00001df4 <usb_serial_write_buffer_free>:
{
    1df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    1df8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    1dfa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1e40 <usb_serial_write_buffer_free+0x4c>
    1dfe:	2301      	movs	r3, #1
    1e00:	4d0d      	ldr	r5, [pc, #52]	; (1e38 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    1e02:	4627      	mov	r7, r4
    1e04:	4e0d      	ldr	r6, [pc, #52]	; (1e3c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    1e06:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    1e0a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1e0c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e0e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    1e10:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e12:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1e16:	d005      	beq.n	1e24 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1e18:	f7ff fc72 	bl	1700 <usb_transfer_status>
    1e1c:	0603      	lsls	r3, r0, #24
    1e1e:	bf58      	it	pl
    1e20:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e24:	2c04      	cmp	r4, #4
    1e26:	d1f0      	bne.n	1e0a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    1e28:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    1e2c:	2300      	movs	r3, #0
}
    1e2e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    1e30:	f888 3000 	strb.w	r3, [r8]
}
    1e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e38:	20000c60 	.word	0x20000c60
    1e3c:	20000fb7 	.word	0x20000fb7
    1e40:	20000fb8 	.word	0x20000fb8

00001e44 <usb_serial_flush_output>:
{
    1e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    1e48:	4b1d      	ldr	r3, [pc, #116]	; (1ec0 <usb_serial_flush_output+0x7c>)
    1e4a:	781b      	ldrb	r3, [r3, #0]
    1e4c:	b113      	cbz	r3, 1e54 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1e4e:	4d1d      	ldr	r5, [pc, #116]	; (1ec4 <usb_serial_flush_output+0x80>)
    1e50:	882a      	ldrh	r2, [r5, #0]
    1e52:	b90a      	cbnz	r2, 1e58 <usb_serial_flush_output+0x14>
}
    1e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    1e58:	4e1b      	ldr	r6, [pc, #108]	; (1ec8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    1e5a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1e5e:	491b      	ldr	r1, [pc, #108]	; (1ecc <usb_serial_flush_output+0x88>)
    1e60:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e62:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e64:	4c1a      	ldr	r4, [pc, #104]	; (1ed0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1e66:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    1e6a:	4f1a      	ldr	r7, [pc, #104]	; (1ed4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e6c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    1e70:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e72:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    1e74:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e76:	4621      	mov	r1, r4
    1e78:	2300      	movs	r3, #0
    1e7a:	f7ff fc07 	bl	168c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1e7e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    1e82:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1e86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1e8a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1e8e:	3420      	adds	r4, #32
	} while (location < end_addr);
    1e90:	42a2      	cmp	r2, r4
    1e92:	d8fa      	bhi.n	1e8a <usb_serial_flush_output+0x46>
	asm("dsb");
    1e94:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1e98:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1e9c:	2004      	movs	r0, #4
    1e9e:	4641      	mov	r1, r8
    1ea0:	f7ff fc0c 	bl	16bc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1ea4:	7833      	ldrb	r3, [r6, #0]
    1ea6:	3301      	adds	r3, #1
    1ea8:	b2db      	uxtb	r3, r3
    1eaa:	2b03      	cmp	r3, #3
    1eac:	bf88      	it	hi
    1eae:	2300      	movhi	r3, #0
    1eb0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1eb2:	2300      	movs	r3, #0
    1eb4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    1eb6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    1eba:	703b      	strb	r3, [r7, #0]
}
    1ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ec0:	20000fba 	.word	0x20000fba
    1ec4:	20000fa4 	.word	0x20000fa4
    1ec8:	20000fb7 	.word	0x20000fb7
    1ecc:	20000c60 	.word	0x20000c60
    1ed0:	20201080 	.word	0x20201080
    1ed4:	20000fb8 	.word	0x20000fb8

00001ed8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    1ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    1edc:	4b2d      	ldr	r3, [pc, #180]	; (1f94 <yield+0xbc>)
    1ede:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1ee0:	b166      	cbz	r6, 1efc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    1ee2:	4f2d      	ldr	r7, [pc, #180]	; (1f98 <yield+0xc0>)
    1ee4:	783b      	ldrb	r3, [r7, #0]
    1ee6:	b94b      	cbnz	r3, 1efc <yield+0x24>
	running = 1;
    1ee8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1eea:	07f1      	lsls	r1, r6, #31
	running = 1;
    1eec:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1eee:	d443      	bmi.n	1f78 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1ef0:	07b2      	lsls	r2, r6, #30
    1ef2:	d426      	bmi.n	1f42 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    1ef4:	2300      	movs	r3, #0
    1ef6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    1ef8:	0773      	lsls	r3, r6, #29
    1efa:	d401      	bmi.n	1f00 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    1efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1f00:	4b26      	ldr	r3, [pc, #152]	; (1f9c <yield+0xc4>)
    1f02:	681a      	ldr	r2, [r3, #0]
    1f04:	2a00      	cmp	r2, #0
    1f06:	d0f9      	beq.n	1efc <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1f08:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1f0c:	2a00      	cmp	r2, #0
    1f0e:	d1f5      	bne.n	1efc <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f10:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    1f14:	b672      	cpsid	i
		EventResponder *first = firstYield;
    1f16:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1f18:	2800      	cmp	r0, #0
    1f1a:	d034      	beq.n	1f86 <yield+0xae>
		if (runningFromYield) {
    1f1c:	4c20      	ldr	r4, [pc, #128]	; (1fa0 <yield+0xc8>)
    1f1e:	7821      	ldrb	r1, [r4, #0]
    1f20:	2900      	cmp	r1, #0
    1f22:	d130      	bne.n	1f86 <yield+0xae>
		runningFromYield = true;
    1f24:	2201      	movs	r2, #1
    1f26:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    1f28:	6942      	ldr	r2, [r0, #20]
    1f2a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    1f2c:	2a00      	cmp	r2, #0
    1f2e:	d02e      	beq.n	1f8e <yield+0xb6>
			firstYield->_prev = nullptr;
    1f30:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f32:	b905      	cbnz	r5, 1f36 <yield+0x5e>
    1f34:	b662      	cpsie	i
		first->_triggered = false;
    1f36:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1f38:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    1f3a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1f3c:	4798      	blx	r3
		runningFromYield = false;
    1f3e:	7025      	strb	r5, [r4, #0]
    1f40:	e7dc      	b.n	1efc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f42:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1fa8 <yield+0xd0>
    1f46:	f898 3000 	ldrb.w	r3, [r8]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d0d2      	beq.n	1ef4 <yield+0x1c>
    1f4e:	2500      	movs	r5, #0
    1f50:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1fac <yield+0xd4>
    1f54:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    1f56:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f5a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1f5c:	6823      	ldr	r3, [r4, #0]
    1f5e:	4620      	mov	r0, r4
    1f60:	691b      	ldr	r3, [r3, #16]
    1f62:	4798      	blx	r3
    1f64:	b110      	cbz	r0, 1f6c <yield+0x94>
    1f66:	6963      	ldr	r3, [r4, #20]
    1f68:	689b      	ldr	r3, [r3, #8]
    1f6a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f6c:	f898 2000 	ldrb.w	r2, [r8]
    1f70:	b2eb      	uxtb	r3, r5
    1f72:	429a      	cmp	r2, r3
    1f74:	d8ef      	bhi.n	1f56 <yield+0x7e>
    1f76:	e7bd      	b.n	1ef4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    1f78:	f7ff fec6 	bl	1d08 <usb_serial_available>
		if (Serial.available()) serialEvent();
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d0b7      	beq.n	1ef0 <yield+0x18>
    1f80:	f3af 8000 	nop.w
    1f84:	e7b4      	b.n	1ef0 <yield+0x18>
		if (doit) __enable_irq();
    1f86:	2d00      	cmp	r5, #0
    1f88:	d1b8      	bne.n	1efc <yield+0x24>
    1f8a:	b662      	cpsie	i
    1f8c:	e7b6      	b.n	1efc <yield+0x24>
			lastYield = nullptr;
    1f8e:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <yield+0xcc>)
    1f90:	601a      	str	r2, [r3, #0]
    1f92:	e7ce      	b.n	1f32 <yield+0x5a>
    1f94:	20000fbf 	.word	0x20000fbf
    1f98:	20000faa 	.word	0x20000faa
    1f9c:	20000cf0 	.word	0x20000cf0
    1fa0:	20000fa8 	.word	0x20000fa8
    1fa4:	20000cfc 	.word	0x20000cfc
    1fa8:	20000fa9 	.word	0x20000fa9
    1fac:	20000d00 	.word	0x20000d00

00001fb0 <EventResponder::runFromInterrupt()>:
{
    1fb0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1fb2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1fb6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1fb8:	4c0c      	ldr	r4, [pc, #48]	; (1fec <EventResponder::runFromInterrupt()+0x3c>)
    1fba:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1fbc:	b180      	cbz	r0, 1fe0 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    1fbe:	4e0c      	ldr	r6, [pc, #48]	; (1ff0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1fc0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1fc2:	6943      	ldr	r3, [r0, #20]
    1fc4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1fc6:	b173      	cbz	r3, 1fe6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1fc8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    1fca:	b902      	cbnz	r2, 1fce <EventResponder::runFromInterrupt()+0x1e>
    1fcc:	b662      	cpsie	i
			(*(first->_function))(*first);
    1fce:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1fd0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1fd2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1fd4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1fd8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1fda:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1fdc:	2800      	cmp	r0, #0
    1fde:	d1f0      	bne.n	1fc2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1fe0:	b902      	cbnz	r2, 1fe4 <EventResponder::runFromInterrupt()+0x34>
    1fe2:	b662      	cpsie	i
}
    1fe4:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1fe6:	6033      	str	r3, [r6, #0]
    1fe8:	e7ef      	b.n	1fca <EventResponder::runFromInterrupt()+0x1a>
    1fea:	bf00      	nop
    1fec:	20000cf8 	.word	0x20000cf8
    1ff0:	20000cf4 	.word	0x20000cf4

00001ff4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1ff4:	f7ff bfdc 	b.w	1fb0 <EventResponder::runFromInterrupt()>

00001ff8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1ff8:	4904      	ldr	r1, [pc, #16]	; (200c <systick_isr+0x14>)
	systick_millis_count++;
    1ffa:	4a05      	ldr	r2, [pc, #20]	; (2010 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1ffc:	6849      	ldr	r1, [r1, #4]
    1ffe:	4b05      	ldr	r3, [pc, #20]	; (2014 <systick_isr+0x1c>)
    2000:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2002:	6813      	ldr	r3, [r2, #0]
    2004:	3301      	adds	r3, #1
    2006:	6013      	str	r3, [r2, #0]
}
    2008:	4770      	bx	lr
    200a:	bf00      	nop
    200c:	e0001000 	.word	0xe0001000
    2010:	20000f80 	.word	0x20000f80
    2014:	20000f7c 	.word	0x20000f7c

00002018 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2018:	49a2      	ldr	r1, [pc, #648]	; (22a4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    201a:	4ba3      	ldr	r3, [pc, #652]	; (22a8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    201c:	4288      	cmp	r0, r1
{
    201e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    2022:	4ca2      	ldr	r4, [pc, #648]	; (22ac <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2024:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2026:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2028:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    202c:	d91b      	bls.n	2066 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    202e:	4ba0      	ldr	r3, [pc, #640]	; (22b0 <set_arm_clock+0x298>)
    2030:	4298      	cmp	r0, r3
    2032:	f240 8102 	bls.w	223a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2036:	1ac3      	subs	r3, r0, r3
    2038:	499e      	ldr	r1, [pc, #632]	; (22b4 <set_arm_clock+0x29c>)
    203a:	0a1b      	lsrs	r3, r3, #8
    203c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2040:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2044:	09db      	lsrs	r3, r3, #7
    2046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    204a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    204e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2052:	428b      	cmp	r3, r1
    2054:	bf28      	it	cs
    2056:	460b      	movcs	r3, r1
    2058:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    205c:	4b96      	ldr	r3, [pc, #600]	; (22b8 <set_arm_clock+0x2a0>)
    205e:	fba3 3707 	umull	r3, r7, r3, r7
    2062:	08ff      	lsrs	r7, r7, #3
    2064:	e004      	b.n	2070 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    2066:	4f95      	ldr	r7, [pc, #596]	; (22bc <set_arm_clock+0x2a4>)
    2068:	42b8      	cmp	r0, r7
    206a:	bf8c      	ite	hi
    206c:	270e      	movhi	r7, #14
    206e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2070:	498d      	ldr	r1, [pc, #564]	; (22a8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2072:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2076:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    207a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    207c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2080:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2084:	d20c      	bcs.n	20a0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2086:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    208a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    208e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    2092:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2096:	680b      	ldr	r3, [r1, #0]
    2098:	2b00      	cmp	r3, #0
    209a:	dafc      	bge.n	2096 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    209c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    20a0:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    20a4:	d124      	bne.n	20f0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    20a6:	4986      	ldr	r1, [pc, #536]	; (22c0 <set_arm_clock+0x2a8>)
    20a8:	690c      	ldr	r4, [r1, #16]
    20aa:	4986      	ldr	r1, [pc, #536]	; (22c4 <set_arm_clock+0x2ac>)
    20ac:	43a1      	bics	r1, r4
    20ae:	f000 80ea 	beq.w	2286 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    20b2:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    20b6:	4634      	mov	r4, r6
    20b8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    20bc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    20c0:	d004      	beq.n	20cc <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    20c2:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    20c6:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    20c8:	4b77      	ldr	r3, [pc, #476]	; (22a8 <set_arm_clock+0x290>)
    20ca:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    20cc:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    20d0:	d007      	beq.n	20e2 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    20d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    20d6:	4974      	ldr	r1, [pc, #464]	; (22a8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    20d8:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    20da:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    20dc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    20de:	071a      	lsls	r2, r3, #28
    20e0:	d4fc      	bmi.n	20dc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    20e2:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    20e6:	4a70      	ldr	r2, [pc, #448]	; (22a8 <set_arm_clock+0x290>)
    20e8:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    20ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    20ec:	069b      	lsls	r3, r3, #26
    20ee:	d4fc      	bmi.n	20ea <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    20f0:	4c75      	ldr	r4, [pc, #468]	; (22c8 <set_arm_clock+0x2b0>)
    20f2:	42a0      	cmp	r0, r4
    20f4:	f200 80ce 	bhi.w	2294 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    20f8:	f04f 0c01 	mov.w	ip, #1
    20fc:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    20fe:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2100:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    2104:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2108:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    210c:	42a2      	cmp	r2, r4
    210e:	d818      	bhi.n	2142 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2110:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    2114:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2118:	f040 808d 	bne.w	2236 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    211c:	f1bc 0f04 	cmp.w	ip, #4
    2120:	f200 8091 	bhi.w	2246 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    2124:	180a      	adds	r2, r1, r0
    2126:	42a2      	cmp	r2, r4
    2128:	f200 80a4 	bhi.w	2274 <set_arm_clock+0x25c>
    212c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2130:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    2132:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2136:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    213a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    213e:	42a2      	cmp	r2, r4
    2140:	d9e6      	bls.n	2110 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2142:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    2146:	028c      	lsls	r4, r1, #10
    2148:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    214c:	485f      	ldr	r0, [pc, #380]	; (22cc <set_arm_clock+0x2b4>)
    214e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2150:	4a5f      	ldr	r2, [pc, #380]	; (22d0 <set_arm_clock+0x2b8>)
    2152:	4290      	cmp	r0, r2
    2154:	d97f      	bls.n	2256 <set_arm_clock+0x23e>
    2156:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 22fc <set_arm_clock+0x2e4>
    215a:	226c      	movs	r2, #108	; 0x6c
    215c:	485d      	ldr	r0, [pc, #372]	; (22d4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    215e:	4d58      	ldr	r5, [pc, #352]	; (22c0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2160:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2164:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2168:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    216c:	f8df c190 	ldr.w	ip, [pc, #400]	; 2300 <set_arm_clock+0x2e8>
    2170:	ea0e 0c0c 	and.w	ip, lr, ip
    2174:	45d4      	cmp	ip, sl
    2176:	d009      	beq.n	218c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    217c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2180:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2184:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2186:	682a      	ldr	r2, [r5, #0]
    2188:	2a00      	cmp	r2, #0
    218a:	dafc      	bge.n	2186 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    218c:	4a46      	ldr	r2, [pc, #280]	; (22a8 <set_arm_clock+0x290>)
    218e:	6915      	ldr	r5, [r2, #16]
    2190:	f005 0507 	and.w	r5, r5, #7
    2194:	429d      	cmp	r5, r3
    2196:	d003      	beq.n	21a0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2198:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    219a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    219c:	03dd      	lsls	r5, r3, #15
    219e:	d4fc      	bmi.n	219a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    21a0:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    21a4:	d009      	beq.n	21ba <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    21a6:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    21aa:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    21ae:	4a3e      	ldr	r2, [pc, #248]	; (22a8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    21b0:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    21b2:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    21b4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21b6:	0799      	lsls	r1, r3, #30
    21b8:	d4fc      	bmi.n	21b4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21ba:	4947      	ldr	r1, [pc, #284]	; (22d8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    21bc:	4a47      	ldr	r2, [pc, #284]	; (22dc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21be:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    21c0:	4291      	cmp	r1, r2
    21c2:	d83c      	bhi.n	223e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21c4:	4b46      	ldr	r3, [pc, #280]	; (22e0 <set_arm_clock+0x2c8>)
    21c6:	09c9      	lsrs	r1, r1, #7
    21c8:	fba3 3101 	umull	r3, r1, r3, r1
    21cc:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    21ce:	1e4b      	subs	r3, r1, #1
    21d0:	021b      	lsls	r3, r3, #8
    21d2:	ea86 0203 	eor.w	r2, r6, r3
    21d6:	f412 7f40 	tst.w	r2, #768	; 0x300
    21da:	d006      	beq.n	21ea <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    21dc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    21e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    21e4:	4a30      	ldr	r2, [pc, #192]	; (22a8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    21e6:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    21e8:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    21ea:	4a2f      	ldr	r2, [pc, #188]	; (22a8 <set_arm_clock+0x290>)
    21ec:	6953      	ldr	r3, [r2, #20]
    21ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    21f2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    21f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21f6:	069b      	lsls	r3, r3, #26
    21f8:	d4fc      	bmi.n	21f4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    21fa:	4b3a      	ldr	r3, [pc, #232]	; (22e4 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    21fc:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    21fe:	fba3 2300 	umull	r2, r3, r3, r0
    2202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2206:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    220a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    220e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    2212:	4a35      	ldr	r2, [pc, #212]	; (22e8 <set_arm_clock+0x2d0>)
    2214:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2216:	4a35      	ldr	r2, [pc, #212]	; (22ec <set_arm_clock+0x2d4>)
    2218:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    221a:	4a35      	ldr	r2, [pc, #212]	; (22f0 <set_arm_clock+0x2d8>)
    221c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    221e:	d208      	bcs.n	2232 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2220:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2224:	4a21      	ldr	r2, [pc, #132]	; (22ac <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2226:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    222a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    222c:	6813      	ldr	r3, [r2, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	dafc      	bge.n	222c <set_arm_clock+0x214>
	}

	return frequency;
}
    2232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2236:	4673      	mov	r3, lr
    2238:	e762      	b.n	2100 <set_arm_clock+0xe8>
    223a:	2712      	movs	r7, #18
    223c:	e718      	b.n	2070 <set_arm_clock+0x58>
    223e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    2242:	2104      	movs	r1, #4
    2244:	e7c5      	b.n	21d2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2246:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    224a:	4820      	ldr	r0, [pc, #128]	; (22cc <set_arm_clock+0x2b4>)
    224c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    224e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2250:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2252:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2256:	4a27      	ldr	r2, [pc, #156]	; (22f4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2258:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2304 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    225c:	fba2 2000 	umull	r2, r0, r2, r0
    2260:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    2262:	4825      	ldr	r0, [pc, #148]	; (22f8 <set_arm_clock+0x2e0>)
    2264:	2a36      	cmp	r2, #54	; 0x36
    2266:	bf38      	it	cc
    2268:	2236      	movcc	r2, #54	; 0x36
    226a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    226e:	ea42 0a0a 	orr.w	sl, r2, sl
    2272:	e774      	b.n	215e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2274:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2278:	2300      	movs	r3, #0
    227a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    227e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    2282:	46ac      	mov	ip, r5
    2284:	e762      	b.n	214c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2286:	461d      	mov	r5, r3
    2288:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    228c:	4611      	mov	r1, r2
    228e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    2292:	e713      	b.n	20bc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    2294:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    2296:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    229a:	4602      	mov	r2, r0
    229c:	4631      	mov	r1, r6
    229e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    22a0:	46e6      	mov	lr, ip
    22a2:	e753      	b.n	214c <set_arm_clock+0x134>
    22a4:	1f78a400 	.word	0x1f78a400
    22a8:	400fc000 	.word	0x400fc000
    22ac:	40080000 	.word	0x40080000
    22b0:	23c34600 	.word	0x23c34600
    22b4:	004cb223 	.word	0x004cb223
    22b8:	51eb851f 	.word	0x51eb851f
    22bc:	016e3600 	.word	0x016e3600
    22c0:	400d8000 	.word	0x400d8000
    22c4:	80003040 	.word	0x80003040
    22c8:	269fb1ff 	.word	0x269fb1ff
    22cc:	005b8d80 	.word	0x005b8d80
    22d0:	4df67eff 	.word	0x4df67eff
    22d4:	4d3f6400 	.word	0x4d3f6400
    22d8:	08f0d17f 	.word	0x08f0d17f
    22dc:	2cb4177f 	.word	0x2cb4177f
    22e0:	00e5109f 	.word	0x00e5109f
    22e4:	431bde83 	.word	0x431bde83
    22e8:	20000670 	.word	0x20000670
    22ec:	2000066c 	.word	0x2000066c
    22f0:	20000f78 	.word	0x20000f78
    22f4:	165e9f81 	.word	0x165e9f81
    22f8:	00b71b00 	.word	0x00b71b00
    22fc:	8000206c 	.word	0x8000206c
    2300:	8001307f 	.word	0x8001307f
    2304:	80002000 	.word	0x80002000

00002308 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2308:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    230a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    230e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2312:	d16d      	bne.n	23f0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2314:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2316:	d341      	bcc.n	239c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2318:	f851 3b04 	ldr.w	r3, [r1], #4
    231c:	f840 3b04 	str.w	r3, [r0], #4
    2320:	f851 3b04 	ldr.w	r3, [r1], #4
    2324:	f840 3b04 	str.w	r3, [r0], #4
    2328:	f851 3b04 	ldr.w	r3, [r1], #4
    232c:	f840 3b04 	str.w	r3, [r0], #4
    2330:	f851 3b04 	ldr.w	r3, [r1], #4
    2334:	f840 3b04 	str.w	r3, [r0], #4
    2338:	f851 3b04 	ldr.w	r3, [r1], #4
    233c:	f840 3b04 	str.w	r3, [r0], #4
    2340:	f851 3b04 	ldr.w	r3, [r1], #4
    2344:	f840 3b04 	str.w	r3, [r0], #4
    2348:	f851 3b04 	ldr.w	r3, [r1], #4
    234c:	f840 3b04 	str.w	r3, [r0], #4
    2350:	f851 3b04 	ldr.w	r3, [r1], #4
    2354:	f840 3b04 	str.w	r3, [r0], #4
    2358:	f851 3b04 	ldr.w	r3, [r1], #4
    235c:	f840 3b04 	str.w	r3, [r0], #4
    2360:	f851 3b04 	ldr.w	r3, [r1], #4
    2364:	f840 3b04 	str.w	r3, [r0], #4
    2368:	f851 3b04 	ldr.w	r3, [r1], #4
    236c:	f840 3b04 	str.w	r3, [r0], #4
    2370:	f851 3b04 	ldr.w	r3, [r1], #4
    2374:	f840 3b04 	str.w	r3, [r0], #4
    2378:	f851 3b04 	ldr.w	r3, [r1], #4
    237c:	f840 3b04 	str.w	r3, [r0], #4
    2380:	f851 3b04 	ldr.w	r3, [r1], #4
    2384:	f840 3b04 	str.w	r3, [r0], #4
    2388:	f851 3b04 	ldr.w	r3, [r1], #4
    238c:	f840 3b04 	str.w	r3, [r0], #4
    2390:	f851 3b04 	ldr.w	r3, [r1], #4
    2394:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2398:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    239a:	d2bd      	bcs.n	2318 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    239c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    239e:	d311      	bcc.n	23c4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    23a0:	f851 3b04 	ldr.w	r3, [r1], #4
    23a4:	f840 3b04 	str.w	r3, [r0], #4
    23a8:	f851 3b04 	ldr.w	r3, [r1], #4
    23ac:	f840 3b04 	str.w	r3, [r0], #4
    23b0:	f851 3b04 	ldr.w	r3, [r1], #4
    23b4:	f840 3b04 	str.w	r3, [r0], #4
    23b8:	f851 3b04 	ldr.w	r3, [r1], #4
    23bc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    23c0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    23c2:	d2ed      	bcs.n	23a0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    23c4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    23c6:	d305      	bcc.n	23d4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    23c8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    23cc:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    23d0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    23d2:	d2f9      	bcs.n	23c8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    23d4:	3204      	adds	r2, #4
	beq	.Ldone
    23d6:	d008      	beq.n	23ea <memcpy+0xe2>

	lsls	r2, r2, #31
    23d8:	07d2      	lsls	r2, r2, #31
	itt ne
    23da:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    23dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    23e0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    23e4:	d301      	bcc.n	23ea <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    23e6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    23e8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    23ea:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    23f0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    23f2:	d313      	bcc.n	241c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    23f4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    23f6:	d08d      	beq.n	2314 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    23f8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    23fc:	d08a      	beq.n	2314 <memcpy+0xc>

	rsb	r3, #4
    23fe:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2402:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2404:	07db      	lsls	r3, r3, #31
	itt ne
    2406:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2408:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    240c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2410:	d380      	bcc.n	2314 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2412:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2416:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    241a:	e77b      	b.n	2314 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    241c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    241e:	d3d9      	bcc.n	23d4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2420:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2422:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2426:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    242a:	d2f9      	bcs.n	2420 <memcpy+0x118>

	ldrb	r3, [r1]
    242c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    242e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2430:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2432:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2434:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2436:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2438:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    243a:	4770      	bx	lr

0000243c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    243c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    2440:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    2442:	4666      	mov	r6, ip
	int i=0, j;
    2444:	2400      	movs	r4, #0
    2446:	e000      	b.n	244a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2448:	3401      	adds	r4, #1
		digit = val % radix;
    244a:	fbb0 f5f2 	udiv	r5, r0, r2
    244e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2452:	2b09      	cmp	r3, #9
    2454:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2458:	f103 0330 	add.w	r3, r3, #48	; 0x30
    245c:	fa5f fe8e 	uxtb.w	lr, lr
    2460:	bf98      	it	ls
    2462:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    2466:	4290      	cmp	r0, r2
		val /= radix;
    2468:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    246a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    246e:	d2eb      	bcs.n	2448 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2470:	1c63      	adds	r3, r4, #1
    2472:	2200      	movs	r2, #0
    2474:	18c8      	adds	r0, r1, r3
    2476:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2478:	b17c      	cbz	r4, 249a <ultoa+0x5e>
		t = buf[j];
    247a:	4662      	mov	r2, ip
    247c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2480:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    2484:	eba1 030c 	sub.w	r3, r1, ip
    2488:	3202      	adds	r2, #2
		buf[j] = buf[i];
    248a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    248e:	3b01      	subs	r3, #1
    2490:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    2492:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    2494:	4423      	add	r3, r4
    2496:	429a      	cmp	r2, r3
    2498:	dbef      	blt.n	247a <ultoa+0x3e>
	}
	return buf;
}
    249a:	4608      	mov	r0, r1
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	bf00      	nop

000024a0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    24a0:	4a07      	ldr	r2, [pc, #28]	; (24c0 <rtc_get+0x20>)
    24a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    24a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    24a6:	4619      	mov	r1, r3
    24a8:	4684      	mov	ip, r0
    24aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    24ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    24ae:	4299      	cmp	r1, r3
    24b0:	d1f9      	bne.n	24a6 <rtc_get+0x6>
    24b2:	4584      	cmp	ip, r0
    24b4:	d1f7      	bne.n	24a6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    24b6:	0bdb      	lsrs	r3, r3, #15
}
    24b8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	400d4000 	.word	0x400d4000

000024c4 <__aeabi_atexit>:
    24c4:	4603      	mov	r3, r0
    24c6:	4608      	mov	r0, r1
    24c8:	4619      	mov	r1, r3
    24ca:	f000 b9d1 	b.w	2870 <__cxa_atexit>
    24ce:	bf00      	nop

000024d0 <__aeabi_uldivmod>:
    24d0:	b953      	cbnz	r3, 24e8 <__aeabi_uldivmod+0x18>
    24d2:	b94a      	cbnz	r2, 24e8 <__aeabi_uldivmod+0x18>
    24d4:	2900      	cmp	r1, #0
    24d6:	bf08      	it	eq
    24d8:	2800      	cmpeq	r0, #0
    24da:	bf1c      	itt	ne
    24dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    24e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    24e4:	f000 b970 	b.w	27c8 <__aeabi_idiv0>
    24e8:	f1ad 0c08 	sub.w	ip, sp, #8
    24ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    24f0:	f000 f806 	bl	2500 <__udivmoddi4>
    24f4:	f8dd e004 	ldr.w	lr, [sp, #4]
    24f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    24fc:	b004      	add	sp, #16
    24fe:	4770      	bx	lr

00002500 <__udivmoddi4>:
    2500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2504:	9e08      	ldr	r6, [sp, #32]
    2506:	460d      	mov	r5, r1
    2508:	4604      	mov	r4, r0
    250a:	460f      	mov	r7, r1
    250c:	2b00      	cmp	r3, #0
    250e:	d14a      	bne.n	25a6 <__udivmoddi4+0xa6>
    2510:	428a      	cmp	r2, r1
    2512:	4694      	mov	ip, r2
    2514:	d965      	bls.n	25e2 <__udivmoddi4+0xe2>
    2516:	fab2 f382 	clz	r3, r2
    251a:	b143      	cbz	r3, 252e <__udivmoddi4+0x2e>
    251c:	fa02 fc03 	lsl.w	ip, r2, r3
    2520:	f1c3 0220 	rsb	r2, r3, #32
    2524:	409f      	lsls	r7, r3
    2526:	fa20 f202 	lsr.w	r2, r0, r2
    252a:	4317      	orrs	r7, r2
    252c:	409c      	lsls	r4, r3
    252e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    2532:	fa1f f58c 	uxth.w	r5, ip
    2536:	fbb7 f1fe 	udiv	r1, r7, lr
    253a:	0c22      	lsrs	r2, r4, #16
    253c:	fb0e 7711 	mls	r7, lr, r1, r7
    2540:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    2544:	fb01 f005 	mul.w	r0, r1, r5
    2548:	4290      	cmp	r0, r2
    254a:	d90a      	bls.n	2562 <__udivmoddi4+0x62>
    254c:	eb1c 0202 	adds.w	r2, ip, r2
    2550:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    2554:	f080 811c 	bcs.w	2790 <__udivmoddi4+0x290>
    2558:	4290      	cmp	r0, r2
    255a:	f240 8119 	bls.w	2790 <__udivmoddi4+0x290>
    255e:	3902      	subs	r1, #2
    2560:	4462      	add	r2, ip
    2562:	1a12      	subs	r2, r2, r0
    2564:	b2a4      	uxth	r4, r4
    2566:	fbb2 f0fe 	udiv	r0, r2, lr
    256a:	fb0e 2210 	mls	r2, lr, r0, r2
    256e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    2572:	fb00 f505 	mul.w	r5, r0, r5
    2576:	42a5      	cmp	r5, r4
    2578:	d90a      	bls.n	2590 <__udivmoddi4+0x90>
    257a:	eb1c 0404 	adds.w	r4, ip, r4
    257e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    2582:	f080 8107 	bcs.w	2794 <__udivmoddi4+0x294>
    2586:	42a5      	cmp	r5, r4
    2588:	f240 8104 	bls.w	2794 <__udivmoddi4+0x294>
    258c:	4464      	add	r4, ip
    258e:	3802      	subs	r0, #2
    2590:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    2594:	1b64      	subs	r4, r4, r5
    2596:	2100      	movs	r1, #0
    2598:	b11e      	cbz	r6, 25a2 <__udivmoddi4+0xa2>
    259a:	40dc      	lsrs	r4, r3
    259c:	2300      	movs	r3, #0
    259e:	e9c6 4300 	strd	r4, r3, [r6]
    25a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25a6:	428b      	cmp	r3, r1
    25a8:	d908      	bls.n	25bc <__udivmoddi4+0xbc>
    25aa:	2e00      	cmp	r6, #0
    25ac:	f000 80ed 	beq.w	278a <__udivmoddi4+0x28a>
    25b0:	2100      	movs	r1, #0
    25b2:	e9c6 0500 	strd	r0, r5, [r6]
    25b6:	4608      	mov	r0, r1
    25b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25bc:	fab3 f183 	clz	r1, r3
    25c0:	2900      	cmp	r1, #0
    25c2:	d149      	bne.n	2658 <__udivmoddi4+0x158>
    25c4:	42ab      	cmp	r3, r5
    25c6:	d302      	bcc.n	25ce <__udivmoddi4+0xce>
    25c8:	4282      	cmp	r2, r0
    25ca:	f200 80f8 	bhi.w	27be <__udivmoddi4+0x2be>
    25ce:	1a84      	subs	r4, r0, r2
    25d0:	eb65 0203 	sbc.w	r2, r5, r3
    25d4:	2001      	movs	r0, #1
    25d6:	4617      	mov	r7, r2
    25d8:	2e00      	cmp	r6, #0
    25da:	d0e2      	beq.n	25a2 <__udivmoddi4+0xa2>
    25dc:	e9c6 4700 	strd	r4, r7, [r6]
    25e0:	e7df      	b.n	25a2 <__udivmoddi4+0xa2>
    25e2:	b902      	cbnz	r2, 25e6 <__udivmoddi4+0xe6>
    25e4:	deff      	udf	#255	; 0xff
    25e6:	fab2 f382 	clz	r3, r2
    25ea:	2b00      	cmp	r3, #0
    25ec:	f040 8090 	bne.w	2710 <__udivmoddi4+0x210>
    25f0:	1a8a      	subs	r2, r1, r2
    25f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    25f6:	fa1f fe8c 	uxth.w	lr, ip
    25fa:	2101      	movs	r1, #1
    25fc:	fbb2 f5f7 	udiv	r5, r2, r7
    2600:	fb07 2015 	mls	r0, r7, r5, r2
    2604:	0c22      	lsrs	r2, r4, #16
    2606:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    260a:	fb0e f005 	mul.w	r0, lr, r5
    260e:	4290      	cmp	r0, r2
    2610:	d908      	bls.n	2624 <__udivmoddi4+0x124>
    2612:	eb1c 0202 	adds.w	r2, ip, r2
    2616:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    261a:	d202      	bcs.n	2622 <__udivmoddi4+0x122>
    261c:	4290      	cmp	r0, r2
    261e:	f200 80cb 	bhi.w	27b8 <__udivmoddi4+0x2b8>
    2622:	4645      	mov	r5, r8
    2624:	1a12      	subs	r2, r2, r0
    2626:	b2a4      	uxth	r4, r4
    2628:	fbb2 f0f7 	udiv	r0, r2, r7
    262c:	fb07 2210 	mls	r2, r7, r0, r2
    2630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    2634:	fb0e fe00 	mul.w	lr, lr, r0
    2638:	45a6      	cmp	lr, r4
    263a:	d908      	bls.n	264e <__udivmoddi4+0x14e>
    263c:	eb1c 0404 	adds.w	r4, ip, r4
    2640:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    2644:	d202      	bcs.n	264c <__udivmoddi4+0x14c>
    2646:	45a6      	cmp	lr, r4
    2648:	f200 80bb 	bhi.w	27c2 <__udivmoddi4+0x2c2>
    264c:	4610      	mov	r0, r2
    264e:	eba4 040e 	sub.w	r4, r4, lr
    2652:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    2656:	e79f      	b.n	2598 <__udivmoddi4+0x98>
    2658:	f1c1 0720 	rsb	r7, r1, #32
    265c:	408b      	lsls	r3, r1
    265e:	fa22 fc07 	lsr.w	ip, r2, r7
    2662:	ea4c 0c03 	orr.w	ip, ip, r3
    2666:	fa05 f401 	lsl.w	r4, r5, r1
    266a:	fa20 f307 	lsr.w	r3, r0, r7
    266e:	40fd      	lsrs	r5, r7
    2670:	ea4f 491c 	mov.w	r9, ip, lsr #16
    2674:	4323      	orrs	r3, r4
    2676:	fbb5 f8f9 	udiv	r8, r5, r9
    267a:	fa1f fe8c 	uxth.w	lr, ip
    267e:	fb09 5518 	mls	r5, r9, r8, r5
    2682:	0c1c      	lsrs	r4, r3, #16
    2684:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    2688:	fb08 f50e 	mul.w	r5, r8, lr
    268c:	42a5      	cmp	r5, r4
    268e:	fa02 f201 	lsl.w	r2, r2, r1
    2692:	fa00 f001 	lsl.w	r0, r0, r1
    2696:	d90b      	bls.n	26b0 <__udivmoddi4+0x1b0>
    2698:	eb1c 0404 	adds.w	r4, ip, r4
    269c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    26a0:	f080 8088 	bcs.w	27b4 <__udivmoddi4+0x2b4>
    26a4:	42a5      	cmp	r5, r4
    26a6:	f240 8085 	bls.w	27b4 <__udivmoddi4+0x2b4>
    26aa:	f1a8 0802 	sub.w	r8, r8, #2
    26ae:	4464      	add	r4, ip
    26b0:	1b64      	subs	r4, r4, r5
    26b2:	b29d      	uxth	r5, r3
    26b4:	fbb4 f3f9 	udiv	r3, r4, r9
    26b8:	fb09 4413 	mls	r4, r9, r3, r4
    26bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    26c0:	fb03 fe0e 	mul.w	lr, r3, lr
    26c4:	45a6      	cmp	lr, r4
    26c6:	d908      	bls.n	26da <__udivmoddi4+0x1da>
    26c8:	eb1c 0404 	adds.w	r4, ip, r4
    26cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    26d0:	d26c      	bcs.n	27ac <__udivmoddi4+0x2ac>
    26d2:	45a6      	cmp	lr, r4
    26d4:	d96a      	bls.n	27ac <__udivmoddi4+0x2ac>
    26d6:	3b02      	subs	r3, #2
    26d8:	4464      	add	r4, ip
    26da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    26de:	fba3 9502 	umull	r9, r5, r3, r2
    26e2:	eba4 040e 	sub.w	r4, r4, lr
    26e6:	42ac      	cmp	r4, r5
    26e8:	46c8      	mov	r8, r9
    26ea:	46ae      	mov	lr, r5
    26ec:	d356      	bcc.n	279c <__udivmoddi4+0x29c>
    26ee:	d053      	beq.n	2798 <__udivmoddi4+0x298>
    26f0:	b156      	cbz	r6, 2708 <__udivmoddi4+0x208>
    26f2:	ebb0 0208 	subs.w	r2, r0, r8
    26f6:	eb64 040e 	sbc.w	r4, r4, lr
    26fa:	fa04 f707 	lsl.w	r7, r4, r7
    26fe:	40ca      	lsrs	r2, r1
    2700:	40cc      	lsrs	r4, r1
    2702:	4317      	orrs	r7, r2
    2704:	e9c6 7400 	strd	r7, r4, [r6]
    2708:	4618      	mov	r0, r3
    270a:	2100      	movs	r1, #0
    270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2710:	f1c3 0120 	rsb	r1, r3, #32
    2714:	fa02 fc03 	lsl.w	ip, r2, r3
    2718:	fa20 f201 	lsr.w	r2, r0, r1
    271c:	fa25 f101 	lsr.w	r1, r5, r1
    2720:	409d      	lsls	r5, r3
    2722:	432a      	orrs	r2, r5
    2724:	ea4f 471c 	mov.w	r7, ip, lsr #16
    2728:	fa1f fe8c 	uxth.w	lr, ip
    272c:	fbb1 f0f7 	udiv	r0, r1, r7
    2730:	fb07 1510 	mls	r5, r7, r0, r1
    2734:	0c11      	lsrs	r1, r2, #16
    2736:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    273a:	fb00 f50e 	mul.w	r5, r0, lr
    273e:	428d      	cmp	r5, r1
    2740:	fa04 f403 	lsl.w	r4, r4, r3
    2744:	d908      	bls.n	2758 <__udivmoddi4+0x258>
    2746:	eb1c 0101 	adds.w	r1, ip, r1
    274a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    274e:	d22f      	bcs.n	27b0 <__udivmoddi4+0x2b0>
    2750:	428d      	cmp	r5, r1
    2752:	d92d      	bls.n	27b0 <__udivmoddi4+0x2b0>
    2754:	3802      	subs	r0, #2
    2756:	4461      	add	r1, ip
    2758:	1b49      	subs	r1, r1, r5
    275a:	b292      	uxth	r2, r2
    275c:	fbb1 f5f7 	udiv	r5, r1, r7
    2760:	fb07 1115 	mls	r1, r7, r5, r1
    2764:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    2768:	fb05 f10e 	mul.w	r1, r5, lr
    276c:	4291      	cmp	r1, r2
    276e:	d908      	bls.n	2782 <__udivmoddi4+0x282>
    2770:	eb1c 0202 	adds.w	r2, ip, r2
    2774:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    2778:	d216      	bcs.n	27a8 <__udivmoddi4+0x2a8>
    277a:	4291      	cmp	r1, r2
    277c:	d914      	bls.n	27a8 <__udivmoddi4+0x2a8>
    277e:	3d02      	subs	r5, #2
    2780:	4462      	add	r2, ip
    2782:	1a52      	subs	r2, r2, r1
    2784:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    2788:	e738      	b.n	25fc <__udivmoddi4+0xfc>
    278a:	4631      	mov	r1, r6
    278c:	4630      	mov	r0, r6
    278e:	e708      	b.n	25a2 <__udivmoddi4+0xa2>
    2790:	4639      	mov	r1, r7
    2792:	e6e6      	b.n	2562 <__udivmoddi4+0x62>
    2794:	4610      	mov	r0, r2
    2796:	e6fb      	b.n	2590 <__udivmoddi4+0x90>
    2798:	4548      	cmp	r0, r9
    279a:	d2a9      	bcs.n	26f0 <__udivmoddi4+0x1f0>
    279c:	ebb9 0802 	subs.w	r8, r9, r2
    27a0:	eb65 0e0c 	sbc.w	lr, r5, ip
    27a4:	3b01      	subs	r3, #1
    27a6:	e7a3      	b.n	26f0 <__udivmoddi4+0x1f0>
    27a8:	4645      	mov	r5, r8
    27aa:	e7ea      	b.n	2782 <__udivmoddi4+0x282>
    27ac:	462b      	mov	r3, r5
    27ae:	e794      	b.n	26da <__udivmoddi4+0x1da>
    27b0:	4640      	mov	r0, r8
    27b2:	e7d1      	b.n	2758 <__udivmoddi4+0x258>
    27b4:	46d0      	mov	r8, sl
    27b6:	e77b      	b.n	26b0 <__udivmoddi4+0x1b0>
    27b8:	3d02      	subs	r5, #2
    27ba:	4462      	add	r2, ip
    27bc:	e732      	b.n	2624 <__udivmoddi4+0x124>
    27be:	4608      	mov	r0, r1
    27c0:	e70a      	b.n	25d8 <__udivmoddi4+0xd8>
    27c2:	4464      	add	r4, ip
    27c4:	3802      	subs	r0, #2
    27c6:	e742      	b.n	264e <__udivmoddi4+0x14e>

000027c8 <__aeabi_idiv0>:
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop

000027cc <memset>:
    27cc:	0783      	lsls	r3, r0, #30
    27ce:	b530      	push	{r4, r5, lr}
    27d0:	d048      	beq.n	2864 <memset+0x98>
    27d2:	1e54      	subs	r4, r2, #1
    27d4:	2a00      	cmp	r2, #0
    27d6:	d03f      	beq.n	2858 <memset+0x8c>
    27d8:	b2ca      	uxtb	r2, r1
    27da:	4603      	mov	r3, r0
    27dc:	e001      	b.n	27e2 <memset+0x16>
    27de:	3c01      	subs	r4, #1
    27e0:	d33a      	bcc.n	2858 <memset+0x8c>
    27e2:	f803 2b01 	strb.w	r2, [r3], #1
    27e6:	079d      	lsls	r5, r3, #30
    27e8:	d1f9      	bne.n	27de <memset+0x12>
    27ea:	2c03      	cmp	r4, #3
    27ec:	d92d      	bls.n	284a <memset+0x7e>
    27ee:	b2cd      	uxtb	r5, r1
    27f0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    27f4:	2c0f      	cmp	r4, #15
    27f6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    27fa:	d936      	bls.n	286a <memset+0x9e>
    27fc:	f1a4 0210 	sub.w	r2, r4, #16
    2800:	f022 0c0f 	bic.w	ip, r2, #15
    2804:	f103 0e20 	add.w	lr, r3, #32
    2808:	44e6      	add	lr, ip
    280a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    280e:	f103 0210 	add.w	r2, r3, #16
    2812:	e942 5504 	strd	r5, r5, [r2, #-16]
    2816:	e942 5502 	strd	r5, r5, [r2, #-8]
    281a:	3210      	adds	r2, #16
    281c:	4572      	cmp	r2, lr
    281e:	d1f8      	bne.n	2812 <memset+0x46>
    2820:	f10c 0201 	add.w	r2, ip, #1
    2824:	f014 0f0c 	tst.w	r4, #12
    2828:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    282c:	f004 0c0f 	and.w	ip, r4, #15
    2830:	d013      	beq.n	285a <memset+0x8e>
    2832:	f1ac 0304 	sub.w	r3, ip, #4
    2836:	f023 0303 	bic.w	r3, r3, #3
    283a:	3304      	adds	r3, #4
    283c:	4413      	add	r3, r2
    283e:	f842 5b04 	str.w	r5, [r2], #4
    2842:	4293      	cmp	r3, r2
    2844:	d1fb      	bne.n	283e <memset+0x72>
    2846:	f00c 0403 	and.w	r4, ip, #3
    284a:	b12c      	cbz	r4, 2858 <memset+0x8c>
    284c:	b2c9      	uxtb	r1, r1
    284e:	441c      	add	r4, r3
    2850:	f803 1b01 	strb.w	r1, [r3], #1
    2854:	429c      	cmp	r4, r3
    2856:	d1fb      	bne.n	2850 <memset+0x84>
    2858:	bd30      	pop	{r4, r5, pc}
    285a:	4664      	mov	r4, ip
    285c:	4613      	mov	r3, r2
    285e:	2c00      	cmp	r4, #0
    2860:	d1f4      	bne.n	284c <memset+0x80>
    2862:	e7f9      	b.n	2858 <memset+0x8c>
    2864:	4603      	mov	r3, r0
    2866:	4614      	mov	r4, r2
    2868:	e7bf      	b.n	27ea <memset+0x1e>
    286a:	461a      	mov	r2, r3
    286c:	46a4      	mov	ip, r4
    286e:	e7e0      	b.n	2832 <memset+0x66>

00002870 <__cxa_atexit>:
    2870:	4613      	mov	r3, r2
    2872:	460a      	mov	r2, r1
    2874:	4601      	mov	r1, r0
    2876:	2002      	movs	r0, #2
    2878:	f000 b828 	b.w	28cc <__register_exitproc>

0000287c <__libc_init_array>:
    287c:	b570      	push	{r4, r5, r6, lr}
    287e:	4e0d      	ldr	r6, [pc, #52]	; (28b4 <__libc_init_array+0x38>)
    2880:	4d0d      	ldr	r5, [pc, #52]	; (28b8 <__libc_init_array+0x3c>)
    2882:	1b76      	subs	r6, r6, r5
    2884:	10b6      	asrs	r6, r6, #2
    2886:	d006      	beq.n	2896 <__libc_init_array+0x1a>
    2888:	2400      	movs	r4, #0
    288a:	f855 3b04 	ldr.w	r3, [r5], #4
    288e:	3401      	adds	r4, #1
    2890:	4798      	blx	r3
    2892:	42a6      	cmp	r6, r4
    2894:	d1f9      	bne.n	288a <__libc_init_array+0xe>
    2896:	4e09      	ldr	r6, [pc, #36]	; (28bc <__libc_init_array+0x40>)
    2898:	4d09      	ldr	r5, [pc, #36]	; (28c0 <__libc_init_array+0x44>)
    289a:	1b76      	subs	r6, r6, r5
    289c:	f000 f860 	bl	2960 <___init_veneer>
    28a0:	10b6      	asrs	r6, r6, #2
    28a2:	d006      	beq.n	28b2 <__libc_init_array+0x36>
    28a4:	2400      	movs	r4, #0
    28a6:	f855 3b04 	ldr.w	r3, [r5], #4
    28aa:	3401      	adds	r4, #1
    28ac:	4798      	blx	r3
    28ae:	42a6      	cmp	r6, r4
    28b0:	d1f9      	bne.n	28a6 <__libc_init_array+0x2a>
    28b2:	bd70      	pop	{r4, r5, r6, pc}
    28b4:	60001af0 	.word	0x60001af0
    28b8:	60001af0 	.word	0x60001af0
    28bc:	60001afc 	.word	0x60001afc
    28c0:	60001af0 	.word	0x60001af0

000028c4 <__retarget_lock_acquire_recursive>:
    28c4:	4770      	bx	lr
    28c6:	bf00      	nop

000028c8 <__retarget_lock_release_recursive>:
    28c8:	4770      	bx	lr
    28ca:	bf00      	nop

000028cc <__register_exitproc>:
    28cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2950 <__register_exitproc+0x84>
    28d4:	4606      	mov	r6, r0
    28d6:	f8da 0000 	ldr.w	r0, [sl]
    28da:	4698      	mov	r8, r3
    28dc:	460f      	mov	r7, r1
    28de:	4691      	mov	r9, r2
    28e0:	f7ff fff0 	bl	28c4 <__retarget_lock_acquire_recursive>
    28e4:	4b18      	ldr	r3, [pc, #96]	; (2948 <__register_exitproc+0x7c>)
    28e6:	681c      	ldr	r4, [r3, #0]
    28e8:	b324      	cbz	r4, 2934 <__register_exitproc+0x68>
    28ea:	6865      	ldr	r5, [r4, #4]
    28ec:	2d1f      	cmp	r5, #31
    28ee:	dc24      	bgt.n	293a <__register_exitproc+0x6e>
    28f0:	b95e      	cbnz	r6, 290a <__register_exitproc+0x3e>
    28f2:	1c6b      	adds	r3, r5, #1
    28f4:	3502      	adds	r5, #2
    28f6:	f8da 0000 	ldr.w	r0, [sl]
    28fa:	6063      	str	r3, [r4, #4]
    28fc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    2900:	f7ff ffe2 	bl	28c8 <__retarget_lock_release_recursive>
    2904:	2000      	movs	r0, #0
    2906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    290a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    290e:	2301      	movs	r3, #1
    2910:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    2914:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    2918:	40ab      	lsls	r3, r5
    291a:	431a      	orrs	r2, r3
    291c:	2e02      	cmp	r6, #2
    291e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    2922:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    2926:	d1e4      	bne.n	28f2 <__register_exitproc+0x26>
    2928:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    292c:	431a      	orrs	r2, r3
    292e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    2932:	e7de      	b.n	28f2 <__register_exitproc+0x26>
    2934:	4c05      	ldr	r4, [pc, #20]	; (294c <__register_exitproc+0x80>)
    2936:	601c      	str	r4, [r3, #0]
    2938:	e7d7      	b.n	28ea <__register_exitproc+0x1e>
    293a:	f8da 0000 	ldr.w	r0, [sl]
    293e:	f7ff ffc3 	bl	28c8 <__retarget_lock_release_recursive>
    2942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2946:	e7de      	b.n	2906 <__register_exitproc+0x3a>
    2948:	20000d1c 	.word	0x20000d1c
    294c:	20000d20 	.word	0x20000d20
    2950:	20000688 	.word	0x20000688
    2954:	00000000 	.word	0x00000000

00002958 <___reboot_Teensyduino__veneer>:
    2958:	f85f f000 	ldr.w	pc, [pc]	; 295c <___reboot_Teensyduino__veneer+0x4>
    295c:	60001a05 	.word	0x60001a05

00002960 <___init_veneer>:
    2960:	f85f f000 	ldr.w	pc, [pc]	; 2964 <___init_veneer+0x4>
    2964:	60001aad 	.word	0x60001aad
	...

Disassembly of section .fini:

00002970 <_fini>:
    2970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2972:	bf00      	nop
