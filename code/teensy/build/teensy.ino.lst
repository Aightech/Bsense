
/home/adev/dev/bsense/code/teensy/build/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ac0 	.word	0x20000ac0
6000142c:	20000d80 	.word	0x20000d80

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fac1 	bl	60001ae8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa92 	bl	60001ad8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa77 	bl	60001ac8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa71 	bl	60001ac0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	000018d0 	.word	0x000018d0
600015ec:	60001bfc 	.word	0x60001bfc
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ac0 	.word	0x20000ac0
600015f8:	600034d0 	.word	0x600034d0
600015fc:	20000000 	.word	0x20000000
60001600:	20000800 	.word	0x20000800
60001604:	00000281 	.word	0x00000281
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00001195 	.word	0x00001195
60001618:	20000d28 	.word	0x20000d28
6000161c:	00001199 	.word	0x00001199
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20000d2c 	.word	0x20000d2c
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20000d80 	.word	0x20000d80
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20000d18 	.word	0x20000d18
60001900:	20000d14 	.word	0x20000d14
60001904:	20000d1c 	.word	0x20000d1c
60001908:	20000d20 	.word	0x20000d20
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000800 	.word	0x20000800
60001918:	0000040d 	.word	0x0000040d

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8c4 	bl	60001ab8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f8a9 	bl	60001ae0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f891 	bl	60001ad0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000800 	.word	0x20000800
60001a00:	000005f5 	.word	0x000005f5

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	20000d51 	.word	0x20000d51

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__usb_init_serialnumber_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__usb_init_serialnumber_veneer+0x4>
60001abc:	00000d61 	.word	0x00000d61

60001ac0 <__main_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__main_veneer+0x4>
60001ac4:	00000271 	.word	0x00000271

60001ac8 <____libc_init_array_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <____libc_init_array_veneer+0x4>
60001acc:	00001879 	.word	0x00001879

60001ad0 <__memset_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__memset_veneer+0x4>
60001ad4:	000017d5 	.word	0x000017d5

60001ad8 <__pwm_init_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__pwm_init_veneer+0x4>
60001adc:	000016bd 	.word	0x000016bd

60001ae0 <__delay_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__delay_veneer+0x4>
60001ae4:	00000105 	.word	0x00000105

60001ae8 <__set_arm_clock_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__set_arm_clock_veneer+0x4>
60001aec:	000011b9 	.word	0x000011b9

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045                                E...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
                        errno = ENOMEM;
      24:	1a1b      	subs	r3, r3, r0
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ac0 	.word	0x20000ac0
      3c:	20000ac0 	.word	0x20000ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20000cc4 	.word	0x20000cc4
      64:	60004c00 	.word	0x60004c00

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
      6c:	4d17      	ldr	r5, [pc, #92]	; (cc <setup+0x64>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
      6e:	f240 28ee 	movw	r8, #750	; 0x2ee
      72:	4c17      	ldr	r4, [pc, #92]	; (d0 <setup+0x68>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      74:	4f17      	ldr	r7, [pc, #92]	; (d4 <setup+0x6c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      76:	f8df 9060 	ldr.w	r9, [pc, #96]	; d8 <setup+0x70>
		uint32_t millis_begin = systick_millis_count;
      7a:	682e      	ldr	r6, [r5, #0]
		yield();
      7c:	f000 fffc 	bl	1078 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      80:	7823      	ldrb	r3, [r4, #0]
      82:	b1b3      	cbz	r3, b2 <setup+0x4a>
      84:	783b      	ldrb	r3, [r7, #0]
      86:	07db      	lsls	r3, r3, #31
      88:	d513      	bpl.n	b2 <setup+0x4a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
      8a:	682b      	ldr	r3, [r5, #0]
      8c:	f8d9 2000 	ldr.w	r2, [r9]
      90:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
      92:	2b0e      	cmp	r3, #14
      94:	d90d      	bls.n	b2 <setup+0x4a>
void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  
  // Set pin modes
  pinMode(PWM_PIN, OUTPUT); // Set PWM pin as output
      96:	2101      	movs	r1, #1
      98:	200c      	movs	r0, #12
      9a:	f000 f8b1 	bl	200 <pinMode>
  pinMode(DIR_PIN, OUTPUT); // Set direction pin as output
      9e:	2101      	movs	r1, #1
      a0:	200b      	movs	r0, #11
      a2:	f000 f8ad 	bl	200 <pinMode>
  digitalWrite(DIR_PIN, HIGH); // Set direction to HIGH
      a6:	2101      	movs	r1, #1
      a8:	200b      	movs	r0, #11
}
      aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  digitalWrite(DIR_PIN, HIGH); // Set direction to HIGH
      ae:	f000 b87d 	b.w	1ac <digitalWrite>
			uint32_t elapsed = systick_millis_count - millis_begin;
      b2:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
      b4:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
      b6:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
      b8:	b12a      	cbz	r2, c6 <setup+0x5e>
				if (elapsed > 2000) break;
      ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      be:	d8ea      	bhi.n	96 <setup+0x2e>
			yield();
      c0:	f000 ffda 	bl	1078 <yield>
      c4:	e7da      	b.n	7c <setup+0x14>
				if (elapsed > 750) break;
      c6:	4543      	cmp	r3, r8
      c8:	d9fa      	bls.n	c0 <setup+0x58>
      ca:	e7e4      	b.n	96 <setup+0x2e>
      cc:	20000d2c 	.word	0x20000d2c
      d0:	20000d58 	.word	0x20000d58
      d4:	20000d57 	.word	0x20000d57
      d8:	20000d3c 	.word	0x20000d3c

000000dc <loop>:

void loop() {
      dc:	b508      	push	{r3, lr}
  // Blink the built-in LED
  digitalWrite(DIR_PIN, HIGH); // Turn the LED on
      de:	2101      	movs	r1, #1
      e0:	200b      	movs	r0, #11
      e2:	f000 f863 	bl	1ac <digitalWrite>
  delay(500);                      // Wait for a second
      e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      ea:	f000 f80b 	bl	104 <delay>
  digitalWrite(DIR_PIN, LOW);  // Turn the LED off
      ee:	200b      	movs	r0, #11
      f0:	2100      	movs	r1, #0
      f2:	f000 f85b 	bl	1ac <digitalWrite>
  delay(500);                      // Wait for a second
      f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(500);                      // Wait for a second
      fe:	f000 b801 	b.w	104 <delay>
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     102:	bf00      	nop

00000104 <delay>:
	if (msec == 0) return;
     104:	b900      	cbnz	r0, 108 <delay+0x4>
     106:	4770      	bx	lr
{
     108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     10c:	2101      	movs	r1, #1
     10e:	4681      	mov	r9, r0
     110:	4c21      	ldr	r4, [pc, #132]	; (198 <delay+0x94>)
     112:	4d22      	ldr	r5, [pc, #136]	; (19c <delay+0x98>)
     114:	4e22      	ldr	r6, [pc, #136]	; (1a0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     116:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     11a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     11c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     11e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     122:	2b00      	cmp	r3, #0
     124:	d1f7      	bne.n	116 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     126:	491f      	ldr	r1, [pc, #124]	; (1a4 <delay+0xa0>)
     128:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
     12a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     12e:	f8df a078 	ldr.w	sl, [pc, #120]	; 1a8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     132:	1a1b      	subs	r3, r3, r0
     134:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     136:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     13a:	f8da 2000 	ldr.w	r2, [sl]
     13e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     142:	455a      	cmp	r2, fp
     144:	bf94      	ite	ls
     146:	4490      	addls	r8, r2
     148:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     14a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     14e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     150:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     152:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     156:	2b00      	cmp	r3, #0
     158:	d1f7      	bne.n	14a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     15a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     15c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     160:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     162:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     166:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     16a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     16e:	bf94      	ite	ls
     170:	4462      	addls	r2, ip
     172:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     176:	eba2 0208 	sub.w	r2, r2, r8
     17a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     17e:	d306      	bcc.n	18e <delay+0x8a>
			if (--msec == 0) return;
     180:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     184:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     188:	d1df      	bne.n	14a <delay+0x46>
}
     18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     18e:	f000 ff73 	bl	1078 <yield>
		while ((micros() - start) >= 1000) {
     192:	4904      	ldr	r1, [pc, #16]	; (1a4 <delay+0xa0>)
     194:	e7d9      	b.n	14a <delay+0x46>
     196:	bf00      	nop
     198:	20000d30 	.word	0x20000d30
     19c:	20000d2c 	.word	0x20000d2c
     1a0:	20000d28 	.word	0x20000d28
     1a4:	e0001000 	.word	0xe0001000
     1a8:	20000d24 	.word	0x20000d24

000001ac <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
     1ac:	2827      	cmp	r0, #39	; 0x27
     1ae:	d816      	bhi.n	1de <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     1b0:	0102      	lsls	r2, r0, #4
     1b2:	4b10      	ldr	r3, [pc, #64]	; (1f4 <digitalWrite+0x48>)
     1b4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     1b8:	589b      	ldr	r3, [r3, r2]
{
     1ba:	b410      	push	{r4}
	mask = p->mask;
     1bc:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     1be:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     1c0:	4214      	tst	r4, r2
     1c2:	d005      	beq.n	1d0 <digitalWrite+0x24>
		if (val) {
     1c4:	b961      	cbnz	r1, 1e0 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     1ce:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     1d0:	6883      	ldr	r3, [r0, #8]
		if (val) {
     1d2:	b151      	cbz	r1, 1ea <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     1d4:	4a08      	ldr	r2, [pc, #32]	; (1f8 <digitalWrite+0x4c>)
}
     1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     1da:	601a      	str	r2, [r3, #0]
}
     1dc:	4770      	bx	lr
     1de:	4770      	bx	lr
     1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     1e8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     1ea:	4a04      	ldr	r2, [pc, #16]	; (1fc <digitalWrite+0x50>)
}
     1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	4770      	bx	lr
     1f4:	20000280 	.word	0x20000280
     1f8:	0001f038 	.word	0x0001f038
     1fc:	00013038 	.word	0x00013038

00000200 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     200:	2827      	cmp	r0, #39	; 0x27
     202:	d829      	bhi.n	258 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     204:	4b16      	ldr	r3, [pc, #88]	; (260 <pinMode+0x60>)
     206:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     208:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     20a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     20e:	589a      	ldr	r2, [r3, r2]
{
     210:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     212:	6853      	ldr	r3, [r2, #4]
     214:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     216:	d00e      	beq.n	236 <pinMode+0x36>
     218:	2904      	cmp	r1, #4
     21a:	d00c      	beq.n	236 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     21c:	ea23 0304 	bic.w	r3, r3, r4
     220:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     222:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     224:	b1a9      	cbz	r1, 252 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     226:	2902      	cmp	r1, #2
     228:	d017      	beq.n	25a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     22a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     22c:	bf0c      	ite	eq
     22e:	4a0d      	ldreq	r2, [pc, #52]	; (264 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     230:	4a0d      	ldrne	r2, [pc, #52]	; (268 <pinMode+0x68>)
     232:	601a      	str	r2, [r3, #0]
     234:	e007      	b.n	246 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     236:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     238:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     23a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     23c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     23e:	d008      	beq.n	252 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     240:	f640 0238 	movw	r2, #2104	; 0x838
     244:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     246:	6843      	ldr	r3, [r0, #4]
     248:	2215      	movs	r2, #21
}
     24a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     24e:	601a      	str	r2, [r3, #0]
}
     250:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     252:	2238      	movs	r2, #56	; 0x38
     254:	601a      	str	r2, [r3, #0]
     256:	e7f6      	b.n	246 <pinMode+0x46>
     258:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     25a:	4a04      	ldr	r2, [pc, #16]	; (26c <pinMode+0x6c>)
     25c:	601a      	str	r2, [r3, #0]
     25e:	e7f2      	b.n	246 <pinMode+0x46>
     260:	20000280 	.word	0x20000280
     264:	00013038 	.word	0x00013038
     268:	00010038 	.word	0x00010038
     26c:	0001f038 	.word	0x0001f038

00000270 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     270:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     272:	f7ff fef9 	bl	68 <setup>
	while (1) {
		loop();
     276:	f7ff ff31 	bl	dc <loop>
		yield();
     27a:	f000 fefd 	bl	1078 <yield>
	while (1) {
     27e:	e7fa      	b.n	276 <main+0x6>

00000280 <unused_interrupt_vector>:
	__disable_irq();
     280:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     282:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     286:	4c52      	ldr	r4, [pc, #328]	; (3d0 <unused_interrupt_vector+0x150>)
     288:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     28c:	f01e 0f04 	tst.w	lr, #4
     290:	bf0c      	ite	eq
     292:	f3ef 8208 	mrseq	r2, MSP
     296:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     29a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     29e:	4e4d      	ldr	r6, [pc, #308]	; (3d4 <unused_interrupt_vector+0x154>)
	while (p < end) {
     2a0:	4d4d      	ldr	r5, [pc, #308]	; (3d8 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     2a2:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     2a6:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     2aa:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     2ae:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     2b2:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     2b6:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     2ba:	6993      	ldr	r3, [r2, #24]
     2bc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     2c0:	69d3      	ldr	r3, [r2, #28]
     2c2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     2c6:	f000 f8a3 	bl	410 <tempmonGetTemp>
     2ca:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     2ce:	f001 fa6f 	bl	17b0 <rtc_get>
	info->len = sizeof(*info) / 4;
     2d2:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     2d8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     2dc:	460b      	mov	r3, r1
     2de:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     2e2:	493e      	ldr	r1, [pc, #248]	; (3dc <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     2e4:	1d30      	adds	r0, r6, #4
     2e6:	405a      	eors	r2, r3
     2e8:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     2ea:	f002 0301 	and.w	r3, r2, #1
     2ee:	3c01      	subs	r4, #1
     2f0:	fb01 f303 	mul.w	r3, r1, r3
     2f4:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     2f8:	d1f7      	bne.n	2ea <unused_interrupt_vector+0x6a>
	while (p < end) {
     2fa:	42a8      	cmp	r0, r5
     2fc:	d002      	beq.n	304 <unused_interrupt_vector+0x84>
		crc ^= *p++;
     2fe:	6873      	ldr	r3, [r6, #4]
     300:	4606      	mov	r6, r0
     302:	e7ef      	b.n	2e4 <unused_interrupt_vector+0x64>
	info->crc = crc;
     304:	4b32      	ldr	r3, [pc, #200]	; (3d0 <unused_interrupt_vector+0x150>)
     306:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     30a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     30e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     312:	4930      	ldr	r1, [pc, #192]	; (3d4 <unused_interrupt_vector+0x154>)
     314:	4a32      	ldr	r2, [pc, #200]	; (3e0 <unused_interrupt_vector+0x160>)
     316:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     31a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     31e:	f3bf 8f4f 	dsb	sy
	asm("isb");
     322:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     326:	4a2f      	ldr	r2, [pc, #188]	; (3e4 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     328:	2502      	movs	r5, #2
     32a:	482f      	ldr	r0, [pc, #188]	; (3e8 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     32c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     32e:	492f      	ldr	r1, [pc, #188]	; (3ec <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     330:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     334:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     336:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     338:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     33a:	482d      	ldr	r0, [pc, #180]	; (3f0 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     33c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     344:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     346:	680b      	ldr	r3, [r1, #0]
     348:	4283      	cmp	r3, r0
     34a:	d83d      	bhi.n	3c8 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     34c:	4d26      	ldr	r5, [pc, #152]	; (3e8 <unused_interrupt_vector+0x168>)
     34e:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     358:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     35a:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     35c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     360:	4924      	ldr	r1, [pc, #144]	; (3f4 <unused_interrupt_vector+0x174>)
     362:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     366:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     36a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     36e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     372:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     376:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     37a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     37e:	e001      	b.n	384 <unused_interrupt_vector+0x104>
		usb_isr();
     380:	f000 f938 	bl	5f4 <usb_isr>
		if (PIT_TFLG0) {
     384:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     388:	2b00      	cmp	r3, #0
     38a:	d0f9      	beq.n	380 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     38c:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     38e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     392:	2c4f      	cmp	r4, #79	; 0x4f
     394:	d9f4      	bls.n	380 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     396:	4b18      	ldr	r3, [pc, #96]	; (3f8 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     398:	2002      	movs	r0, #2
     39a:	4918      	ldr	r1, [pc, #96]	; (3fc <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     39c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     3a0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     3a4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     3a6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     3aa:	b93b      	cbnz	r3, 3bc <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     3ac:	4814      	ldr	r0, [pc, #80]	; (400 <unused_interrupt_vector+0x180>)
     3ae:	4915      	ldr	r1, [pc, #84]	; (404 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     3b0:	4a0d      	ldr	r2, [pc, #52]	; (3e8 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     3b2:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     3b4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     3b8:	2b00      	cmp	r3, #0
     3ba:	d0fa      	beq.n	3b2 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     3bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     3c0:	4a11      	ldr	r2, [pc, #68]	; (408 <unused_interrupt_vector+0x188>)
     3c2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     3c6:	e7fe      	b.n	3c6 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     3c8:	f000 fef6 	bl	11b8 <set_arm_clock>
     3cc:	e7be      	b.n	34c <unused_interrupt_vector+0xcc>
     3ce:	bf00      	nop
     3d0:	2027ff00 	.word	0x2027ff00
     3d4:	2027ff80 	.word	0x2027ff80
     3d8:	2027ffa8 	.word	0x2027ffa8
     3dc:	edb88320 	.word	0xedb88320
     3e0:	2027ffa0 	.word	0x2027ffa0
     3e4:	400fc000 	.word	0x400fc000
     3e8:	40084000 	.word	0x40084000
     3ec:	20000588 	.word	0x20000588
     3f0:	0bcd3d80 	.word	0x0bcd3d80
     3f4:	00249f00 	.word	0x00249f00
     3f8:	400d9000 	.word	0x400d9000
     3fc:	402e0000 	.word	0x402e0000
     400:	400f8000 	.word	0x400f8000
     404:	0bad00f1 	.word	0x0bad00f1
     408:	05fa0004 	.word	0x05fa0004

0000040c <Panic_Temp_isr>:
  unused_interrupt_vector();
     40c:	f7ff bf38 	b.w	280 <unused_interrupt_vector>

00000410 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     410:	4a12      	ldr	r2, [pc, #72]	; (45c <tempmonGetTemp+0x4c>)
     412:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     416:	075b      	lsls	r3, r3, #29
     418:	d5fb      	bpl.n	412 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     41a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     41e:	4810      	ldr	r0, [pc, #64]	; (460 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     420:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     424:	490f      	ldr	r1, [pc, #60]	; (464 <tempmonGetTemp+0x54>)
     426:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     42a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     42e:	ed91 6a00 	vldr	s12, [r1]
     432:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     436:	4a0c      	ldr	r2, [pc, #48]	; (468 <tempmonGetTemp+0x58>)
     438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     43c:	4b0b      	ldr	r3, [pc, #44]	; (46c <tempmonGetTemp+0x5c>)
     43e:	edd2 6a00 	vldr	s13, [r2]
     442:	ee77 7ac7 	vsub.f32	s15, s15, s14
     446:	ed93 7a00 	vldr	s14, [r3]
     44a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     44e:	ee67 7a86 	vmul.f32	s15, s15, s12
     452:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     456:	ee37 0a40 	vsub.f32	s0, s14, s0
     45a:	4770      	bx	lr
     45c:	400d8100 	.word	0x400d8100
     460:	20000d14 	.word	0x20000d14
     464:	20000d1c 	.word	0x20000d1c
     468:	20000d20 	.word	0x20000d20
     46c:	20000d18 	.word	0x20000d18

00000470 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     470:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     472:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     474:	b11b      	cbz	r3, 47e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     476:	6853      	ldr	r3, [r2, #4]
     478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     47c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     47e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     480:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     482:	b33c      	cbz	r4, 4d4 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     484:	4b1a      	ldr	r3, [pc, #104]	; (4f0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     486:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     488:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     48c:	420c      	tst	r4, r1
     48e:	d11d      	bne.n	4cc <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     490:	4e18      	ldr	r6, [pc, #96]	; (4f4 <schedule_transfer+0x84>)
     492:	6877      	ldr	r7, [r6, #4]
     494:	e004      	b.n	4a0 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     496:	6874      	ldr	r4, [r6, #4]
     498:	1be4      	subs	r4, r4, r7
     49a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     49e:	d20b      	bcs.n	4b8 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     4a0:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     4a4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     4a8:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     4ac:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     4b0:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     4b4:	0464      	lsls	r4, r4, #17
     4b6:	d5ee      	bpl.n	496 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     4b8:	400d      	ands	r5, r1
     4ba:	d107      	bne.n	4cc <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     4bc:	4c0c      	ldr	r4, [pc, #48]	; (4f0 <schedule_transfer+0x80>)
		endpoint->status = 0;
     4be:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     4c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     4c6:	430b      	orrs	r3, r1
     4c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     4cc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     4ce:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     4d0:	bcf0      	pop	{r4, r5, r6, r7}
     4d2:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     4d4:	4d06      	ldr	r5, [pc, #24]	; (4f0 <schedule_transfer+0x80>)
	endpoint->status = 0;
     4d6:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     4da:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     4de:	430b      	orrs	r3, r1
     4e0:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     4e4:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     4e6:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     4e8:	b662      	cpsie	i
}
     4ea:	bcf0      	pop	{r4, r5, r6, r7}
     4ec:	4770      	bx	lr
     4ee:	bf00      	nop
     4f0:	402e0000 	.word	0x402e0000
     4f4:	e0001000 	.word	0xe0001000

000004f8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     4f8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     4fa:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     4fc:	b19d      	cbz	r5, 526 <run_callbacks+0x2e>
     4fe:	4606      	mov	r6, r0
     500:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     502:	2400      	movs	r4, #0
     504:	e003      	b.n	50e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     506:	6812      	ldr	r2, [r2, #0]
		count++;
     508:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     50a:	2a01      	cmp	r2, #1
     50c:	d00c      	beq.n	528 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     50e:	6853      	ldr	r3, [r2, #4]
     510:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     514:	d0f7      	beq.n	506 <run_callbacks+0xe>
			ep->first_transfer = t;
     516:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     518:	b12c      	cbz	r4, 526 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     51a:	4628      	mov	r0, r5
		ep->callback_function(first);
     51c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     51e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     520:	4798      	blx	r3
	while (count) {
     522:	3c01      	subs	r4, #1
     524:	d1f9      	bne.n	51a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     526:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     528:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     52c:	e7f4      	b.n	518 <run_callbacks+0x20>
     52e:	bf00      	nop

00000530 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     530:	b430      	push	{r4, r5}
	if (len > 0) {
     532:	b9d9      	cbnz	r1, 56c <endpoint0_transmit.constprop.0+0x3c>
     534:	4c1f      	ldr	r4, [pc, #124]	; (5b4 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     536:	4b20      	ldr	r3, [pc, #128]	; (5b8 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     538:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     53a:	4a20      	ldr	r2, [pc, #128]	; (5bc <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     53c:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     53e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     542:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     544:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     546:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     54a:	2480      	movs	r4, #128	; 0x80
     54c:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     54e:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     552:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     556:	481a      	ldr	r0, [pc, #104]	; (5c0 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     558:	432b      	orrs	r3, r5
     55a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     55e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     560:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     564:	2b00      	cmp	r3, #0
     566:	d1fb      	bne.n	560 <endpoint0_transmit.constprop.0+0x30>
}
     568:	bc30      	pop	{r4, r5}
     56a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     56c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     56e:	4b15      	ldr	r3, [pc, #84]	; (5c4 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     570:	4c10      	ldr	r4, [pc, #64]	; (5b4 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     572:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     574:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     578:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     57a:	4a10      	ldr	r2, [pc, #64]	; (5bc <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     57c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     57e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     582:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     584:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     586:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     58a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     58c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     58e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     592:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     596:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     598:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     59a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     59c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     59e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     5a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     5a6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     5aa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     5ae:	2b00      	cmp	r3, #0
     5b0:	d1fb      	bne.n	5aa <endpoint0_transmit.constprop.0+0x7a>
     5b2:	e7c0      	b.n	536 <endpoint0_transmit.constprop.0+0x6>
     5b4:	20000000 	.word	0x20000000
     5b8:	20000ac0 	.word	0x20000ac0
     5bc:	402e0000 	.word	0x402e0000
     5c0:	20000cbc 	.word	0x20000cbc
     5c4:	20000ae0 	.word	0x20000ae0

000005c8 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     5c8:	4908      	ldr	r1, [pc, #32]	; (5ec <usb_stop_sof_interrupts+0x24>)
     5ca:	2201      	movs	r2, #1
     5cc:	780b      	ldrb	r3, [r1, #0]
     5ce:	fa02 f000 	lsl.w	r0, r2, r0
     5d2:	ea23 0000 	bic.w	r0, r3, r0
     5d6:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     5d8:	b930      	cbnz	r0, 5e8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     5da:	4a05      	ldr	r2, [pc, #20]	; (5f0 <usb_stop_sof_interrupts+0x28>)
     5dc:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     5e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     5e4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     5e8:	4770      	bx	lr
     5ea:	bf00      	nop
     5ec:	20000d54 	.word	0x20000d54
     5f0:	402e0000 	.word	0x402e0000

000005f4 <usb_isr>:
{
     5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     5f8:	4c97      	ldr	r4, [pc, #604]	; (858 <usb_isr+0x264>)
{
     5fa:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     5fc:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     600:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
     602:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     606:	d553      	bpl.n	6b0 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     608:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     60c:	2a00      	cmp	r2, #0
     60e:	d04a      	beq.n	6a6 <usb_isr+0xb2>
     610:	4e92      	ldr	r6, [pc, #584]	; (85c <usb_isr+0x268>)
     612:	f8df a260 	ldr.w	sl, [pc, #608]	; 874 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
     616:	f8df 9274 	ldr.w	r9, [pc, #628]	; 88c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     61a:	f8df b274 	ldr.w	fp, [pc, #628]	; 890 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     61e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 894 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
     622:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     626:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     62a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     62e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     632:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     636:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     63a:	049d      	lsls	r5, r3, #18
     63c:	d5f5      	bpl.n	62a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     63e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     646:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     64a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     64e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     652:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
     656:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
     65a:	d1fa      	bne.n	652 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
     65c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
     65e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
     660:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
     664:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
     668:	f000 81cf 	beq.w	a0a <usb_isr+0x416>
     66c:	f200 80db 	bhi.w	826 <usb_isr+0x232>
     670:	f240 3102 	movw	r1, #770	; 0x302
     674:	428b      	cmp	r3, r1
     676:	f000 81e7 	beq.w	a48 <usb_isr+0x454>
     67a:	f200 809a 	bhi.w	7b2 <usb_isr+0x1be>
     67e:	2b82      	cmp	r3, #130	; 0x82
     680:	f000 81cb 	beq.w	a1a <usb_isr+0x426>
     684:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     688:	f040 808a 	bne.w	7a0 <usb_isr+0x1ac>
		if (endpoint > 7) break;
     68c:	f010 0f78 	tst.w	r0, #120	; 0x78
     690:	b283      	uxth	r3, r0
     692:	f000 8203 	beq.w	a9c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
     696:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     69a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     69e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     6a2:	2a00      	cmp	r2, #0
     6a4:	d1bd      	bne.n	622 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     6a6:	4a6c      	ldr	r2, [pc, #432]	; (858 <usb_isr+0x264>)
     6a8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     6ac:	2b00      	cmp	r3, #0
     6ae:	d142      	bne.n	736 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
     6b0:	067e      	lsls	r6, r7, #25
     6b2:	d516      	bpl.n	6e2 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     6b4:	4b68      	ldr	r3, [pc, #416]	; (858 <usb_isr+0x264>)
     6b6:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     6ba:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     6be:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
     6c2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     6c6:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     6ca:	2c00      	cmp	r4, #0
     6cc:	d1fb      	bne.n	6c6 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     6d2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     6d6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
     6da:	f000 fc3f 	bl	f5c <usb_serial_reset>
		endpointN_notify_mask = 0;
     6de:	4b60      	ldr	r3, [pc, #384]	; (860 <usb_isr+0x26c>)
     6e0:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
     6e2:	01fc      	lsls	r4, r7, #7
     6e4:	d503      	bpl.n	6ee <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     6e6:	4b5f      	ldr	r3, [pc, #380]	; (864 <usb_isr+0x270>)
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	b103      	cbz	r3, 6ee <usb_isr+0xfa>
     6ec:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
     6ee:	01b8      	lsls	r0, r7, #6
     6f0:	d503      	bpl.n	6fa <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     6f2:	4b5d      	ldr	r3, [pc, #372]	; (868 <usb_isr+0x274>)
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	b103      	cbz	r3, 6fa <usb_isr+0x106>
     6f8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
     6fa:	0779      	lsls	r1, r7, #29
     6fc:	d508      	bpl.n	710 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     6fe:	4b56      	ldr	r3, [pc, #344]	; (858 <usb_isr+0x264>)
     700:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     704:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     708:	d047      	beq.n	79a <usb_isr+0x1a6>
			usb_high_speed = 1;
     70a:	4b58      	ldr	r3, [pc, #352]	; (86c <usb_isr+0x278>)
     70c:	2201      	movs	r2, #1
     70e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     710:	4b51      	ldr	r3, [pc, #324]	; (858 <usb_isr+0x264>)
     712:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
     716:	061a      	lsls	r2, r3, #24
     718:	d50a      	bpl.n	730 <usb_isr+0x13c>
     71a:	063b      	lsls	r3, r7, #24
     71c:	d508      	bpl.n	730 <usb_isr+0x13c>
		if (usb_reboot_timer) {
     71e:	4a54      	ldr	r2, [pc, #336]	; (870 <usb_isr+0x27c>)
     720:	7813      	ldrb	r3, [r2, #0]
     722:	b12b      	cbz	r3, 730 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
     724:	3b01      	subs	r3, #1
     726:	b2db      	uxtb	r3, r3
     728:	7013      	strb	r3, [r2, #0]
     72a:	2b00      	cmp	r3, #0
     72c:	f000 8272 	beq.w	c14 <usb_isr+0x620>
}
     730:	b003      	add	sp, #12
     732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
     736:	494f      	ldr	r1, [pc, #316]	; (874 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
     738:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
     73c:	6808      	ldr	r0, [r1, #0]
     73e:	4203      	tst	r3, r0
     740:	f040 81d1 	bne.w	ae6 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
     744:	4a46      	ldr	r2, [pc, #280]	; (860 <usb_isr+0x26c>)
     746:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
     748:	401c      	ands	r4, r3
     74a:	d0b1      	beq.n	6b0 <usb_isr+0xbc>
				while (tx) {
     74c:	ea5f 4814 	movs.w	r8, r4, lsr #16
     750:	d010      	beq.n	774 <usb_isr+0x180>
     752:	4e42      	ldr	r6, [pc, #264]	; (85c <usb_isr+0x268>)
					tx &= ~(1<<p);
     754:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
     758:	fa98 f5a8 	rbit	r5, r8
     75c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     760:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
     764:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     768:	3040      	adds	r0, #64	; 0x40
     76a:	f7ff fec5 	bl	4f8 <run_callbacks>
				while (tx) {
     76e:	ea38 0805 	bics.w	r8, r8, r5
     772:	d1f1      	bne.n	758 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
     774:	b2a4      	uxth	r4, r4
				while(rx) {
     776:	2c00      	cmp	r4, #0
     778:	d09a      	beq.n	6b0 <usb_isr+0xbc>
     77a:	4e38      	ldr	r6, [pc, #224]	; (85c <usb_isr+0x268>)
					rx &= ~(1<<p);
     77c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
     780:	fa94 f5a4 	rbit	r5, r4
     784:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
     788:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
     78c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
     790:	f7ff feb2 	bl	4f8 <run_callbacks>
				while(rx) {
     794:	43ac      	bics	r4, r5
     796:	d1f3      	bne.n	780 <usb_isr+0x18c>
     798:	e78a      	b.n	6b0 <usb_isr+0xbc>
			usb_high_speed = 0;
     79a:	4a34      	ldr	r2, [pc, #208]	; (86c <usb_isr+0x278>)
     79c:	7013      	strb	r3, [r2, #0]
     79e:	e7b7      	b.n	710 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
     7a0:	2b80      	cmp	r3, #128	; 0x80
     7a2:	f47f af78 	bne.w	696 <usb_isr+0xa2>
		reply_buffer[0] = 0;
     7a6:	4834      	ldr	r0, [pc, #208]	; (878 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
     7a8:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
     7aa:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     7ac:	f7ff fec0 	bl	530 <endpoint0_transmit.constprop.0>
		return;
     7b0:	e775      	b.n	69e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
     7b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     7b6:	f000 810b 	beq.w	9d0 <usb_isr+0x3dc>
     7ba:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
     7be:	2b01      	cmp	r3, #1
     7c0:	f63f af69 	bhi.w	696 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     7c4:	4b2d      	ldr	r3, [pc, #180]	; (87c <usb_isr+0x288>)
     7c6:	685d      	ldr	r5, [r3, #4]
     7c8:	2d00      	cmp	r5, #0
     7ca:	f43f af64 	beq.w	696 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     7ce:	fa1f fc8c 	uxth.w	ip, ip
     7d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     7d6:	e004      	b.n	7e2 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
     7d8:	691d      	ldr	r5, [r3, #16]
     7da:	330c      	adds	r3, #12
     7dc:	2d00      	cmp	r5, #0
     7de:	f43f af5a 	beq.w	696 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
     7e2:	881a      	ldrh	r2, [r3, #0]
     7e4:	4572      	cmp	r2, lr
     7e6:	d1f7      	bne.n	7d8 <usb_isr+0x1e4>
     7e8:	885a      	ldrh	r2, [r3, #2]
     7ea:	4562      	cmp	r2, ip
     7ec:	d1f4      	bne.n	7d8 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
     7ee:	ea4f 221e 	mov.w	r2, lr, lsr #8
     7f2:	2a03      	cmp	r2, #3
     7f4:	f000 81a5 	beq.w	b42 <usb_isr+0x54e>
					datalen = list->length;
     7f8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
     7fa:	0c00      	lsrs	r0, r0, #16
     7fc:	4282      	cmp	r2, r0
     7fe:	bf28      	it	cs
     800:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
     802:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     806:	f040 81a1 	bne.w	b4c <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
     80a:	4b18      	ldr	r3, [pc, #96]	; (86c <usb_isr+0x278>)
     80c:	491c      	ldr	r1, [pc, #112]	; (880 <usb_isr+0x28c>)
     80e:	7818      	ldrb	r0, [r3, #0]
     810:	4b1c      	ldr	r3, [pc, #112]	; (884 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
     812:	9201      	str	r2, [sp, #4]
     814:	2800      	cmp	r0, #0
     816:	bf18      	it	ne
     818:	4619      	movne	r1, r3
     81a:	481b      	ldr	r0, [pc, #108]	; (888 <usb_isr+0x294>)
     81c:	f000 fe44 	bl	14a8 <memcpy>
     820:	4d19      	ldr	r5, [pc, #100]	; (888 <usb_isr+0x294>)
     822:	9a01      	ldr	r2, [sp, #4]
     824:	e1e1      	b.n	bea <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
     826:	f242 2121 	movw	r1, #8737	; 0x2221
     82a:	428b      	cmp	r3, r1
     82c:	d07c      	beq.n	928 <usb_isr+0x334>
     82e:	d933      	bls.n	898 <usb_isr+0x2a4>
     830:	f242 3121 	movw	r1, #8993	; 0x2321
     834:	428b      	cmp	r3, r1
     836:	f000 8081 	beq.w	93c <usb_isr+0x348>
     83a:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
     83e:	428b      	cmp	r3, r1
     840:	f47f af29 	bne.w	696 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
     844:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
     848:	b283      	uxth	r3, r0
     84a:	f47f af24 	bne.w	696 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
     84e:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
     852:	f363 0c0f 	bfi	ip, r3, #0, #16
     856:	e7b5      	b.n	7c4 <usb_isr+0x1d0>
     858:	402e0000 	.word	0x402e0000
     85c:	20000000 	.word	0x20000000
     860:	20000cc0 	.word	0x20000cc0
     864:	20000d40 	.word	0x20000d40
     868:	20000d44 	.word	0x20000d44
     86c:	20000d59 	.word	0x20000d59
     870:	20000d5a 	.word	0x20000d5a
     874:	20000cbc 	.word	0x20000cbc
     878:	20000cdc 	.word	0x20000cdc
     87c:	20000500 	.word	0x20000500
     880:	60001b28 	.word	0x60001b28
     884:	60001b8c 	.word	0x60001b8c
     888:	20200000 	.word	0x20200000
     88c:	20000cb4 	.word	0x20000cb4
     890:	b8c6cf5d 	.word	0xb8c6cf5d
     894:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
     898:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     89c:	d066      	beq.n	96c <usb_isr+0x378>
     89e:	f242 0121 	movw	r1, #8225	; 0x2021
     8a2:	428b      	cmp	r3, r1
     8a4:	f47f aef7 	bne.w	696 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
     8a8:	0c03      	lsrs	r3, r0, #16
     8aa:	2b07      	cmp	r3, #7
     8ac:	f47f aef3 	bne.w	696 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
     8b0:	4bb2      	ldr	r3, [pc, #712]	; (b7c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
     8b2:	49b3      	ldr	r1, [pc, #716]	; (b80 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
     8b4:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     8b6:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
     8b8:	49b2      	ldr	r1, [pc, #712]	; (b84 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
     8ba:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     8bc:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
     8c0:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
     8c4:	2201      	movs	r2, #1
     8c6:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     8c8:	4aaf      	ldr	r2, [pc, #700]	; (b88 <usb_isr+0x594>)
     8ca:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     8cc:	4aaf      	ldr	r2, [pc, #700]	; (b8c <usb_isr+0x598>)
     8ce:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
     8d0:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
     8d4:	f041 0101 	orr.w	r1, r1, #1
     8d8:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
     8dc:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     8e0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     8e4:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     8e6:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
     8e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1fb      	bne.n	8e8 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
     8f0:	4aa7      	ldr	r2, [pc, #668]	; (b90 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     8f2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     8f4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
     8f6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     8f8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     8fa:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     8fc:	f248 0380 	movw	r3, #32896	; 0x8080
     900:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     902:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     906:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     90a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     90e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     912:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     91a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
     91e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     922:	2b00      	cmp	r3, #0
     924:	d1fb      	bne.n	91e <usb_isr+0x32a>
     926:	e6ba      	b.n	69e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
     928:	b280      	uxth	r0, r0
     92a:	b938      	cbnz	r0, 93c <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     92c:	4b99      	ldr	r3, [pc, #612]	; (b94 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
     92e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
     932:	6819      	ldr	r1, [r3, #0]
     934:	4b98      	ldr	r3, [pc, #608]	; (b98 <usb_isr+0x5a4>)
     936:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
     938:	4b98      	ldr	r3, [pc, #608]	; (b9c <usb_isr+0x5a8>)
     93a:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
     93c:	4b94      	ldr	r3, [pc, #592]	; (b90 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
     93e:	2200      	movs	r2, #0
     940:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
     942:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     944:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     946:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     948:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     94a:	2280      	movs	r2, #128	; 0x80
     94c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     94e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     952:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     956:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     95a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     95e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     962:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     966:	2b00      	cmp	r3, #0
     968:	d1fb      	bne.n	962 <usb_isr+0x36e>
     96a:	e698      	b.n	69e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
     96c:	f3c2 4207 	ubfx	r2, r2, #16, #8
     970:	4b8b      	ldr	r3, [pc, #556]	; (ba0 <usb_isr+0x5ac>)
     972:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     974:	4b8b      	ldr	r3, [pc, #556]	; (ba4 <usb_isr+0x5b0>)
     976:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     97a:	4b8b      	ldr	r3, [pc, #556]	; (ba8 <usb_isr+0x5b4>)
     97c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     980:	4b8a      	ldr	r3, [pc, #552]	; (bac <usb_isr+0x5b8>)
     982:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
     986:	f000 faeb 	bl	f60 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
     98a:	2280      	movs	r2, #128	; 0x80
     98c:	4629      	mov	r1, r5
     98e:	4888      	ldr	r0, [pc, #544]	; (bb0 <usb_isr+0x5bc>)
     990:	f000 ff20 	bl	17d4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     994:	4b87      	ldr	r3, [pc, #540]	; (bb4 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     996:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     998:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
     99c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
     9a0:	4b7b      	ldr	r3, [pc, #492]	; (b90 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     9a2:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9a4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
     9a6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     9a8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
     9aa:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     9ac:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     9ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     9b2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     9b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     9ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     9be:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
     9c2:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
     9c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     9ca:	2b00      	cmp	r3, #0
     9cc:	d1fb      	bne.n	9c6 <usb_isr+0x3d2>
     9ce:	e666      	b.n	69e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
     9d0:	4b6f      	ldr	r3, [pc, #444]	; (b90 <usb_isr+0x59c>)
     9d2:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
     9d4:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
     9d6:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9d8:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
     9da:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     9dc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     9de:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     9e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     9e4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     9e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     9f0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     9f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     9f8:	2b00      	cmp	r3, #0
     9fa:	d1fb      	bne.n	9f4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
     9fc:	0c13      	lsrs	r3, r2, #16
     9fe:	065b      	lsls	r3, r3, #25
     a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     a04:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
     a08:	e649      	b.n	69e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
     a0a:	4b65      	ldr	r3, [pc, #404]	; (ba0 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
     a0c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
     a0e:	486a      	ldr	r0, [pc, #424]	; (bb8 <usb_isr+0x5c4>)
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
     a14:	f7ff fd8c 	bl	530 <endpoint0_transmit.constprop.0>
		return;
     a18:	e641      	b.n	69e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     a1a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
     a1c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
     a20:	f47f ae39 	bne.w	696 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     a28:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
     a2c:	4a62      	ldr	r2, [pc, #392]	; (bb8 <usb_isr+0x5c4>)
     a2e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     a30:	0618      	lsls	r0, r3, #24
     a32:	f100 809e 	bmi.w	b72 <usb_isr+0x57e>
     a36:	07cb      	lsls	r3, r1, #31
     a38:	d501      	bpl.n	a3e <usb_isr+0x44a>
			reply_buffer[0] = 1;
     a3a:	2301      	movs	r3, #1
     a3c:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
     a3e:	2102      	movs	r1, #2
     a40:	485d      	ldr	r0, [pc, #372]	; (bb8 <usb_isr+0x5c4>)
     a42:	f7ff fd75 	bl	530 <endpoint0_transmit.constprop.0>
		return;
     a46:	e62a      	b.n	69e <usb_isr+0xaa>
		if (endpoint > 7) break;
     a48:	f010 0f78 	tst.w	r0, #120	; 0x78
     a4c:	b283      	uxth	r3, r0
     a4e:	f47f ae22 	bne.w	696 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
     a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     a56:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
     a5a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     a5e:	bf14      	ite	ne
     a60:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     a64:	f043 0301 	orreq.w	r3, r3, #1
     a68:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     a6c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     a6e:	4b48      	ldr	r3, [pc, #288]	; (b90 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     a70:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     a72:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     a74:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     a76:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     a78:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     a7a:	2280      	movs	r2, #128	; 0x80
     a7c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     a7e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     a82:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     a86:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a8e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     a92:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     a96:	2b00      	cmp	r3, #0
     a98:	d1fb      	bne.n	a92 <usb_isr+0x49e>
     a9a:	e600      	b.n	69e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
     a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
     aa0:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
     aa4:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
     aa8:	bf14      	ite	ne
     aaa:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
     aae:	f023 0301 	biceq.w	r3, r3, #1
     ab2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
     ab6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
     ab8:	4b35      	ldr	r3, [pc, #212]	; (b90 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
     aba:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
     abc:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     abe:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
     ac0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
     ac2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ac4:	2280      	movs	r2, #128	; 0x80
     ac6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ac8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     acc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
     ad0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     ad8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
     adc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     ae0:	2b00      	cmp	r3, #0
     ae2:	d1fb      	bne.n	adc <usb_isr+0x4e8>
     ae4:	e5db      	b.n	69e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
     ae6:	2000      	movs	r0, #0
     ae8:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     aea:	4926      	ldr	r1, [pc, #152]	; (b84 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     aec:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
     aee:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
     af0:	f242 0121 	movw	r1, #8225	; 0x2021
     af4:	428c      	cmp	r4, r1
     af6:	f47f ae25 	bne.w	744 <usb_isr+0x150>
     afa:	b280      	uxth	r0, r0
     afc:	2800      	cmp	r0, #0
     afe:	f47f ae21 	bne.w	744 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     b02:	492e      	ldr	r1, [pc, #184]	; (bbc <usb_isr+0x5c8>)
     b04:	4c2e      	ldr	r4, [pc, #184]	; (bc0 <usb_isr+0x5cc>)
     b06:	c903      	ldmia	r1, {r0, r1}
     b08:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
     b0a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
     b0c:	ea4f 4111 	mov.w	r1, r1, lsr #16
     b10:	6020      	str	r0, [r4, #0]
     b12:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
     b14:	f47f ae16 	bne.w	744 <usb_isr+0x150>
	__disable_irq();
     b18:	b672      	cpsid	i
	sof_usage |= (1 << interface);
     b1a:	482a      	ldr	r0, [pc, #168]	; (bc4 <usb_isr+0x5d0>)
     b1c:	7801      	ldrb	r1, [r0, #0]
     b1e:	f041 0108 	orr.w	r1, r1, #8
     b22:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
     b24:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
     b28:	060d      	lsls	r5, r1, #24
     b2a:	d405      	bmi.n	b38 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     b2c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     b2e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
     b30:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
     b34:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
     b38:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
     b3a:	4a23      	ldr	r2, [pc, #140]	; (bc8 <usb_isr+0x5d4>)
     b3c:	2150      	movs	r1, #80	; 0x50
     b3e:	7011      	strb	r1, [r2, #0]
     b40:	e600      	b.n	744 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
     b42:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
     b44:	782a      	ldrb	r2, [r5, #0]
     b46:	4282      	cmp	r2, r0
     b48:	bf28      	it	cs
     b4a:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
     b4c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
     b50:	d144      	bne.n	bdc <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
     b52:	4b1e      	ldr	r3, [pc, #120]	; (bcc <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
     b54:	4d1e      	ldr	r5, [pc, #120]	; (bd0 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
     b56:	7818      	ldrb	r0, [r3, #0]
     b58:	491e      	ldr	r1, [pc, #120]	; (bd4 <usb_isr+0x5e0>)
     b5a:	4b1f      	ldr	r3, [pc, #124]	; (bd8 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
     b5c:	9201      	str	r2, [sp, #4]
     b5e:	2800      	cmp	r0, #0
     b60:	bf18      	it	ne
     b62:	4619      	movne	r1, r3
     b64:	4628      	mov	r0, r5
     b66:	f000 fc9f 	bl	14a8 <memcpy>
					usb_descriptor_buffer[1] = 7;
     b6a:	2307      	movs	r3, #7
     b6c:	706b      	strb	r3, [r5, #1]
     b6e:	9a01      	ldr	r2, [sp, #4]
     b70:	e03b      	b.n	bea <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     b72:	03c9      	lsls	r1, r1, #15
     b74:	f53f af61 	bmi.w	a3a <usb_isr+0x446>
     b78:	e761      	b.n	a3e <usb_isr+0x44a>
     b7a:	bf00      	nop
     b7c:	20000ae0 	.word	0x20000ae0
     b80:	20001cb4 	.word	0x20001cb4
     b84:	20000c80 	.word	0x20000c80
     b88:	00070080 	.word	0x00070080
     b8c:	20002cb4 	.word	0x20002cb4
     b90:	20000ac0 	.word	0x20000ac0
     b94:	20000d2c 	.word	0x20000d2c
     b98:	20000d3c 	.word	0x20000d3c
     b9c:	20000d57 	.word	0x20000d57
     ba0:	20000d58 	.word	0x20000d58
     ba4:	00cc0002 	.word	0x00cc0002
     ba8:	000200c8 	.word	0x000200c8
     bac:	00c80002 	.word	0x00c80002
     bb0:	20000080 	.word	0x20000080
     bb4:	74d59319 	.word	0x74d59319
     bb8:	20000cdc 	.word	0x20000cdc
     bbc:	20000cb4 	.word	0x20000cb4
     bc0:	20000d34 	.word	0x20000d34
     bc4:	20000d54 	.word	0x20000d54
     bc8:	20000d5a 	.word	0x20000d5a
     bcc:	20000d59 	.word	0x20000d59
     bd0:	20200000 	.word	0x20200000
     bd4:	60001b8c 	.word	0x60001b8c
     bd8:	60001b28 	.word	0x60001b28
					memcpy(usb_descriptor_buffer, list->addr, datalen);
     bdc:	4629      	mov	r1, r5
     bde:	4d10      	ldr	r5, [pc, #64]	; (c20 <usb_isr+0x62c>)
     be0:	9201      	str	r2, [sp, #4]
     be2:	4628      	mov	r0, r5
     be4:	f000 fc60 	bl	14a8 <memcpy>
     be8:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     bea:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
     bee:	4415      	add	r5, r2
	asm("dsb");
     bf0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
     bf4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
     bf8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
     bfc:	3320      	adds	r3, #32
	} while (location < end_addr);
     bfe:	429d      	cmp	r5, r3
     c00:	d8fa      	bhi.n	bf8 <usb_isr+0x604>
	asm("dsb");
     c02:	f3bf 8f4f 	dsb	sy
	asm("isb");
     c06:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
     c0a:	4805      	ldr	r0, [pc, #20]	; (c20 <usb_isr+0x62c>)
     c0c:	4611      	mov	r1, r2
     c0e:	f7ff fc8f 	bl	530 <endpoint0_transmit.constprop.0>
				return;
     c12:	e544      	b.n	69e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
     c14:	2003      	movs	r0, #3
     c16:	f7ff fcd7 	bl	5c8 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
     c1a:	f000 fe55 	bl	18c8 <___reboot_Teensyduino__veneer>
     c1e:	bf00      	nop
     c20:	20200000 	.word	0x20200000

00000c24 <usb_config_rx>:
{
     c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c28:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     c2a:	1e83      	subs	r3, r0, #2
     c2c:	2b02      	cmp	r3, #2
     c2e:	d901      	bls.n	c34 <usb_config_rx+0x10>
}
     c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     c34:	f8df 904c 	ldr.w	r9, [pc, #76]	; c84 <usb_config_rx+0x60>
     c38:	4615      	mov	r5, r2
     c3a:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
     c3c:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     c3e:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     c42:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
     c44:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
     c48:	2100      	movs	r1, #0
     c4a:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     c4e:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
     c50:	f000 fdc0 	bl	17d4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     c54:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
     c58:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     c5a:	0952      	lsrs	r2, r2, #5
     c5c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
     c60:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
     c64:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     c68:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
     c6c:	2f00      	cmp	r7, #0
     c6e:	d0df      	beq.n	c30 <usb_config_rx+0xc>
     c70:	4a03      	ldr	r2, [pc, #12]	; (c80 <usb_config_rx+0x5c>)
     c72:	40b3      	lsls	r3, r6
     c74:	6811      	ldr	r1, [r2, #0]
     c76:	430b      	orrs	r3, r1
     c78:	6013      	str	r3, [r2, #0]
}
     c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c7e:	bf00      	nop
     c80:	20000cc0 	.word	0x20000cc0
     c84:	20000000 	.word	0x20000000

00000c88 <usb_config_tx>:
{
     c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c8c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
     c8e:	1e81      	subs	r1, r0, #2
     c90:	2902      	cmp	r1, #2
     c92:	d901      	bls.n	c98 <usb_config_tx+0x10>
}
     c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     c98:	01c7      	lsls	r7, r0, #7
     c9a:	f8df 904c 	ldr.w	r9, [pc, #76]	; ce8 <usb_config_tx+0x60>
     c9e:	4692      	mov	sl, r2
     ca0:	4604      	mov	r4, r0
     ca2:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
     ca4:	223c      	movs	r2, #60	; 0x3c
     ca6:	2100      	movs	r1, #0
     ca8:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
     caa:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     cae:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
     cb0:	f108 0004 	add.w	r0, r8, #4
     cb4:	f000 fd8e 	bl	17d4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
     cb8:	faba f28a 	clz	r2, sl
     cbc:	0952      	lsrs	r2, r2, #5
     cbe:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
     cc2:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
     cc6:	2201      	movs	r2, #1
	qh->callback_function = callback;
     cc8:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
     ccc:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
     cd0:	2e00      	cmp	r6, #0
     cd2:	d0df      	beq.n	c94 <usb_config_tx+0xc>
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <usb_config_tx+0x5c>)
     cd6:	3410      	adds	r4, #16
     cd8:	6819      	ldr	r1, [r3, #0]
     cda:	40a2      	lsls	r2, r4
     cdc:	430a      	orrs	r2, r1
     cde:	601a      	str	r2, [r3, #0]
}
     ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ce4:	20000cc0 	.word	0x20000cc0
     ce8:	20000000 	.word	0x20000000

00000cec <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
     cec:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
     cee:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
     cf0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
     cf2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
     cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
     cfa:	b410      	push	{r4}
	transfer->next = 1;
     cfc:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
     cfe:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
     d00:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
     d04:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
     d06:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
     d0a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
     d0e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
     d10:	6181      	str	r1, [r0, #24]
}
     d12:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
     d16:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
     d1a:	4770      	bx	lr

00000d1c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     d1c:	1e83      	subs	r3, r0, #2
{
     d1e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     d20:	2b02      	cmp	r3, #2
     d22:	d900      	bls.n	d26 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
     d24:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     d26:	4b06      	ldr	r3, [pc, #24]	; (d40 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
     d28:	f100 0110 	add.w	r1, r0, #16
     d2c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
     d30:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
     d34:	fa0c f101 	lsl.w	r1, ip, r1
     d38:	3040      	adds	r0, #64	; 0x40
     d3a:	f7ff bb99 	b.w	470 <schedule_transfer>
     d3e:	bf00      	nop
     d40:	20000000 	.word	0x20000000

00000d44 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     d44:	1e83      	subs	r3, r0, #2
{
     d46:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
     d48:	2b02      	cmp	r3, #2
     d4a:	d900      	bls.n	d4e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
     d4c:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
     d4e:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
     d50:	4b02      	ldr	r3, [pc, #8]	; (d5c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
     d52:	4081      	lsls	r1, r0
     d54:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
     d58:	f7ff bb8a 	b.w	470 <schedule_transfer>
     d5c:	20000000 	.word	0x20000000

00000d60 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     d60:	4a12      	ldr	r2, [pc, #72]	; (dac <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
     d62:	4b13      	ldr	r3, [pc, #76]	; (db0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
     d64:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
     d68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
     d6c:	4298      	cmp	r0, r3
{
     d6e:	b510      	push	{r4, lr}
     d70:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
     d72:	d202      	bcs.n	d7a <usb_init_serialnumber+0x1a>
     d74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     d78:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
     d7a:	4c0e      	ldr	r4, [pc, #56]	; (db4 <usb_init_serialnumber+0x54>)
     d7c:	a901      	add	r1, sp, #4
     d7e:	220a      	movs	r2, #10
     d80:	f000 fc2c 	bl	15dc <ultoa>
	for (i=0; i<10; i++) {
     d84:	a901      	add	r1, sp, #4
     d86:	2300      	movs	r3, #0
     d88:	4620      	mov	r0, r4
		char c = buf[i];
     d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
     d8e:	3301      	adds	r3, #1
		if (!c) break;
     d90:	b13a      	cbz	r2, da2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
     d92:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
     d94:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
     d98:	d1f7      	bne.n	d8a <usb_init_serialnumber+0x2a>
     d9a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     d9c:	7023      	strb	r3, [r4, #0]
}
     d9e:	b004      	add	sp, #16
     da0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
     da2:	005b      	lsls	r3, r3, #1
     da4:	b2db      	uxtb	r3, r3
     da6:	7023      	strb	r3, [r4, #0]
}
     da8:	b004      	add	sp, #16
     daa:	bd10      	pop	{r4, pc}
     dac:	401f4400 	.word	0x401f4400
     db0:	00989680 	.word	0x00989680
     db4:	200005dc 	.word	0x200005dc

00000db8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
     db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     dba:	4c14      	ldr	r4, [pc, #80]	; (e0c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     dbc:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     dc0:	4e13      	ldr	r6, [pc, #76]	; (e10 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
     dc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
     dc6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     dca:	4f12      	ldr	r7, [pc, #72]	; (e14 <rx_queue_transfer+0x5c>)
     dcc:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
     dd0:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
     dd2:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
     dd6:	4621      	mov	r1, r4
     dd8:	883a      	ldrh	r2, [r7, #0]
     dda:	4630      	mov	r0, r6
     ddc:	f7ff ff86 	bl	cec <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
     de0:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
     de2:	4423      	add	r3, r4
	asm("dsb");
     de4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
     de8:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
     dec:	3420      	adds	r4, #32
	} while (location < end_addr);
     dee:	42a3      	cmp	r3, r4
     df0:	d8fa      	bhi.n	de8 <rx_queue_transfer+0x30>
	asm("dsb");
     df2:	f3bf 8f4f 	dsb	sy
	asm("isb");
     df6:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
     dfa:	2003      	movs	r0, #3
     dfc:	4631      	mov	r1, r6
     dfe:	f7ff ffa1 	bl	d44 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
     e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     e06:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
     e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e0c:	20200080 	.word	0x20200080
     e10:	20000b00 	.word	0x20000b00
     e14:	20000d48 	.word	0x20000d48

00000e18 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     e18:	4b24      	ldr	r3, [pc, #144]	; (eac <rx_event+0x94>)
{
     e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     e1e:	881c      	ldrh	r4, [r3, #0]
     e20:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
     e22:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
     e24:	f3c3 430e 	ubfx	r3, r3, #16, #15
     e28:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
     e2a:	2c00      	cmp	r4, #0
     e2c:	dd24      	ble.n	e78 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
     e2e:	4920      	ldr	r1, [pc, #128]	; (eb0 <rx_event+0x98>)
		if (head != rx_tail) {
     e30:	4820      	ldr	r0, [pc, #128]	; (eb4 <rx_event+0x9c>)
		uint32_t head = rx_head;
     e32:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
     e34:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
     e36:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
     e38:	4e1f      	ldr	r6, [pc, #124]	; (eb8 <rx_event+0xa0>)
		if (head != rx_tail) {
     e3a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
     e3c:	481f      	ldr	r0, [pc, #124]	; (ebc <rx_event+0xa4>)
		if (head != rx_tail) {
     e3e:	d007      	beq.n	e50 <rx_event+0x38>
			uint32_t ii = rx_list[head];
     e40:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
     e44:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
     e48:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
     e4c:	4294      	cmp	r4, r2
     e4e:	d918      	bls.n	e82 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
     e50:	3301      	adds	r3, #1
		rx_index[i] = 0;
     e52:	2200      	movs	r2, #0
		rx_count[i] = len;
     e54:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
     e58:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
     e5a:	4e19      	ldr	r6, [pc, #100]	; (ec0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
     e5c:	bf88      	it	hi
     e5e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
     e60:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
     e64:	bf98      	it	ls
     e66:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
     e68:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
     e6a:	4b16      	ldr	r3, [pc, #88]	; (ec4 <rx_event+0xac>)
		rx_head = head;
     e6c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
     e6e:	681a      	ldr	r2, [r3, #0]
     e70:	4414      	add	r4, r2
     e72:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
     e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
     e78:	4628      	mov	r0, r5
}
     e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
     e7e:	f7ff bf9b 	b.w	db8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     e82:	eb07 2048 	add.w	r0, r7, r8, lsl #9
     e86:	4910      	ldr	r1, [pc, #64]	; (ec8 <rx_event+0xb0>)
     e88:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
     e8a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
     e8c:	4408      	add	r0, r1
     e8e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
     e92:	f000 fb09 	bl	14a8 <memcpy>
				rx_available += len;
     e96:	4a0b      	ldr	r2, [pc, #44]	; (ec4 <rx_event+0xac>)
				rx_queue_transfer(i);
     e98:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
     e9a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
     e9e:	6813      	ldr	r3, [r2, #0]
     ea0:	4423      	add	r3, r4
}
     ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
     ea6:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
     ea8:	f7ff bf86 	b.w	db8 <rx_queue_transfer>
     eac:	20000d48 	.word	0x20000d48
     eb0:	20000d52 	.word	0x20000d52
     eb4:	20000d53 	.word	0x20000d53
     eb8:	20000ce8 	.word	0x20000ce8
     ebc:	20000d08 	.word	0x20000d08
     ec0:	20000cf8 	.word	0x20000cf8
     ec4:	20000ce4 	.word	0x20000ce4
     ec8:	20200080 	.word	0x20200080

00000ecc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
     ecc:	4b1d      	ldr	r3, [pc, #116]	; (f44 <usb_serial_flush_callback+0x78>)
     ece:	781a      	ldrb	r2, [r3, #0]
     ed0:	2a00      	cmp	r2, #0
     ed2:	d136      	bne.n	f42 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
     ed4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     ed8:	4a1b      	ldr	r2, [pc, #108]	; (f48 <usb_serial_flush_callback+0x7c>)
     eda:	7812      	ldrb	r2, [r2, #0]
     edc:	b38a      	cbz	r2, f42 <usb_serial_flush_callback+0x76>
{
     ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
     ee2:	4d1a      	ldr	r5, [pc, #104]	; (f4c <usb_serial_flush_callback+0x80>)
     ee4:	882a      	ldrh	r2, [r5, #0]
     ee6:	b352      	cbz	r2, f3e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
     ee8:	4e19      	ldr	r6, [pc, #100]	; (f50 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
     eea:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
     eee:	4f19      	ldr	r7, [pc, #100]	; (f54 <usb_serial_flush_callback+0x88>)
     ef0:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     ef2:	4c19      	ldr	r4, [pc, #100]	; (f58 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
     ef4:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
     ef8:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
     efc:	4642      	mov	r2, r8
     efe:	4638      	mov	r0, r7
     f00:	4621      	mov	r1, r4
     f02:	f7ff fef3 	bl	cec <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
     f06:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
     f0a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
     f0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     f12:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
     f16:	3420      	adds	r4, #32
	} while (location < end_addr);
     f18:	42a2      	cmp	r2, r4
     f1a:	d8fa      	bhi.n	f12 <usb_serial_flush_callback+0x46>
	asm("dsb");
     f1c:	f3bf 8f4f 	dsb	sy
	asm("isb");
     f20:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
     f24:	2004      	movs	r0, #4
     f26:	4639      	mov	r1, r7
     f28:	f7ff fef8 	bl	d1c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
     f2c:	7833      	ldrb	r3, [r6, #0]
     f2e:	3301      	adds	r3, #1
     f30:	b2db      	uxtb	r3, r3
     f32:	2b03      	cmp	r3, #3
     f34:	bf88      	it	hi
     f36:	2300      	movhi	r3, #0
     f38:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
     f3a:	2300      	movs	r3, #0
     f3c:	802b      	strh	r3, [r5, #0]
}
     f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f42:	4770      	bx	lr
     f44:	20000d56 	.word	0x20000d56
     f48:	20000d58 	.word	0x20000d58
     f4c:	20000d4a 	.word	0x20000d4a
     f50:	20000d55 	.word	0x20000d55
     f54:	20000c00 	.word	0x20000c00
     f58:	20201080 	.word	0x20201080

00000f5c <usb_serial_reset>:
}
     f5c:	4770      	bx	lr
     f5e:	bf00      	nop

00000f60 <usb_serial_configure>:
	if (usb_high_speed) {
     f60:	4b2d      	ldr	r3, [pc, #180]	; (1018 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f62:	2100      	movs	r1, #0
     f64:	2280      	movs	r2, #128	; 0x80
     f66:	482d      	ldr	r0, [pc, #180]	; (101c <usb_serial_configure+0xbc>)
{
     f68:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
     f6a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
     f6c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
     f6e:	4d2c      	ldr	r5, [pc, #176]	; (1020 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
     f70:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
     f72:	4e2c      	ldr	r6, [pc, #176]	; (1024 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
     f74:	bf0c      	ite	eq
     f76:	2340      	moveq	r3, #64	; 0x40
     f78:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
     f7c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
     f7e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
     f80:	f000 fc28 	bl	17d4 <memset>
	tx_head = 0;
     f84:	4a28      	ldr	r2, [pc, #160]	; (1028 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f86:	4621      	mov	r1, r4
	tx_available = 0;
     f88:	4b28      	ldr	r3, [pc, #160]	; (102c <usb_serial_configure+0xcc>)
	tx_head = 0;
     f8a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
     f90:	4827      	ldr	r0, [pc, #156]	; (1030 <usb_serial_configure+0xd0>)
	tx_available = 0;
     f92:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
     f94:	f000 fc1e 	bl	17d4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
     f98:	4a26      	ldr	r2, [pc, #152]	; (1034 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f9a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
     f9c:	4b26      	ldr	r3, [pc, #152]	; (1038 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     f9e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
     fa0:	e9c2 4400 	strd	r4, r4, [r2]
     fa4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
     fa8:	4a24      	ldr	r2, [pc, #144]	; (103c <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
     faa:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
     fae:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
     fb0:	4a23      	ldr	r2, [pc, #140]	; (1040 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
     fb2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
     fb6:	4b23      	ldr	r3, [pc, #140]	; (1044 <usb_serial_configure+0xe4>)
     fb8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     fba:	4623      	mov	r3, r4
	rx_available = 0;
     fbc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
     fbe:	4622      	mov	r2, r4
     fc0:	f7ff fe62 	bl	c88 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
     fc4:	4622      	mov	r2, r4
     fc6:	8831      	ldrh	r1, [r6, #0]
     fc8:	2003      	movs	r0, #3
     fca:	4b1f      	ldr	r3, [pc, #124]	; (1048 <usb_serial_configure+0xe8>)
     fcc:	f7ff fe2a 	bl	c24 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
     fd0:	4623      	mov	r3, r4
     fd2:	2201      	movs	r2, #1
     fd4:	8829      	ldrh	r1, [r5, #0]
     fd6:	2004      	movs	r0, #4
     fd8:	f7ff fe56 	bl	c88 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
     fdc:	4620      	mov	r0, r4
     fde:	3401      	adds	r4, #1
     fe0:	f7ff feea 	bl	db8 <rx_queue_transfer>
     fe4:	2c08      	cmp	r4, #8
     fe6:	d1f9      	bne.n	fdc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
     fe8:	4b18      	ldr	r3, [pc, #96]	; (104c <usb_serial_configure+0xec>)
     fea:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
     fec:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
     fee:	4818      	ldr	r0, [pc, #96]	; (1050 <usb_serial_configure+0xf0>)
     ff0:	4c18      	ldr	r4, [pc, #96]	; (1054 <usb_serial_configure+0xf4>)
     ff2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
     ff4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
     ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
     ffc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1000:	4915      	ldr	r1, [pc, #84]	; (1058 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1002:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1006:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    100a:	b121      	cbz	r1, 1016 <usb_serial_configure+0xb6>
    100c:	4a13      	ldr	r2, [pc, #76]	; (105c <usb_serial_configure+0xfc>)
    100e:	7813      	ldrb	r3, [r2, #0]
    1010:	f043 0301 	orr.w	r3, r3, #1
    1014:	7013      	strb	r3, [r2, #0]
}
    1016:	bd70      	pop	{r4, r5, r6, pc}
    1018:	20000d59 	.word	0x20000d59
    101c:	20000c00 	.word	0x20000c00
    1020:	20000d4c 	.word	0x20000d4c
    1024:	20000d48 	.word	0x20000d48
    1028:	20000d55 	.word	0x20000d55
    102c:	20000d4a 	.word	0x20000d4a
    1030:	20000b00 	.word	0x20000b00
    1034:	20000ce8 	.word	0x20000ce8
    1038:	20000cf8 	.word	0x20000cf8
    103c:	20000d52 	.word	0x20000d52
    1040:	20000ce4 	.word	0x20000ce4
    1044:	20000d53 	.word	0x20000d53
    1048:	00000e19 	.word	0x00000e19
    104c:	402e0000 	.word	0x402e0000
    1050:	20000d40 	.word	0x20000d40
    1054:	00000ecd 	.word	0x00000ecd
    1058:	00000000 	.word	0x00000000
    105c:	20000d5b 	.word	0x20000d5b

00001060 <usb_serial_available>:
	uint32_t n = rx_available;
    1060:	4b04      	ldr	r3, [pc, #16]	; (1074 <usb_serial_available+0x14>)
{
    1062:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1064:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1066:	b10c      	cbz	r4, 106c <usb_serial_available+0xc>
}
    1068:	4620      	mov	r0, r4
    106a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    106c:	f000 f804 	bl	1078 <yield>
}
    1070:	4620      	mov	r0, r4
    1072:	bd10      	pop	{r4, pc}
    1074:	20000ce4 	.word	0x20000ce4

00001078 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    1078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    107c:	4b2d      	ldr	r3, [pc, #180]	; (1134 <yield+0xbc>)
    107e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1080:	b166      	cbz	r6, 109c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    1082:	4f2d      	ldr	r7, [pc, #180]	; (1138 <yield+0xc0>)
    1084:	783b      	ldrb	r3, [r7, #0]
    1086:	b94b      	cbnz	r3, 109c <yield+0x24>
	running = 1;
    1088:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    108a:	07f1      	lsls	r1, r6, #31
	running = 1;
    108c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    108e:	d443      	bmi.n	1118 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1090:	07b2      	lsls	r2, r6, #30
    1092:	d426      	bmi.n	10e2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    1094:	2300      	movs	r3, #0
    1096:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    1098:	0773      	lsls	r3, r6, #29
    109a:	d401      	bmi.n	10a0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    109c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    10a0:	4b26      	ldr	r3, [pc, #152]	; (113c <yield+0xc4>)
    10a2:	681a      	ldr	r2, [r3, #0]
    10a4:	2a00      	cmp	r2, #0
    10a6:	d0f9      	beq.n	109c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    10a8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    10ac:	2a00      	cmp	r2, #0
    10ae:	d1f5      	bne.n	109c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    10b0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    10b4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    10b6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    10b8:	2800      	cmp	r0, #0
    10ba:	d034      	beq.n	1126 <yield+0xae>
		if (runningFromYield) {
    10bc:	4c20      	ldr	r4, [pc, #128]	; (1140 <yield+0xc8>)
    10be:	7821      	ldrb	r1, [r4, #0]
    10c0:	2900      	cmp	r1, #0
    10c2:	d130      	bne.n	1126 <yield+0xae>
		runningFromYield = true;
    10c4:	2201      	movs	r2, #1
    10c6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    10c8:	6942      	ldr	r2, [r0, #20]
    10ca:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    10cc:	2a00      	cmp	r2, #0
    10ce:	d02e      	beq.n	112e <yield+0xb6>
			firstYield->_prev = nullptr;
    10d0:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    10d2:	b905      	cbnz	r5, 10d6 <yield+0x5e>
    10d4:	b662      	cpsie	i
		first->_triggered = false;
    10d6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    10d8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    10da:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    10dc:	4798      	blx	r3
		runningFromYield = false;
    10de:	7025      	strb	r5, [r4, #0]
    10e0:	e7dc      	b.n	109c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    10e2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1148 <yield+0xd0>
    10e6:	f898 3000 	ldrb.w	r3, [r8]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d0d2      	beq.n	1094 <yield+0x1c>
    10ee:	2500      	movs	r5, #0
    10f0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 114c <yield+0xd4>
    10f4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    10f6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    10fa:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    10fc:	6823      	ldr	r3, [r4, #0]
    10fe:	4620      	mov	r0, r4
    1100:	691b      	ldr	r3, [r3, #16]
    1102:	4798      	blx	r3
    1104:	b110      	cbz	r0, 110c <yield+0x94>
    1106:	6963      	ldr	r3, [r4, #20]
    1108:	689b      	ldr	r3, [r3, #8]
    110a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    110c:	f898 2000 	ldrb.w	r2, [r8]
    1110:	b2eb      	uxtb	r3, r5
    1112:	429a      	cmp	r2, r3
    1114:	d8ef      	bhi.n	10f6 <yield+0x7e>
    1116:	e7bd      	b.n	1094 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    1118:	f7ff ffa2 	bl	1060 <usb_serial_available>
		if (Serial.available()) serialEvent();
    111c:	2800      	cmp	r0, #0
    111e:	d0b7      	beq.n	1090 <yield+0x18>
    1120:	f3af 8000 	nop.w
    1124:	e7b4      	b.n	1090 <yield+0x18>
		if (doit) __enable_irq();
    1126:	2d00      	cmp	r5, #0
    1128:	d1b8      	bne.n	109c <yield+0x24>
    112a:	b662      	cpsie	i
    112c:	e7b6      	b.n	109c <yield+0x24>
			lastYield = nullptr;
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <yield+0xcc>)
    1130:	601a      	str	r2, [r3, #0]
    1132:	e7ce      	b.n	10d2 <yield+0x5a>
    1134:	20000d5b 	.word	0x20000d5b
    1138:	20000d50 	.word	0x20000d50
    113c:	20000c88 	.word	0x20000c88
    1140:	20000d4e 	.word	0x20000d4e
    1144:	20000c94 	.word	0x20000c94
    1148:	20000d4f 	.word	0x20000d4f
    114c:	20000c98 	.word	0x20000c98

00001150 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1150:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1152:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1156:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1158:	4c0c      	ldr	r4, [pc, #48]	; (118c <EventResponder::runFromInterrupt()+0x3c>)
    115a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    115c:	b180      	cbz	r0, 1180 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    115e:	4e0c      	ldr	r6, [pc, #48]	; (1190 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1160:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1162:	6943      	ldr	r3, [r0, #20]
    1164:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1166:	b173      	cbz	r3, 1186 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1168:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    116a:	b902      	cbnz	r2, 116e <EventResponder::runFromInterrupt()+0x1e>
    116c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    116e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1170:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1172:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1174:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1178:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    117a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    117c:	2800      	cmp	r0, #0
    117e:	d1f0      	bne.n	1162 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1180:	b902      	cbnz	r2, 1184 <EventResponder::runFromInterrupt()+0x34>
    1182:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    1184:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1186:	6033      	str	r3, [r6, #0]
    1188:	e7ef      	b.n	116a <EventResponder::runFromInterrupt()+0x1a>
    118a:	bf00      	nop
    118c:	20000c90 	.word	0x20000c90
    1190:	20000c8c 	.word	0x20000c8c

00001194 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1194:	f7ff bfdc 	b.w	1150 <EventResponder::runFromInterrupt()>

00001198 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1198:	4904      	ldr	r1, [pc, #16]	; (11ac <systick_isr+0x14>)
	systick_millis_count++;
    119a:	4a05      	ldr	r2, [pc, #20]	; (11b0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    119c:	6849      	ldr	r1, [r1, #4]
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <systick_isr+0x1c>)
    11a0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    11a2:	6813      	ldr	r3, [r2, #0]
    11a4:	3301      	adds	r3, #1
    11a6:	6013      	str	r3, [r2, #0]
}
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop
    11ac:	e0001000 	.word	0xe0001000
    11b0:	20000d2c 	.word	0x20000d2c
    11b4:	20000d28 	.word	0x20000d28

000011b8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    11b8:	49a2      	ldr	r1, [pc, #648]	; (1444 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    11ba:	4ba3      	ldr	r3, [pc, #652]	; (1448 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    11bc:	4288      	cmp	r0, r1
{
    11be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    11c2:	4ca2      	ldr	r4, [pc, #648]	; (144c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    11c4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    11c6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    11c8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    11cc:	d91b      	bls.n	1206 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    11ce:	4ba0      	ldr	r3, [pc, #640]	; (1450 <set_arm_clock+0x298>)
    11d0:	4298      	cmp	r0, r3
    11d2:	f240 8102 	bls.w	13da <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    11d6:	1ac3      	subs	r3, r0, r3
    11d8:	499e      	ldr	r1, [pc, #632]	; (1454 <set_arm_clock+0x29c>)
    11da:	0a1b      	lsrs	r3, r3, #8
    11dc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    11e0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    11e4:	09db      	lsrs	r3, r3, #7
    11e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    11ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    11ee:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    11f2:	428b      	cmp	r3, r1
    11f4:	bf28      	it	cs
    11f6:	460b      	movcs	r3, r1
    11f8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    11fc:	4b96      	ldr	r3, [pc, #600]	; (1458 <set_arm_clock+0x2a0>)
    11fe:	fba3 3707 	umull	r3, r7, r3, r7
    1202:	08ff      	lsrs	r7, r7, #3
    1204:	e004      	b.n	1210 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    1206:	4f95      	ldr	r7, [pc, #596]	; (145c <set_arm_clock+0x2a4>)
    1208:	42b8      	cmp	r0, r7
    120a:	bf8c      	ite	hi
    120c:	270e      	movhi	r7, #14
    120e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1210:	498d      	ldr	r1, [pc, #564]	; (1448 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1212:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1216:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    121a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    121c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    1220:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1224:	d20c      	bcs.n	1240 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    1226:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    122a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    122e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    1232:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1236:	680b      	ldr	r3, [r1, #0]
    1238:	2b00      	cmp	r3, #0
    123a:	dafc      	bge.n	1236 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    123c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1240:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    1244:	d124      	bne.n	1290 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1246:	4986      	ldr	r1, [pc, #536]	; (1460 <set_arm_clock+0x2a8>)
    1248:	690c      	ldr	r4, [r1, #16]
    124a:	4986      	ldr	r1, [pc, #536]	; (1464 <set_arm_clock+0x2ac>)
    124c:	43a1      	bics	r1, r4
    124e:	f000 80ea 	beq.w	1426 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1252:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    1256:	4634      	mov	r4, r6
    1258:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    125c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    1260:	d004      	beq.n	126c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    1262:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1266:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    1268:	4b77      	ldr	r3, [pc, #476]	; (1448 <set_arm_clock+0x290>)
    126a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    126c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    1270:	d007      	beq.n	1282 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    1272:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    1276:	4974      	ldr	r1, [pc, #464]	; (1448 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    1278:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    127a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    127c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    127e:	071a      	lsls	r2, r3, #28
    1280:	d4fc      	bmi.n	127c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    1282:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    1286:	4a70      	ldr	r2, [pc, #448]	; (1448 <set_arm_clock+0x290>)
    1288:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    128a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    128c:	069b      	lsls	r3, r3, #26
    128e:	d4fc      	bmi.n	128a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    1290:	4c75      	ldr	r4, [pc, #468]	; (1468 <set_arm_clock+0x2b0>)
    1292:	42a0      	cmp	r0, r4
    1294:	f200 80ce 	bhi.w	1434 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    1298:	f04f 0c01 	mov.w	ip, #1
    129c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    129e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    12a0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    12a4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    12a8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    12ac:	42a2      	cmp	r2, r4
    12ae:	d818      	bhi.n	12e2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    12b0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    12b4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    12b8:	f040 808d 	bne.w	13d6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    12bc:	f1bc 0f04 	cmp.w	ip, #4
    12c0:	f200 8091 	bhi.w	13e6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    12c4:	180a      	adds	r2, r1, r0
    12c6:	42a2      	cmp	r2, r4
    12c8:	f200 80a4 	bhi.w	1414 <set_arm_clock+0x25c>
    12cc:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    12d0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    12d2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    12d6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    12da:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    12de:	42a2      	cmp	r2, r4
    12e0:	d9e6      	bls.n	12b0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    12e2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12e6:	028c      	lsls	r4, r1, #10
    12e8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    12ec:	485f      	ldr	r0, [pc, #380]	; (146c <set_arm_clock+0x2b4>)
    12ee:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    12f0:	4a5f      	ldr	r2, [pc, #380]	; (1470 <set_arm_clock+0x2b8>)
    12f2:	4290      	cmp	r0, r2
    12f4:	d97f      	bls.n	13f6 <set_arm_clock+0x23e>
    12f6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 149c <set_arm_clock+0x2e4>
    12fa:	226c      	movs	r2, #108	; 0x6c
    12fc:	485d      	ldr	r0, [pc, #372]	; (1474 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    12fe:	4d58      	ldr	r5, [pc, #352]	; (1460 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    1300:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1304:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    1308:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    130c:	f8df c190 	ldr.w	ip, [pc, #400]	; 14a0 <set_arm_clock+0x2e8>
    1310:	ea0e 0c0c 	and.w	ip, lr, ip
    1314:	45d4      	cmp	ip, sl
    1316:	d009      	beq.n	132c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    1318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    131c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    1320:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    1324:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1326:	682a      	ldr	r2, [r5, #0]
    1328:	2a00      	cmp	r2, #0
    132a:	dafc      	bge.n	1326 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    132c:	4a46      	ldr	r2, [pc, #280]	; (1448 <set_arm_clock+0x290>)
    132e:	6915      	ldr	r5, [r2, #16]
    1330:	f005 0507 	and.w	r5, r5, #7
    1334:	429d      	cmp	r5, r3
    1336:	d003      	beq.n	1340 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1338:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    133a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    133c:	03dd      	lsls	r5, r3, #15
    133e:	d4fc      	bmi.n	133a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1340:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    1344:	d009      	beq.n	135a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1346:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    134a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    134e:	4a3e      	ldr	r2, [pc, #248]	; (1448 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1350:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    1352:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1354:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1356:	0799      	lsls	r1, r3, #30
    1358:	d4fc      	bmi.n	1354 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    135a:	4947      	ldr	r1, [pc, #284]	; (1478 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    135c:	4a47      	ldr	r2, [pc, #284]	; (147c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    135e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    1360:	4291      	cmp	r1, r2
    1362:	d83c      	bhi.n	13de <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    1364:	4b46      	ldr	r3, [pc, #280]	; (1480 <set_arm_clock+0x2c8>)
    1366:	09c9      	lsrs	r1, r1, #7
    1368:	fba3 3101 	umull	r3, r1, r3, r1
    136c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    136e:	1e4b      	subs	r3, r1, #1
    1370:	021b      	lsls	r3, r3, #8
    1372:	ea86 0203 	eor.w	r2, r6, r3
    1376:	f412 7f40 	tst.w	r2, #768	; 0x300
    137a:	d006      	beq.n	138a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    137c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1380:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    1384:	4a30      	ldr	r2, [pc, #192]	; (1448 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    1386:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    1388:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    138a:	4a2f      	ldr	r2, [pc, #188]	; (1448 <set_arm_clock+0x290>)
    138c:	6953      	ldr	r3, [r2, #20]
    138e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    1392:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    1394:	6c93      	ldr	r3, [r2, #72]	; 0x48
    1396:	069b      	lsls	r3, r3, #26
    1398:	d4fc      	bmi.n	1394 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    139a:	4b3a      	ldr	r3, [pc, #232]	; (1484 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    139c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    139e:	fba3 2300 	umull	r2, r3, r3, r0
    13a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13a6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    13aa:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    13ae:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    13b2:	4a35      	ldr	r2, [pc, #212]	; (1488 <set_arm_clock+0x2d0>)
    13b4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    13b6:	4a35      	ldr	r2, [pc, #212]	; (148c <set_arm_clock+0x2d4>)
    13b8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    13ba:	4a35      	ldr	r2, [pc, #212]	; (1490 <set_arm_clock+0x2d8>)
    13bc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    13be:	d208      	bcs.n	13d2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    13c0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    13c4:	4a21      	ldr	r2, [pc, #132]	; (144c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    13c6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    13ca:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    13cc:	6813      	ldr	r3, [r2, #0]
    13ce:	2b00      	cmp	r3, #0
    13d0:	dafc      	bge.n	13cc <set_arm_clock+0x214>
	}

	return frequency;
}
    13d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13d6:	4673      	mov	r3, lr
    13d8:	e762      	b.n	12a0 <set_arm_clock+0xe8>
    13da:	2712      	movs	r7, #18
    13dc:	e718      	b.n	1210 <set_arm_clock+0x58>
    13de:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    13e2:	2104      	movs	r1, #4
    13e4:	e7c5      	b.n	1372 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    13e6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    13ea:	4820      	ldr	r0, [pc, #128]	; (146c <set_arm_clock+0x2b4>)
    13ec:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    13ee:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    13f0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    13f2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    13f6:	4a27      	ldr	r2, [pc, #156]	; (1494 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    13f8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 14a4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    13fc:	fba2 2000 	umull	r2, r0, r2, r0
    1400:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    1402:	4825      	ldr	r0, [pc, #148]	; (1498 <set_arm_clock+0x2e0>)
    1404:	2a36      	cmp	r2, #54	; 0x36
    1406:	bf38      	it	cc
    1408:	2236      	movcc	r2, #54	; 0x36
    140a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    140e:	ea42 0a0a 	orr.w	sl, r2, sl
    1412:	e774      	b.n	12fe <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1414:	ea4f 248c 	mov.w	r4, ip, lsl #10
    1418:	2300      	movs	r3, #0
    141a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    141e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    1422:	46ac      	mov	ip, r5
    1424:	e762      	b.n	12ec <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1426:	461d      	mov	r5, r3
    1428:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    142c:	4611      	mov	r1, r2
    142e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    1432:	e713      	b.n	125c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    1434:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    1436:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    143a:	4602      	mov	r2, r0
    143c:	4631      	mov	r1, r6
    143e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    1440:	46e6      	mov	lr, ip
    1442:	e753      	b.n	12ec <set_arm_clock+0x134>
    1444:	1f78a400 	.word	0x1f78a400
    1448:	400fc000 	.word	0x400fc000
    144c:	40080000 	.word	0x40080000
    1450:	23c34600 	.word	0x23c34600
    1454:	004cb223 	.word	0x004cb223
    1458:	51eb851f 	.word	0x51eb851f
    145c:	016e3600 	.word	0x016e3600
    1460:	400d8000 	.word	0x400d8000
    1464:	80003040 	.word	0x80003040
    1468:	269fb1ff 	.word	0x269fb1ff
    146c:	005b8d80 	.word	0x005b8d80
    1470:	4df67eff 	.word	0x4df67eff
    1474:	4d3f6400 	.word	0x4d3f6400
    1478:	08f0d17f 	.word	0x08f0d17f
    147c:	2cb4177f 	.word	0x2cb4177f
    1480:	00e5109f 	.word	0x00e5109f
    1484:	431bde83 	.word	0x431bde83
    1488:	20000588 	.word	0x20000588
    148c:	20000584 	.word	0x20000584
    1490:	20000d24 	.word	0x20000d24
    1494:	165e9f81 	.word	0x165e9f81
    1498:	00b71b00 	.word	0x00b71b00
    149c:	8000206c 	.word	0x8000206c
    14a0:	8001307f 	.word	0x8001307f
    14a4:	80002000 	.word	0x80002000

000014a8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    14a8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    14aa:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    14ae:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    14b2:	d16d      	bne.n	1590 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    14b4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    14b6:	d341      	bcc.n	153c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    14b8:	f851 3b04 	ldr.w	r3, [r1], #4
    14bc:	f840 3b04 	str.w	r3, [r0], #4
    14c0:	f851 3b04 	ldr.w	r3, [r1], #4
    14c4:	f840 3b04 	str.w	r3, [r0], #4
    14c8:	f851 3b04 	ldr.w	r3, [r1], #4
    14cc:	f840 3b04 	str.w	r3, [r0], #4
    14d0:	f851 3b04 	ldr.w	r3, [r1], #4
    14d4:	f840 3b04 	str.w	r3, [r0], #4
    14d8:	f851 3b04 	ldr.w	r3, [r1], #4
    14dc:	f840 3b04 	str.w	r3, [r0], #4
    14e0:	f851 3b04 	ldr.w	r3, [r1], #4
    14e4:	f840 3b04 	str.w	r3, [r0], #4
    14e8:	f851 3b04 	ldr.w	r3, [r1], #4
    14ec:	f840 3b04 	str.w	r3, [r0], #4
    14f0:	f851 3b04 	ldr.w	r3, [r1], #4
    14f4:	f840 3b04 	str.w	r3, [r0], #4
    14f8:	f851 3b04 	ldr.w	r3, [r1], #4
    14fc:	f840 3b04 	str.w	r3, [r0], #4
    1500:	f851 3b04 	ldr.w	r3, [r1], #4
    1504:	f840 3b04 	str.w	r3, [r0], #4
    1508:	f851 3b04 	ldr.w	r3, [r1], #4
    150c:	f840 3b04 	str.w	r3, [r0], #4
    1510:	f851 3b04 	ldr.w	r3, [r1], #4
    1514:	f840 3b04 	str.w	r3, [r0], #4
    1518:	f851 3b04 	ldr.w	r3, [r1], #4
    151c:	f840 3b04 	str.w	r3, [r0], #4
    1520:	f851 3b04 	ldr.w	r3, [r1], #4
    1524:	f840 3b04 	str.w	r3, [r0], #4
    1528:	f851 3b04 	ldr.w	r3, [r1], #4
    152c:	f840 3b04 	str.w	r3, [r0], #4
    1530:	f851 3b04 	ldr.w	r3, [r1], #4
    1534:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1538:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    153a:	d2bd      	bcs.n	14b8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    153c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    153e:	d311      	bcc.n	1564 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1540:	f851 3b04 	ldr.w	r3, [r1], #4
    1544:	f840 3b04 	str.w	r3, [r0], #4
    1548:	f851 3b04 	ldr.w	r3, [r1], #4
    154c:	f840 3b04 	str.w	r3, [r0], #4
    1550:	f851 3b04 	ldr.w	r3, [r1], #4
    1554:	f840 3b04 	str.w	r3, [r0], #4
    1558:	f851 3b04 	ldr.w	r3, [r1], #4
    155c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1560:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1562:	d2ed      	bcs.n	1540 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1564:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1566:	d305      	bcc.n	1574 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1568:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    156c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1570:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1572:	d2f9      	bcs.n	1568 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1574:	3204      	adds	r2, #4
	beq	.Ldone
    1576:	d008      	beq.n	158a <memcpy+0xe2>

	lsls	r2, r2, #31
    1578:	07d2      	lsls	r2, r2, #31
	itt ne
    157a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    157c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1580:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    1584:	d301      	bcc.n	158a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    1586:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    1588:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    158a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    158c:	4770      	bx	lr
    158e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    1590:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    1592:	d313      	bcc.n	15bc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1594:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1596:	d08d      	beq.n	14b4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1598:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    159c:	d08a      	beq.n	14b4 <memcpy+0xc>

	rsb	r3, #4
    159e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    15a2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    15a4:	07db      	lsls	r3, r3, #31
	itt ne
    15a6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    15a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    15ac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    15b0:	d380      	bcc.n	14b4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    15b2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    15b6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    15ba:	e77b      	b.n	14b4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    15bc:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    15be:	d3d9      	bcc.n	1574 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    15c0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    15c2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    15c6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    15ca:	d2f9      	bcs.n	15c0 <memcpy+0x118>

	ldrb	r3, [r1]
    15cc:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    15ce:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    15d0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    15d2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    15d4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    15d6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    15d8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    15da:	4770      	bx	lr

000015dc <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    15dc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    15e0:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    15e2:	4666      	mov	r6, ip
	int i=0, j;
    15e4:	2400      	movs	r4, #0
    15e6:	e000      	b.n	15ea <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    15e8:	3401      	adds	r4, #1
		digit = val % radix;
    15ea:	fbb0 f5f2 	udiv	r5, r0, r2
    15ee:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    15f2:	2b09      	cmp	r3, #9
    15f4:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    15f8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    15fc:	fa5f fe8e 	uxtb.w	lr, lr
    1600:	bf98      	it	ls
    1602:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    1606:	4290      	cmp	r0, r2
		val /= radix;
    1608:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    160a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    160e:	d2eb      	bcs.n	15e8 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    1610:	1c63      	adds	r3, r4, #1
    1612:	2200      	movs	r2, #0
    1614:	18c8      	adds	r0, r1, r3
    1616:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    1618:	b17c      	cbz	r4, 163a <ultoa+0x5e>
		t = buf[j];
    161a:	4662      	mov	r2, ip
    161c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    1620:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    1624:	eba1 030c 	sub.w	r3, r1, ip
    1628:	3202      	adds	r2, #2
		buf[j] = buf[i];
    162a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    162e:	3b01      	subs	r3, #1
    1630:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    1632:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    1634:	4423      	add	r3, r4
    1636:	429a      	cmp	r2, r3
    1638:	dbef      	blt.n	161a <ultoa+0x3e>
	}
	return buf;
}
    163a:	4608      	mov	r0, r1
    163c:	bd70      	pop	{r4, r5, r6, pc}
    163e:	bf00      	nop

00001640 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    1640:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    1642:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    1644:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    1648:	4619      	mov	r1, r3
{
    164a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    164c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1650:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    1654:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1658:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    165c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    1660:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    1662:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    1666:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    166a:	b29b      	uxth	r3, r3
    166c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    1670:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1674:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    1678:	3101      	adds	r1, #1
    167a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    167e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    1680:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    1682:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    1686:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    1688:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    168a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    168c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    168e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    1692:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    1694:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    1696:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    1698:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    169a:	d1eb      	bne.n	1674 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    169c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    16a0:	b29b      	uxth	r3, r3
    16a2:	f043 030f 	orr.w	r3, r3, #15
    16a6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    16aa:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    16ae:	b29b      	uxth	r3, r3
    16b0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    16b4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    16b8:	bd10      	pop	{r4, pc}
    16ba:	bf00      	nop

000016bc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    16bc:	4b37      	ldr	r3, [pc, #220]	; (179c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    16be:	4a38      	ldr	r2, [pc, #224]	; (17a0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    16c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    16c2:	4838      	ldr	r0, [pc, #224]	; (17a4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    16c4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    16c8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    16ca:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    16cc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    16d0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    16d4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    16d8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    16dc:	430a      	orrs	r2, r1
    16de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    16e2:	f7ff ffad 	bl	1640 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    16e6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    16ea:	f7ff ffa9 	bl	1640 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    16ee:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    16f2:	f7ff ffa5 	bl	1640 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    16f6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    16fa:	f7ff ffa1 	bl	1640 <flexpwm_init>
	for (i=0; i < 4; i++) {
    16fe:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1700:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1704:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    1708:	4611      	mov	r1, r2
    170a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    170e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1712:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1714:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1716:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1718:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    171a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    171e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1720:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    1722:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1726:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1728:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    172a:	d1ee      	bne.n	170a <pwm_init+0x4e>
    172c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    172e:	481e      	ldr	r0, [pc, #120]	; (17a8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1730:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1734:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    1738:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    173a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    173e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1742:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    1746:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    174a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    174c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    174e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1750:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1752:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    1756:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1758:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    175a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    175e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1760:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    1762:	d1ee      	bne.n	1742 <pwm_init+0x86>
    1764:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    1766:	4811      	ldr	r0, [pc, #68]	; (17ac <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1768:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    176a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    176e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    1770:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1774:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    1778:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    177c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    1780:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    1782:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    1784:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    1786:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    1788:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    178a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    178c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    178e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    1792:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    1794:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    1798:	d1ee      	bne.n	1778 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    179a:	bd70      	pop	{r4, r5, r6, pc}
    179c:	400fc000 	.word	0x400fc000
    17a0:	fc030000 	.word	0xfc030000
    17a4:	403dc000 	.word	0x403dc000
    17a8:	401e0000 	.word	0x401e0000
    17ac:	401e4000 	.word	0x401e4000

000017b0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    17b0:	4a07      	ldr	r2, [pc, #28]	; (17d0 <rtc_get+0x20>)
    17b2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    17b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    17b6:	4619      	mov	r1, r3
    17b8:	4684      	mov	ip, r0
    17ba:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    17bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    17be:	4299      	cmp	r1, r3
    17c0:	d1f9      	bne.n	17b6 <rtc_get+0x6>
    17c2:	4584      	cmp	ip, r0
    17c4:	d1f7      	bne.n	17b6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    17c6:	0bdb      	lsrs	r3, r3, #15
}
    17c8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    17cc:	4770      	bx	lr
    17ce:	bf00      	nop
    17d0:	400d4000 	.word	0x400d4000

000017d4 <memset>:
    17d4:	0783      	lsls	r3, r0, #30
    17d6:	b530      	push	{r4, r5, lr}
    17d8:	d048      	beq.n	186c <memset+0x98>
    17da:	1e54      	subs	r4, r2, #1
    17dc:	2a00      	cmp	r2, #0
    17de:	d03f      	beq.n	1860 <memset+0x8c>
    17e0:	b2ca      	uxtb	r2, r1
    17e2:	4603      	mov	r3, r0
    17e4:	e001      	b.n	17ea <memset+0x16>
    17e6:	3c01      	subs	r4, #1
    17e8:	d33a      	bcc.n	1860 <memset+0x8c>
    17ea:	f803 2b01 	strb.w	r2, [r3], #1
    17ee:	079d      	lsls	r5, r3, #30
    17f0:	d1f9      	bne.n	17e6 <memset+0x12>
    17f2:	2c03      	cmp	r4, #3
    17f4:	d92d      	bls.n	1852 <memset+0x7e>
    17f6:	b2cd      	uxtb	r5, r1
    17f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    17fc:	2c0f      	cmp	r4, #15
    17fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1802:	d936      	bls.n	1872 <memset+0x9e>
    1804:	f1a4 0210 	sub.w	r2, r4, #16
    1808:	f022 0c0f 	bic.w	ip, r2, #15
    180c:	f103 0e20 	add.w	lr, r3, #32
    1810:	44e6      	add	lr, ip
    1812:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    1816:	f103 0210 	add.w	r2, r3, #16
    181a:	e942 5504 	strd	r5, r5, [r2, #-16]
    181e:	e942 5502 	strd	r5, r5, [r2, #-8]
    1822:	3210      	adds	r2, #16
    1824:	4572      	cmp	r2, lr
    1826:	d1f8      	bne.n	181a <memset+0x46>
    1828:	f10c 0201 	add.w	r2, ip, #1
    182c:	f014 0f0c 	tst.w	r4, #12
    1830:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    1834:	f004 0c0f 	and.w	ip, r4, #15
    1838:	d013      	beq.n	1862 <memset+0x8e>
    183a:	f1ac 0304 	sub.w	r3, ip, #4
    183e:	f023 0303 	bic.w	r3, r3, #3
    1842:	3304      	adds	r3, #4
    1844:	4413      	add	r3, r2
    1846:	f842 5b04 	str.w	r5, [r2], #4
    184a:	4293      	cmp	r3, r2
    184c:	d1fb      	bne.n	1846 <memset+0x72>
    184e:	f00c 0403 	and.w	r4, ip, #3
    1852:	b12c      	cbz	r4, 1860 <memset+0x8c>
    1854:	b2c9      	uxtb	r1, r1
    1856:	441c      	add	r4, r3
    1858:	f803 1b01 	strb.w	r1, [r3], #1
    185c:	429c      	cmp	r4, r3
    185e:	d1fb      	bne.n	1858 <memset+0x84>
    1860:	bd30      	pop	{r4, r5, pc}
    1862:	4664      	mov	r4, ip
    1864:	4613      	mov	r3, r2
    1866:	2c00      	cmp	r4, #0
    1868:	d1f4      	bne.n	1854 <memset+0x80>
    186a:	e7f9      	b.n	1860 <memset+0x8c>
    186c:	4603      	mov	r3, r0
    186e:	4614      	mov	r4, r2
    1870:	e7bf      	b.n	17f2 <memset+0x1e>
    1872:	461a      	mov	r2, r3
    1874:	46a4      	mov	ip, r4
    1876:	e7e0      	b.n	183a <memset+0x66>

00001878 <__libc_init_array>:
    1878:	b570      	push	{r4, r5, r6, lr}
    187a:	4e0d      	ldr	r6, [pc, #52]	; (18b0 <__libc_init_array+0x38>)
    187c:	4d0d      	ldr	r5, [pc, #52]	; (18b4 <__libc_init_array+0x3c>)
    187e:	1b76      	subs	r6, r6, r5
    1880:	10b6      	asrs	r6, r6, #2
    1882:	d006      	beq.n	1892 <__libc_init_array+0x1a>
    1884:	2400      	movs	r4, #0
    1886:	f855 3b04 	ldr.w	r3, [r5], #4
    188a:	3401      	adds	r4, #1
    188c:	4798      	blx	r3
    188e:	42a6      	cmp	r6, r4
    1890:	d1f9      	bne.n	1886 <__libc_init_array+0xe>
    1892:	4e09      	ldr	r6, [pc, #36]	; (18b8 <__libc_init_array+0x40>)
    1894:	4d09      	ldr	r5, [pc, #36]	; (18bc <__libc_init_array+0x44>)
    1896:	1b76      	subs	r6, r6, r5
    1898:	f000 f812 	bl	18c0 <___init_veneer>
    189c:	10b6      	asrs	r6, r6, #2
    189e:	d006      	beq.n	18ae <__libc_init_array+0x36>
    18a0:	2400      	movs	r4, #0
    18a2:	f855 3b04 	ldr.w	r3, [r5], #4
    18a6:	3401      	adds	r4, #1
    18a8:	4798      	blx	r3
    18aa:	42a6      	cmp	r6, r4
    18ac:	d1f9      	bne.n	18a2 <__libc_init_array+0x2a>
    18ae:	bd70      	pop	{r4, r5, r6, pc}
    18b0:	60001af0 	.word	0x60001af0
    18b4:	60001af0 	.word	0x60001af0
    18b8:	60001af4 	.word	0x60001af4
    18bc:	60001af0 	.word	0x60001af0

000018c0 <___init_veneer>:
    18c0:	f85f f000 	ldr.w	pc, [pc]	; 18c4 <___init_veneer+0x4>
    18c4:	60001aad 	.word	0x60001aad

000018c8 <___reboot_Teensyduino__veneer>:
    18c8:	f85f f000 	ldr.w	pc, [pc]	; 18cc <___reboot_Teensyduino__veneer+0x4>
    18cc:	60001a05 	.word	0x60001a05

Disassembly of section .fini:

000018d0 <_fini>:
    18d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d2:	bf00      	nop
