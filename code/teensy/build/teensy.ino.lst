
/home/adev/dev/bsense/code/teensy/build/teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ac0 	.word	0x20000ac0
6000142c:	20000fe0 	.word	0x20000fe0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fab5 	bl	60001ad0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa9a 	bl	60001ae8 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa6f 	bl	60001ab8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa71 	bl	60001ac0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00002958 	.word	0x00002958
600015ec:	60001c04 	.word	0x60001c04
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ac0 	.word	0x20000ac0
600015f8:	60004560 	.word	0x60004560
600015fc:	20000000 	.word	0x20000000
60001600:	20000800 	.word	0x20000800
60001604:	00000c09 	.word	0x00000c09
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00001fdd 	.word	0x00001fdd
60001618:	20000f7c 	.word	0x20000f7c
6000161c:	00001fe1 	.word	0x00001fe1
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20000f80 	.word	0x20000f80
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20000fe0 	.word	0x20000fe0
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20000f6c 	.word	0x20000f6c
60001900:	20000f68 	.word	0x20000f68
60001904:	20000f70 	.word	0x20000f70
60001908:	20000f74 	.word	0x20000f74
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000800 	.word	0x20000800
60001918:	00000d95 	.word	0x00000d95

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8cc 	bl	60001ac8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f8a5 	bl	60001ad8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f899 	bl	60001ae0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000800 	.word	0x20000800
60001a00:	00000f7d 	.word	0x00000f7d

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	20000fad 	.word	0x20000fad

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <____libc_init_array_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <____libc_init_array_veneer+0x4>
60001abc:	00002865 	.word	0x00002865

60001ac0 <__main_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__main_veneer+0x4>
60001ac4:	00000909 	.word	0x00000909

60001ac8 <__usb_init_serialnumber_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__usb_init_serialnumber_veneer+0x4>
60001acc:	000016ed 	.word	0x000016ed

60001ad0 <__set_arm_clock_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__set_arm_clock_veneer+0x4>
60001ad4:	00002001 	.word	0x00002001

60001ad8 <__delay_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__delay_veneer+0x4>
60001adc:	00000749 	.word	0x00000749

60001ae0 <__memset_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__memset_veneer+0x4>
60001ae4:	000027b5 	.word	0x000027b5

60001ae8 <__pwm_init_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__pwm_init_veneer+0x4>
60001aec:	00000b15 	.word	0x00000b15

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000045 000004dd 0000071d              E...........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
void buzzer(int amp, bool dir) // set the buzzer amplitude and tone
{
    analogWrite(PIN_BUZZER_AMP, amp*4);
    digitalWrite(PIN_BUZZER_TONE, dir);
    buzz_state = amp;
}
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x14>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x18>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x12>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1c>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x12>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ac0 	.word	0x20000ac0
      3c:	20000ac0 	.word	0x20000ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20000f18 	.word	0x20000f18
      64:	60006000 	.word	0x60006000

00000068 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
      68:	6803      	ldr	r3, [r0, #0]
      6a:	4718      	bx	r3

0000006c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
      6c:	680b      	ldr	r3, [r1, #0]
      6e:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
      70:	4770      	bx	lr
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
      72:	bf00      	nop

00000074 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
      74:	680b      	ldr	r3, [r1, #0]
      76:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
      78:	4770      	bx	lr
			event.triggerEvent(0, timer);
      7a:	bf00      	nop

0000007c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
      7c:	4770      	bx	lr
      7e:	bf00      	nop

00000080 <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      80:	b510      	push	{r4, lr}
      82:	4604      	mov	r4, r0
		end();
      84:	f000 fb12 	bl	6ac <IntervalTimer::end()>
	}
      88:	4620      	mov	r0, r4
      8a:	bd10      	pop	{r4, pc}

0000008c <TimerHandler()>:
			break;
      8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      8e:	4d40      	ldr	r5, [pc, #256]	; (190 <TimerHandler()+0x104>)
      90:	f000 fbae 	bl	7f0 <micros>
	if(!(ch & 0x80)) {
      94:	4c3f      	ldr	r4, [pc, #252]	; (194 <TimerHandler()+0x108>)
      96:	782b      	ldrb	r3, [r5, #0]
	if (pin > sizeof(pin_to_channel)) return 0;
      98:	6020      	str	r0, [r4, #0]
}
      9a:	b173      	cbz	r3, ba <TimerHandler()+0x2e>
      9c:	4b3e      	ldr	r3, [pc, #248]	; (198 <TimerHandler()+0x10c>)
      9e:	681b      	ldr	r3, [r3, #0]
      a0:	4298      	cmp	r0, r3
      a2:	d94e      	bls.n	142 <TimerHandler()+0xb6>
      a4:	2100      	movs	r1, #0
      a6:	4608      	mov	r0, r1
      a8:	f000 fc90 	bl	9cc <analogWrite>
      ac:	2001      	movs	r0, #1
      ae:	2100      	movs	r1, #0
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      b0:	f000 fbc8 	bl	844 <digitalWrite>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b4:	2300      	movs	r3, #0
      b6:	6820      	ldr	r0, [r4, #0]
      b8:	702b      	strb	r3, [r5, #0]
      ba:	4b38      	ldr	r3, [pc, #224]	; (19c <TimerHandler()+0x110>)
      bc:	681b      	ldr	r3, [r3, #0]
      be:	4283      	cmp	r3, r0
      c0:	d203      	bcs.n	ca <TimerHandler()+0x3e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	4d37      	ldr	r5, [pc, #220]	; (1a0 <TimerHandler()+0x114>)
      c4:	782b      	ldrb	r3, [r5, #0]
      c6:	2b00      	cmp	r3, #0
      c8:	d155      	bne.n	176 <TimerHandler()+0xea>
      ca:	4e36      	ldr	r6, [pc, #216]	; (1a4 <TimerHandler()+0x118>)
      cc:	7833      	ldrb	r3, [r6, #0]
      ce:	b173      	cbz	r3, ee <TimerHandler()+0x62>
}
      d0:	4b35      	ldr	r3, [pc, #212]	; (1a8 <TimerHandler()+0x11c>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	681d      	ldr	r5, [r3, #0]
      d4:	4285      	cmp	r5, r0
      d6:	d20f      	bcs.n	f8 <TimerHandler()+0x6c>
      d8:	2100      	movs	r1, #0
      da:	2003      	movs	r0, #3
    analogWrite(PIN_BUZZER_AMP, amp*4);
      dc:	f000 fc76 	bl	9cc <analogWrite>
    digitalWrite(PIN_BUZZER_TONE, dir);
      e0:	2004      	movs	r0, #4
      e2:	2100      	movs	r1, #0
      e4:	f000 fbae 	bl	844 <digitalWrite>
    buzz_state = amp;
      e8:	2300      	movs	r3, #0
    if (t_us > delay_trig)
      ea:	6820      	ldr	r0, [r4, #0]
    buzz_state = amp;
      ec:	7033      	strb	r3, [r6, #0]
    if (t_us > delay_trig)
      ee:	4b2f      	ldr	r3, [pc, #188]	; (1ac <TimerHandler()+0x120>)
      f0:	681b      	ldr	r3, [r3, #0]
      f2:	4283      	cmp	r3, r0
      f4:	d31b      	bcc.n	12e <TimerHandler()+0xa2>
}
      f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bool dir = ((t_us - delay_us_buzz) / (periodBuzz / 2)) % 2; // toggle direction every half period
      f8:	4b2d      	ldr	r3, [pc, #180]	; (1b0 <TimerHandler()+0x124>)
      fa:	1b45      	subs	r5, r0, r5
    analogWrite(PIN_BUZZER_AMP, amp*4);
      fc:	2003      	movs	r0, #3
            bool dir = ((t_us - delay_us_buzz) / (periodBuzz / 2)) % 2; // toggle direction every half period
      fe:	781b      	ldrb	r3, [r3, #0]
     100:	085b      	lsrs	r3, r3, #1
     102:	fbb5 f5f3 	udiv	r5, r5, r3
            buzzer(ampBuzz, dir); // set the buzzer amplitude and tone
     106:	4b2b      	ldr	r3, [pc, #172]	; (1b4 <TimerHandler()+0x128>)
            bool dir = ((t_us - delay_us_buzz) / (periodBuzz / 2)) % 2; // toggle direction every half period
     108:	f005 0501 	and.w	r5, r5, #1
            buzzer(ampBuzz, dir); // set the buzzer amplitude and tone
     10c:	781f      	ldrb	r7, [r3, #0]
    analogWrite(PIN_BUZZER_AMP, amp*4);
     10e:	00b9      	lsls	r1, r7, #2
     110:	f000 fc5c 	bl	9cc <analogWrite>
    digitalWrite(PIN_BUZZER_TONE, dir);
     114:	2004      	movs	r0, #4
     116:	4629      	mov	r1, r5
     118:	f000 fb94 	bl	844 <digitalWrite>
    if (t_us > delay_trig)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <TimerHandler()+0x120>)
    buzz_state = amp;
     11e:	3f00      	subs	r7, #0
    if (t_us > delay_trig)
     120:	6820      	ldr	r0, [r4, #0]
     122:	681b      	ldr	r3, [r3, #0]
    buzz_state = amp;
     124:	bf18      	it	ne
     126:	2701      	movne	r7, #1
    if (t_us > delay_trig)
     128:	4283      	cmp	r3, r0
    buzz_state = amp;
     12a:	7037      	strb	r7, [r6, #0]
    if (t_us > delay_trig)
     12c:	d2e3      	bcs.n	f6 <TimerHandler()+0x6a>

void trigger_pulse(bool state) // trigger a pulse on the trigger pin
{
    digitalWrite(PIN_TRIG, state);
     12e:	2100      	movs	r1, #0
     130:	200c      	movs	r0, #12
     132:	f000 fb87 	bl	844 <digitalWrite>
    digitalWrite(LED_BUILTIN, state);
     136:	2100      	movs	r1, #0
     138:	200d      	movs	r0, #13
}
     13a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(LED_BUILTIN, state);
     13e:	f000 bb81 	b.w	844 <digitalWrite>
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
     142:	1ac0      	subs	r0, r0, r3
     144:	4b1c      	ldr	r3, [pc, #112]	; (1b8 <TimerHandler()+0x12c>)
     146:	2100      	movs	r1, #0
     148:	e9d3 2300 	ldrd	r2, r3, [r3]
     14c:	0852      	lsrs	r2, r2, #1
     14e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
     152:	085b      	lsrs	r3, r3, #1
     154:	f002 f9b0 	bl	24b8 <__aeabi_uldivmod>
            vib1(ampVib1, dir);                                         // set the vibration1 amplitude and direction
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <TimerHandler()+0x130>)
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
     15a:	4605      	mov	r5, r0
    analogWrite(PIN_VIB1_PWM, amp * 4);
     15c:	2000      	movs	r0, #0
     15e:	7819      	ldrb	r1, [r3, #0]
            bool dir = ((t_us - delay_us_vib1) / (periodVib1 / 2)) % 2; // toggle direction every half period
     160:	f005 0501 	and.w	r5, r5, #1
    analogWrite(PIN_VIB1_PWM, amp * 4);
     164:	0089      	lsls	r1, r1, #2
     166:	f000 fc31 	bl	9cc <analogWrite>
    digitalWrite(PIN_VIB1_PH, dir);
     16a:	2001      	movs	r0, #1
     16c:	4629      	mov	r1, r5
     16e:	f000 fb69 	bl	844 <digitalWrite>
    if (t_us > delay_us_vib2 && vib2_state)
     172:	6820      	ldr	r0, [r4, #0]
}
     174:	e7a1      	b.n	ba <TimerHandler()+0x2e>
    analogWrite(PIN_VIB2_PWM, amp);
     176:	2100      	movs	r1, #0
     178:	2002      	movs	r0, #2
     17a:	f000 fc27 	bl	9cc <analogWrite>
    digitalWrite(PIN_VIB2_PH, false);
     17e:	2003      	movs	r0, #3
     180:	2100      	movs	r1, #0
     182:	f000 fb5f 	bl	844 <digitalWrite>
    vib2_state = amp;
     186:	2300      	movs	r3, #0
        if (t_us > delay_us_buzz)
     188:	6820      	ldr	r0, [r4, #0]
    vib2_state = amp;
     18a:	702b      	strb	r3, [r5, #0]
}
     18c:	e79d      	b.n	ca <TimerHandler()+0x3e>
     18e:	bf00      	nop
     190:	20000fbb 	.word	0x20000fbb
     194:	20000f88 	.word	0x20000f88
     198:	20000efc 	.word	0x20000efc
     19c:	20000f00 	.word	0x20000f00
     1a0:	20000fbc 	.word	0x20000fbc
     1a4:	20000fac 	.word	0x20000fac
     1a8:	20000ef8 	.word	0x20000ef8
     1ac:	20000ef4 	.word	0x20000ef4
     1b0:	20000faf 	.word	0x20000faf
     1b4:	20000fa9 	.word	0x20000fa9
     1b8:	20000ce8 	.word	0x20000ce8
     1bc:	20000faa 	.word	0x20000faa

000001c0 <setup>:
}

void setup()
{
     1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Initialize pins
    pinMode(PIN_TRIG, OUTPUT);
     1c4:	2101      	movs	r1, #1
{
     1c6:	b08d      	sub	sp, #52	; 0x34
    pinMode(PIN_TRIG, OUTPUT);
     1c8:	200c      	movs	r0, #12
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     1ca:	4d32      	ldr	r5, [pc, #200]	; (294 <setup+0xd4>)
     1cc:	f000 fb64 	bl	898 <pinMode>
    pinMode(PIN_VIB1_PWM, OUTPUT);
     1d0:	2101      	movs	r1, #1
     1d2:	2000      	movs	r0, #0
     1d4:	4c30      	ldr	r4, [pc, #192]	; (298 <setup+0xd8>)
     1d6:	f000 fb5f 	bl	898 <pinMode>
    pinMode(PIN_VIB1_PH, OUTPUT);
     1da:	2101      	movs	r1, #1
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1dc:	4f2f      	ldr	r7, [pc, #188]	; (29c <setup+0xdc>)
				if (elapsed > 750) break;
     1de:	f240 28ee 	movw	r8, #750	; 0x2ee
     1e2:	4608      	mov	r0, r1
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1e4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2ac <setup+0xec>
     1e8:	f000 fb56 	bl	898 <pinMode>

    pinMode(PIN_VIB2_PWM, OUTPUT);
     1ec:	2101      	movs	r1, #1
     1ee:	2002      	movs	r0, #2
     1f0:	f000 fb52 	bl	898 <pinMode>
    pinMode(PIN_VIB2_PH, OUTPUT);
     1f4:	2101      	movs	r1, #1
     1f6:	2003      	movs	r0, #3
     1f8:	f000 fb4e 	bl	898 <pinMode>

    pinMode(PIN_BUZZER_TONE, OUTPUT);
     1fc:	2101      	movs	r1, #1
     1fe:	2004      	movs	r0, #4
     200:	f000 fb4a 	bl	898 <pinMode>
    pinMode(PIN_BUZZER_AMP, OUTPUT);
     204:	2101      	movs	r1, #1
     206:	2003      	movs	r0, #3
     208:	f000 fb46 	bl	898 <pinMode>
    pinMode(LED_BUILTIN, OUTPUT);
     20c:	2101      	movs	r1, #1
     20e:	200d      	movs	r0, #13
     210:	f000 fb42 	bl	898 <pinMode>
    digitalWrite(PIN_BUZZER_AMP, HIGH);
     214:	2101      	movs	r1, #1
     216:	2003      	movs	r0, #3
     218:	f000 fb14 	bl	844 <digitalWrite>
		uint32_t millis_begin = systick_millis_count;
     21c:	682e      	ldr	r6, [r5, #0]
		yield();
     21e:	f001 fe4f 	bl	1ec0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     222:	7823      	ldrb	r3, [r4, #0]
     224:	b34b      	cbz	r3, 27a <setup+0xba>
     226:	783b      	ldrb	r3, [r7, #0]
     228:	07db      	lsls	r3, r3, #31
     22a:	d526      	bpl.n	27a <setup+0xba>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     22c:	682b      	ldr	r3, [r5, #0]
     22e:	f8d9 2000 	ldr.w	r2, [r9]
     232:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     234:	2b0e      	cmp	r3, #14
     236:	d920      	bls.n	27a <setup+0xba>

    // Initialize Serial communication and button pin
    Serial.begin(115200);
    delay(100);
     238:	2064      	movs	r0, #100	; 0x64
     23a:	f000 fa85 	bl	748 <delay>
    pinMode(LED_BUILTIN, OUTPUT);
     23e:	2101      	movs	r1, #1
     240:	200d      	movs	r0, #13
     242:	f000 fb29 	bl	898 <pinMode>
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
     246:	4b16      	ldr	r3, [pc, #88]	; (2a0 <setup+0xe0>)

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
     248:	4a16      	ldr	r2, [pc, #88]	; (2a4 <setup+0xe4>)
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
     24a:	a902      	add	r1, sp, #8
     24c:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
     24e:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
     250:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
     252:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
     254:	f7ff ff0a 	bl	6c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
     258:	f645 52bf 	movw	r2, #23999	; 0x5dbf
     25c:	a906      	add	r1, sp, #24
     25e:	4812      	ldr	r0, [pc, #72]	; (2a8 <setup+0xe8>)
     260:	f000 f9a2 	bl	5a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     264:	9b06      	ldr	r3, [sp, #24]
     266:	a808      	add	r0, sp, #32
     268:	68db      	ldr	r3, [r3, #12]
     26a:	4798      	blx	r3
     26c:	9b00      	ldr	r3, [sp, #0]
     26e:	a802      	add	r0, sp, #8
     270:	68db      	ldr	r3, [r3, #12]
     272:	4798      	blx	r3

    myTimer.begin(TimerHandler, TIMER_INTERVAL_US); // start the timer with the handler and interval
}
     274:	b00d      	add	sp, #52	; 0x34
     276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     27a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     27c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     27e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     280:	b12a      	cbz	r2, 28e <setup+0xce>
				if (elapsed > 2000) break;
     282:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     286:	d8d7      	bhi.n	238 <setup+0x78>
			yield();
     288:	f001 fe1a 	bl	1ec0 <yield>
     28c:	e7c7      	b.n	21e <setup+0x5e>
				if (elapsed > 750) break;
     28e:	4543      	cmp	r3, r8
     290:	d9fa      	bls.n	288 <setup+0xc8>
     292:	e7d1      	b.n	238 <setup+0x78>
     294:	20000f80 	.word	0x20000f80
     298:	20000fb8 	.word	0x20000fb8
     29c:	20000fb7 	.word	0x20000fb7
     2a0:	200002b8 	.word	0x200002b8
     2a4:	0000008d 	.word	0x0000008d
     2a8:	200006e0 	.word	0x200006e0
     2ac:	20000f94 	.word	0x20000f94

000002b0 <loop>:

void loop()
{
     2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        virtual int available() { return usb_serial_available(); }
     2b4:	f001 fd1c 	bl	1cf0 <usb_serial_available>
    if (Serial.available() >= 3)
     2b8:	2802      	cmp	r0, #2
     2ba:	dc01      	bgt.n	2c0 <loop+0x10>
            default:
                break;
            }
        }
    }
     2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2c0:	4e73      	ldr	r6, [pc, #460]	; (490 <loop+0x1e0>)
	// Read up to length bytes into a buffer.  readBytes() will wait up to
	// the number of milliseconds configured by setTimeout().  The return value
	// is the number of bytes actually read, which may be zero if your PC
	// does not send anything.  To read without waiting, configure setTimeout(0).
	size_t readBytes(char *buffer, size_t length) {
		size_t count=0;
     2c2:	2400      	movs	r4, #0
     2c4:	4d73      	ldr	r5, [pc, #460]	; (494 <loop+0x1e4>)
		unsigned long startMillis = millis();
		do {
			count += usb_serial_read(buffer + count, length - count);
			if (count >= length) return count;
		} while(millis() - startMillis < _timeout);
     2c6:	f8df 820c 	ldr.w	r8, [pc, #524]	; 4d4 <loop+0x224>
     2ca:	6837      	ldr	r7, [r6, #0]
     2cc:	e005      	b.n	2da <loop+0x2a>
     2ce:	6833      	ldr	r3, [r6, #0]
     2d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
     2d4:	1bdb      	subs	r3, r3, r7
     2d6:	4293      	cmp	r3, r2
     2d8:	d26e      	bcs.n	3b8 <loop+0x108>
			count += usb_serial_read(buffer + count, length - count);
     2da:	f1c4 0103 	rsb	r1, r4, #3
     2de:	1928      	adds	r0, r5, r4
     2e0:	f001 fc74 	bl	1bcc <usb_serial_read>
     2e4:	4404      	add	r4, r0
			if (count >= length) return count;
     2e6:	2c02      	cmp	r4, #2
     2e8:	d9f1      	bls.n	2ce <loop+0x1e>
        if (buff[0] == STARTING_CHAR)
     2ea:	782b      	ldrb	r3, [r5, #0]
     2ec:	2baa      	cmp	r3, #170	; 0xaa
     2ee:	d1e5      	bne.n	2bc <loop+0xc>
            source = buff[1];                     // read what type of stimulus is {v: vibration1, w: vibration2, b: buzzer}
     2f0:	786b      	ldrb	r3, [r5, #1]
		size_t count=0;
     2f2:	2400      	movs	r4, #0
     2f4:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 4d8 <loop+0x228>
            len = buff[2];                        // read the length of the message
     2f8:	78af      	ldrb	r7, [r5, #2]
            source = buff[1];                     // read what type of stimulus is {v: vibration1, w: vibration2, b: buzzer}
     2fa:	f889 3000 	strb.w	r3, [r9]
            len = buff[2];                        // read the length of the message
     2fe:	4b66      	ldr	r3, [pc, #408]	; (498 <loop+0x1e8>)
     300:	f8d6 8000 	ldr.w	r8, [r6]
		} while(millis() - startMillis < _timeout);
     304:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 4d4 <loop+0x224>
     308:	701f      	strb	r7, [r3, #0]
     30a:	e007      	b.n	31c <loop+0x6c>
     30c:	6833      	ldr	r3, [r6, #0]
     30e:	f8da 2008 	ldr.w	r2, [sl, #8]
     312:	eba3 0308 	sub.w	r3, r3, r8
     316:	4293      	cmp	r3, r2
     318:	f080 80b6 	bcs.w	488 <loop+0x1d8>
			count += usb_serial_read(buffer + count, length - count);
     31c:	1b39      	subs	r1, r7, r4
     31e:	1928      	adds	r0, r5, r4
     320:	f001 fc54 	bl	1bcc <usb_serial_read>
     324:	4404      	add	r4, r0
			if (count >= length) return count;
     326:	42a7      	cmp	r7, r4
     328:	d8f0      	bhi.n	30c <loop+0x5c>
            micros_time = micros();               // get the current time
     32a:	4c5c      	ldr	r4, [pc, #368]	; (49c <loop+0x1ec>)
     32c:	f000 fa60 	bl	7f0 <micros>
    digitalWrite(PIN_TRIG, state);
     330:	2101      	movs	r1, #1
            micros_time = micros();               // get the current time
     332:	6020      	str	r0, [r4, #0]
    digitalWrite(PIN_TRIG, state);
     334:	200c      	movs	r0, #12
     336:	f000 fa85 	bl	844 <digitalWrite>
    digitalWrite(LED_BUILTIN, state);
     33a:	2101      	movs	r1, #1
     33c:	200d      	movs	r0, #13
     33e:	f000 fa81 	bl	844 <digitalWrite>
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     342:	6821      	ldr	r1, [r4, #0]
     344:	f241 3288 	movw	r2, #5000	; 0x1388
            switch (source)
     348:	f899 3000 	ldrb.w	r3, [r9]
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     34c:	4854      	ldr	r0, [pc, #336]	; (4a0 <loop+0x1f0>)
     34e:	440a      	add	r2, r1
            switch (source)
     350:	3b62      	subs	r3, #98	; 0x62
            delay_trig = micros_time + 5000;      // the trigger pulse is 5ms
     352:	6002      	str	r2, [r0, #0]
            switch (source)
     354:	2b15      	cmp	r3, #21
     356:	d8b1      	bhi.n	2bc <loop+0xc>
     358:	a201      	add	r2, pc, #4	; (adr r2, 360 <loop+0xb0>)
     35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     35e:	bf00      	nop
     360:	00000461 	.word	0x00000461
     364:	00000417 	.word	0x00000417
     368:	000002bd 	.word	0x000002bd
     36c:	000002bd 	.word	0x000002bd
     370:	000002bd 	.word	0x000002bd
     374:	000002bd 	.word	0x000002bd
     378:	000002bd 	.word	0x000002bd
     37c:	000002bd 	.word	0x000002bd
     380:	000002bd 	.word	0x000002bd
     384:	000002bd 	.word	0x000002bd
     388:	000002bd 	.word	0x000002bd
     38c:	000002bd 	.word	0x000002bd
     390:	000002bd 	.word	0x000002bd
     394:	000002bd 	.word	0x000002bd
     398:	000002bd 	.word	0x000002bd
     39c:	000002bd 	.word	0x000002bd
     3a0:	000002bd 	.word	0x000002bd
     3a4:	000002bd 	.word	0x000002bd
     3a8:	000002bd 	.word	0x000002bd
     3ac:	000002bd 	.word	0x000002bd
     3b0:	000003f5 	.word	0x000003f5
     3b4:	000003c9 	.word	0x000003c9
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
     3b8:	2301      	movs	r3, #1
     3ba:	f888 300c 	strb.w	r3, [r8, #12]
        if (buff[0] == STARTING_CHAR)
     3be:	782b      	ldrb	r3, [r5, #0]
     3c0:	2baa      	cmp	r3, #170	; 0xaa
     3c2:	f47f af7b 	bne.w	2bc <loop+0xc>
     3c6:	e793      	b.n	2f0 <loop+0x40>
                periodVib1 = 1000000 / ((uint32_t)buff[1]);                                    // calculate the period of the vibration2 in microseconds
     3c8:	786c      	ldrb	r4, [r5, #1]
     3ca:	4a36      	ldr	r2, [pc, #216]	; (4a4 <loop+0x1f4>)
     3cc:	4836      	ldr	r0, [pc, #216]	; (4a8 <loop+0x1f8>)
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3ce:	886b      	ldrh	r3, [r5, #2]
                ampVib2 = buff[0];                                                             // read the amplitude of the vibration2
     3d0:	782d      	ldrb	r5, [r5, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]);                                    // calculate the period of the vibration2 in microseconds
     3d2:	fbb2 f2f4 	udiv	r2, r2, r4
     3d6:	6002      	str	r2, [r0, #0]
                ampVib2 = buff[0];                                                             // read the amplitude of the vibration2
     3d8:	4a34      	ldr	r2, [pc, #208]	; (4ac <loop+0x1fc>)
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3da:	4c35      	ldr	r4, [pc, #212]	; (4b0 <loop+0x200>)
                ampVib2 = buff[0];                                                             // read the amplitude of the vibration2
     3dc:	7015      	strb	r5, [r2, #0]
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     3e2:	fb02 1303 	mla	r3, r2, r3, r1
                vib2_state = true;                                                             // update the state
     3e6:	4a33      	ldr	r2, [pc, #204]	; (4b4 <loop+0x204>)
                delay_us_vib2 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration2 pulse is 1000us*duration
     3e8:	6023      	str	r3, [r4, #0]
                vib2_state = true;                                                             // update the state
     3ea:	2101      	movs	r1, #1
                periodVib1 = 1000000 / ((uint32_t)buff[1]);                                    // calculate the period of the vibration2 in microseconds
     3ec:	2300      	movs	r3, #0
                vib2_state = true;                                                             // update the state
     3ee:	7011      	strb	r1, [r2, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]);                                    // calculate the period of the vibration2 in microseconds
     3f0:	6043      	str	r3, [r0, #4]
                break;
     3f2:	e763      	b.n	2bc <loop+0xc>
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3f4:	786c      	ldrb	r4, [r5, #1]
     3f6:	4a2b      	ldr	r2, [pc, #172]	; (4a4 <loop+0x1f4>)
     3f8:	482b      	ldr	r0, [pc, #172]	; (4a8 <loop+0x1f8>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     3fa:	886b      	ldrh	r3, [r5, #2]
                ampVib1 = buff[0];                          // read the amplitude of the vibration1
     3fc:	782d      	ldrb	r5, [r5, #0]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     3fe:	fbb2 f2f4 	udiv	r2, r2, r4
     402:	6002      	str	r2, [r0, #0]
                ampVib1 = buff[0];                          // read the amplitude of the vibration1
     404:	4a2c      	ldr	r2, [pc, #176]	; (4b8 <loop+0x208>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     406:	4c2d      	ldr	r4, [pc, #180]	; (4bc <loop+0x20c>)
                ampVib1 = buff[0];                          // read the amplitude of the vibration1
     408:	7015      	strb	r5, [r2, #0]
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000);
     40a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     40e:	fb02 1303 	mla	r3, r2, r3, r1
                vib1_state = true; // update the state
     412:	4a2b      	ldr	r2, [pc, #172]	; (4c0 <loop+0x210>)
     414:	e7e8      	b.n	3e8 <loop+0x138>
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     416:	786b      	ldrb	r3, [r5, #1]
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration1 pulse is 1000us*duration
     418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     41c:	4c21      	ldr	r4, [pc, #132]	; (4a4 <loop+0x1f4>)
     41e:	4e22      	ldr	r6, [pc, #136]	; (4a8 <loop+0x1f8>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration1 pulse is 1000us*duration
     420:	886a      	ldrh	r2, [r5, #2]
                ampVib1 = buff[0];                  // read the amplitude of the vibration1
     422:	4f25      	ldr	r7, [pc, #148]	; (4b8 <loop+0x208>)
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration1 pulse is 1000us*duration
     424:	fb00 1202 	mla	r2, r0, r2, r1
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     428:	fbb4 f3f3 	udiv	r3, r4, r3
     42c:	6033      	str	r3, [r6, #0]
                periodBuzz = 1000000 / ((uint32_t)buff[5]); // calculate the period of the buzzer in microseconds
     42e:	796b      	ldrb	r3, [r5, #5]
     430:	fbb4 f4f3 	udiv	r4, r4, r3
                delay_us_buzz = micros_time + *((uint16_t *)&buff[6]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     434:	88eb      	ldrh	r3, [r5, #6]
     436:	fb00 1303 	mla	r3, r0, r3, r1
                ampVib1 = buff[0];                  // read the amplitude of the vibration1
     43a:	7828      	ldrb	r0, [r5, #0]
                vib1_state = true;                  // update the state
     43c:	2101      	movs	r1, #1
                ampVib1 = buff[0];                  // read the amplitude of the vibration1
     43e:	7038      	strb	r0, [r7, #0]
                ampBuzz = buff[4];                  // read the amplitude of the buzzer
     440:	7928      	ldrb	r0, [r5, #4]
                periodVib1 = 1000000 / ((uint32_t)buff[1]); // calculate the period of the vibration1 in microseconds
     442:	2500      	movs	r5, #0
     444:	6075      	str	r5, [r6, #4]
                delay_us_vib1 = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the vibration1 pulse is 1000us*duration
     446:	4d1d      	ldr	r5, [pc, #116]	; (4bc <loop+0x20c>)
     448:	602a      	str	r2, [r5, #0]
                ampBuzz = buff[4];                  // read the amplitude of the buzzer
     44a:	4a1e      	ldr	r2, [pc, #120]	; (4c4 <loop+0x214>)
     44c:	7010      	strb	r0, [r2, #0]
                periodBuzz = 1000000 / ((uint32_t)buff[5]); // calculate the period of the buzzer in microseconds
     44e:	4a1e      	ldr	r2, [pc, #120]	; (4c8 <loop+0x218>)
                vib1_state = true;                  // update the state
     450:	481b      	ldr	r0, [pc, #108]	; (4c0 <loop+0x210>)
                periodBuzz = 1000000 / ((uint32_t)buff[5]); // calculate the period of the buzzer in microseconds
     452:	7014      	strb	r4, [r2, #0]
                delay_us_buzz = micros_time + *((uint16_t *)&buff[6]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     454:	4c1d      	ldr	r4, [pc, #116]	; (4cc <loop+0x21c>)
                buzz_state = true;                  // update the state
     456:	4a1e      	ldr	r2, [pc, #120]	; (4d0 <loop+0x220>)
                delay_us_buzz = micros_time + *((uint16_t *)&buff[6]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     458:	6023      	str	r3, [r4, #0]
                vib1_state = true;                  // update the state
     45a:	7001      	strb	r1, [r0, #0]
                buzz_state = true;                  // update the state
     45c:	7011      	strb	r1, [r2, #0]
     45e:	e72d      	b.n	2bc <loop+0xc>
                periodBuzz = 1000000 / ((uint32_t)buff[1]); // calculate the period of the buzzer in microseconds
     460:	786c      	ldrb	r4, [r5, #1]
     462:	4a10      	ldr	r2, [pc, #64]	; (4a4 <loop+0x1f4>)
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     464:	4817      	ldr	r0, [pc, #92]	; (4c4 <loop+0x214>)
                delay_us_buzz = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     466:	886b      	ldrh	r3, [r5, #2]
                periodBuzz = 1000000 / ((uint32_t)buff[1]); // calculate the period of the buzzer in microseconds
     468:	fbb2 f2f4 	udiv	r2, r2, r4
                ampBuzz = buff[0];                  // read the amplitude of the buzzer
     46c:	782c      	ldrb	r4, [r5, #0]
     46e:	7004      	strb	r4, [r0, #0]
                delay_us_buzz = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     470:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                periodBuzz = 1000000 / ((uint32_t)buff[1]); // calculate the period of the buzzer in microseconds
     474:	4814      	ldr	r0, [pc, #80]	; (4c8 <loop+0x218>)
                delay_us_buzz = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     476:	fb04 1303 	mla	r3, r4, r3, r1
                buzz_state = true; // update the state
     47a:	2101      	movs	r1, #1
                periodBuzz = 1000000 / ((uint32_t)buff[1]); // calculate the period of the buzzer in microseconds
     47c:	7002      	strb	r2, [r0, #0]
                delay_us_buzz = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     47e:	4813      	ldr	r0, [pc, #76]	; (4cc <loop+0x21c>)
                buzz_state = true; // update the state
     480:	4a13      	ldr	r2, [pc, #76]	; (4d0 <loop+0x220>)
                delay_us_buzz = micros_time + *((uint16_t *)&buff[2]) * ((unsigned long)1000); // the buzzer pulse is 1000us*duration
     482:	6003      	str	r3, [r0, #0]
                buzz_state = true; // update the state
     484:	7011      	strb	r1, [r2, #0]
                break;
     486:	e719      	b.n	2bc <loop+0xc>
     488:	2301      	movs	r3, #1
     48a:	f88a 300c 	strb.w	r3, [sl, #12]
		setReadError();
		return count;
     48e:	e74c      	b.n	32a <loop+0x7a>
     490:	20000f80 	.word	0x20000f80
     494:	20000eb4 	.word	0x20000eb4
     498:	20000fae 	.word	0x20000fae
     49c:	20000f14 	.word	0x20000f14
     4a0:	20000ef4 	.word	0x20000ef4
     4a4:	000f4240 	.word	0x000f4240
     4a8:	20000ce8 	.word	0x20000ce8
     4ac:	20000fab 	.word	0x20000fab
     4b0:	20000f00 	.word	0x20000f00
     4b4:	20000fbc 	.word	0x20000fbc
     4b8:	20000faa 	.word	0x20000faa
     4bc:	20000efc 	.word	0x20000efc
     4c0:	20000fbb 	.word	0x20000fbb
     4c4:	20000fa9 	.word	0x20000fa9
     4c8:	20000faf 	.word	0x20000faf
     4cc:	20000ef8 	.word	0x20000ef8
     4d0:	20000fac 	.word	0x20000fac
     4d4:	20000674 	.word	0x20000674
     4d8:	20000fb3 	.word	0x20000fb3

000004dc <_GLOBAL__sub_I_myTimer>:
IntervalTimer myTimer;
     4dc:	4a02      	ldr	r2, [pc, #8]	; (4e8 <_GLOBAL__sub_I_myTimer+0xc>)
     4de:	4903      	ldr	r1, [pc, #12]	; (4ec <_GLOBAL__sub_I_myTimer+0x10>)
     4e0:	4803      	ldr	r0, [pc, #12]	; (4f0 <_GLOBAL__sub_I_myTimer+0x14>)
     4e2:	f001 bfe3 	b.w	24ac <__aeabi_atexit>
     4e6:	bf00      	nop
     4e8:	2000068c 	.word	0x2000068c
     4ec:	00000081 	.word	0x00000081
     4f0:	200006e0 	.word	0x200006e0

000004f4 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop

000004fc <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop

00000500 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
     500:	4770      	bx	lr
     502:	bf00      	nop

00000504 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
     504:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
     506:	4c1a      	ldr	r4, [pc, #104]	; (570 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
     508:	4d1a      	ldr	r5, [pc, #104]	; (574 <pit_isr()+0x70>)
     50a:	6823      	ldr	r3, [r4, #0]
     50c:	42ab      	cmp	r3, r5
     50e:	d002      	beq.n	516 <pit_isr()+0x12>
     510:	4a19      	ldr	r2, [pc, #100]	; (578 <pit_isr()+0x74>)
     512:	68d1      	ldr	r1, [r2, #12]
     514:	bb29      	cbnz	r1, 562 <pit_isr()+0x5e>
     516:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
     518:	42ab      	cmp	r3, r5
     51a:	d002      	beq.n	522 <pit_isr()+0x1e>
     51c:	4a16      	ldr	r2, [pc, #88]	; (578 <pit_isr()+0x74>)
     51e:	69d1      	ldr	r1, [r2, #28]
     520:	b9c9      	cbnz	r1, 556 <pit_isr()+0x52>
     522:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
     524:	42ab      	cmp	r3, r5
     526:	d002      	beq.n	52e <pit_isr()+0x2a>
     528:	4a13      	ldr	r2, [pc, #76]	; (578 <pit_isr()+0x74>)
     52a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     52c:	b969      	cbnz	r1, 54a <pit_isr()+0x46>
     52e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
     530:	42ab      	cmp	r3, r5
     532:	d009      	beq.n	548 <pit_isr()+0x44>
     534:	4a10      	ldr	r2, [pc, #64]	; (578 <pit_isr()+0x74>)
     536:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
     538:	b131      	cbz	r1, 548 <pit_isr()+0x44>
     53a:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	480f      	ldr	r0, [pc, #60]	; (57c <pit_isr()+0x78>)
     540:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
     542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     546:	4718      	bx	r3
     548:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
     54a:	2101      	movs	r1, #1
     54c:	681b      	ldr	r3, [r3, #0]
     54e:	480c      	ldr	r0, [pc, #48]	; (580 <pit_isr()+0x7c>)
     550:	62d1      	str	r1, [r2, #44]	; 0x2c
     552:	4798      	blx	r3
        );
     554:	e7eb      	b.n	52e <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
     556:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     558:	681b      	ldr	r3, [r3, #0]
     55a:	480a      	ldr	r0, [pc, #40]	; (584 <pit_isr()+0x80>)
     55c:	61d1      	str	r1, [r2, #28]
     55e:	4798      	blx	r3
        );
     560:	e7df      	b.n	522 <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
     562:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
     564:	681b      	ldr	r3, [r3, #0]
     566:	f104 0008 	add.w	r0, r4, #8
     56a:	60d1      	str	r1, [r2, #12]
     56c:	4798      	blx	r3
        );
     56e:	e7d2      	b.n	516 <pit_isr()+0x12>
     570:	20000ac0 	.word	0x20000ac0
     574:	20000280 	.word	0x20000280
     578:	40084100 	.word	0x40084100
     57c:	20000b10 	.word	0x20000b10
     580:	20000af8 	.word	0x20000af8
     584:	20000ae0 	.word	0x20000ae0

00000588 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     588:	b538      	push	{r3, r4, r5, lr}
     58a:	4c06      	ldr	r4, [pc, #24]	; (5a4 <__tcf_0+0x1c>)
     58c:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     590:	f854 3c08 	ldr.w	r3, [r4, #-8]
     594:	4620      	mov	r0, r4
     596:	3c18      	subs	r4, #24
     598:	68db      	ldr	r3, [r3, #12]
     59a:	4798      	blx	r3
     59c:	42ac      	cmp	r4, r5
     59e:	d1f7      	bne.n	590 <__tcf_0+0x8>
     5a0:	bd38      	pop	{r3, r4, r5, pc}
     5a2:	bf00      	nop
     5a4:	20000b10 	.word	0x20000b10

000005a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
     5a8:	6803      	ldr	r3, [r0, #0]
{
     5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5ae:	4604      	mov	r4, r0
     5b0:	b088      	sub	sp, #32
     5b2:	4617      	mov	r7, r2
	if (channel) {
     5b4:	2b00      	cmp	r3, #0
     5b6:	d04b      	beq.n	650 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
     5b8:	2200      	movs	r2, #0
     5ba:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
     5bc:	2201      	movs	r2, #1
     5be:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
     5c0:	4d30      	ldr	r5, [pc, #192]	; (684 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
     5c2:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5c4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 6a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
     5c8:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
     5ca:	f851 3b08 	ldr.w	r3, [r1], #8
     5ce:	112d      	asrs	r5, r5, #4
     5d0:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
     5d2:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5d4:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
     5d8:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5da:	00f6      	lsls	r6, r6, #3
     5dc:	f106 0008 	add.w	r0, r6, #8
     5e0:	f858 3006 	ldr.w	r3, [r8, r6]
     5e4:	4440      	add	r0, r8
     5e6:	68db      	ldr	r3, [r3, #12]
     5e8:	9001      	str	r0, [sp, #4]
     5ea:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
     5ec:	4a26      	ldr	r2, [pc, #152]	; (688 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
     5ee:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
     5f0:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
     5f4:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
     5f6:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
     5fa:	689b      	ldr	r3, [r3, #8]
     5fc:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     5fe:	9b02      	ldr	r3, [sp, #8]
     600:	a804      	add	r0, sp, #16
     602:	68db      	ldr	r3, [r3, #12]
     604:	4798      	blx	r3
	channel->LDVAL = cycles;
     606:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
     608:	2203      	movs	r2, #3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     60a:	4820      	ldr	r0, [pc, #128]	; (68c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
     60c:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
     60e:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
     610:	4a1f      	ldr	r2, [pc, #124]	; (690 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
     612:	7923      	ldrb	r3, [r4, #4]
     614:	4c1f      	ldr	r4, [pc, #124]	; (694 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
     616:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     618:	7813      	ldrb	r3, [r2, #0]
     61a:	7851      	ldrb	r1, [r2, #1]
     61c:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
     620:	428b      	cmp	r3, r1
     622:	bf28      	it	cs
     624:	460b      	movcs	r3, r1
     626:	7891      	ldrb	r1, [r2, #2]
     628:	78d2      	ldrb	r2, [r2, #3]
     62a:	428b      	cmp	r3, r1
     62c:	bf28      	it	cs
     62e:	460b      	movcs	r3, r1
     630:	4293      	cmp	r3, r2
     632:	bf28      	it	cs
     634:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     636:	4c18      	ldr	r4, [pc, #96]	; (698 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
     638:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     63c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
     640:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     642:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
     646:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
     64a:	b008      	add	sp, #32
     64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     650:	4a12      	ldr	r2, [pc, #72]	; (69c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
     652:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
     654:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     658:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
     65a:	2201      	movs	r2, #1
     65c:	4b10      	ldr	r3, [pc, #64]	; (6a0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
     65e:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
     660:	4a10      	ldr	r2, [pc, #64]	; (6a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
     662:	4613      	mov	r3, r2
     664:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
     666:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
     668:	6898      	ldr	r0, [r3, #8]
     66a:	2800      	cmp	r0, #0
     66c:	d0a8      	beq.n	5c0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
     66e:	3310      	adds	r3, #16
     670:	4293      	cmp	r3, r2
     672:	6023      	str	r3, [r4, #0]
     674:	d1f8      	bne.n	668 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
     676:	2300      	movs	r3, #0
				return false;
     678:	4618      	mov	r0, r3
				channel = NULL;
     67a:	6023      	str	r3, [r4, #0]
}
     67c:	b008      	add	sp, #32
     67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     682:	bf00      	nop
     684:	bff7bf00 	.word	0xbff7bf00
     688:	20000280 	.word	0x20000280
     68c:	20000800 	.word	0x20000800
     690:	20000684 	.word	0x20000684
     694:	00000505 	.word	0x00000505
     698:	e000e400 	.word	0xe000e400
     69c:	400fc000 	.word	0x400fc000
     6a0:	40084000 	.word	0x40084000
     6a4:	40084100 	.word	0x40084100
     6a8:	20000ac0 	.word	0x20000ac0

000006ac <IntervalTimer::end()>:
void IntervalTimer::end() {
     6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
     6ae:	6803      	ldr	r3, [r0, #0]
     6b0:	b343      	cbz	r3, 704 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
     6b2:	4c15      	ldr	r4, [pc, #84]	; (708 <IntervalTimer::end()+0x5c>)
     6b4:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
     6b6:	4e15      	ldr	r6, [pc, #84]	; (70c <IntervalTimer::end()+0x60>)
     6b8:	441c      	add	r4, r3
     6ba:	1124      	asrs	r4, r4, #4
     6bc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
     6c0:	00ed      	lsls	r5, r5, #3
     6c2:	5973      	ldr	r3, [r6, r5]
     6c4:	f105 0008 	add.w	r0, r5, #8
     6c8:	68db      	ldr	r3, [r3, #12]
     6ca:	4430      	add	r0, r6
     6cc:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
     6ce:	4b10      	ldr	r3, [pc, #64]	; (710 <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
     6d0:	2100      	movs	r1, #0
		channel->TFLG = 1;
     6d2:	2201      	movs	r2, #1
     6d4:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
     6d6:	683b      	ldr	r3, [r7, #0]
     6d8:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
     6da:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
     6dc:	23ff      	movs	r3, #255	; 0xff
     6de:	4a0d      	ldr	r2, [pc, #52]	; (714 <IntervalTimer::end()+0x68>)
     6e0:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
     6e2:	7813      	ldrb	r3, [r2, #0]
     6e4:	7850      	ldrb	r0, [r2, #1]
     6e6:	7894      	ldrb	r4, [r2, #2]
     6e8:	4283      	cmp	r3, r0
     6ea:	bf28      	it	cs
     6ec:	4603      	movcs	r3, r0
     6ee:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
     6f0:	4a09      	ldr	r2, [pc, #36]	; (718 <IntervalTimer::end()+0x6c>)
     6f2:	42a3      	cmp	r3, r4
     6f4:	bf28      	it	cs
     6f6:	4623      	movcs	r3, r4
     6f8:	4283      	cmp	r3, r0
     6fa:	bf28      	it	cs
     6fc:	4603      	movcs	r3, r0
     6fe:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
     702:	6039      	str	r1, [r7, #0]
}
     704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     706:	bf00      	nop
     708:	bff7bf00 	.word	0xbff7bf00
     70c:	20000ac0 	.word	0x20000ac0
     710:	20000280 	.word	0x20000280
     714:	20000684 	.word	0x20000684
     718:	e000e400 	.word	0xe000e400

0000071c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
     71c:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     720:	2000      	movs	r0, #0
     722:	4c06      	ldr	r4, [pc, #24]	; (73c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
     724:	4a06      	ldr	r2, [pc, #24]	; (740 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
     726:	601c      	str	r4, [r3, #0]
     728:	619c      	str	r4, [r3, #24]
     72a:	631c      	str	r4, [r3, #48]	; 0x30
     72c:	649c      	str	r4, [r3, #72]	; 0x48
     72e:	4905      	ldr	r1, [pc, #20]	; (744 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
     730:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
     734:	f001 beba 	b.w	24ac <__aeabi_atexit>
     738:	20000ac0 	.word	0x20000ac0
     73c:	20000280 	.word	0x20000280
     740:	2000068c 	.word	0x2000068c
     744:	00000589 	.word	0x00000589

00000748 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     748:	b900      	cbnz	r0, 74c <delay+0x4>
     74a:	4770      	bx	lr
{
     74c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     750:	2101      	movs	r1, #1
     752:	4681      	mov	r9, r0
     754:	4c21      	ldr	r4, [pc, #132]	; (7dc <delay+0x94>)
     756:	4d22      	ldr	r5, [pc, #136]	; (7e0 <delay+0x98>)
     758:	4e22      	ldr	r6, [pc, #136]	; (7e4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     75a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     75e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     760:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     762:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     766:	2b00      	cmp	r3, #0
     768:	d1f7      	bne.n	75a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     76a:	491f      	ldr	r1, [pc, #124]	; (7e8 <delay+0xa0>)
     76c:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     76e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     772:	f8df a078 	ldr.w	sl, [pc, #120]	; 7ec <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     776:	1a1b      	subs	r3, r3, r0
     778:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     77a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     77e:	f8da 2000 	ldr.w	r2, [sl]
     782:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     786:	455a      	cmp	r2, fp
     788:	bf94      	ite	ls
     78a:	4490      	addls	r8, r2
     78c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     78e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     792:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     794:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     796:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     79a:	2b00      	cmp	r3, #0
     79c:	d1f7      	bne.n	78e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     79e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7a0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     7a4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     7a6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     7aa:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     7ae:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     7b2:	bf94      	ite	ls
     7b4:	4462      	addls	r2, ip
     7b6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     7ba:	eba2 0208 	sub.w	r2, r2, r8
     7be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     7c2:	d306      	bcc.n	7d2 <delay+0x8a>
			if (--msec == 0) return;
     7c4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     7c8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     7cc:	d1df      	bne.n	78e <delay+0x46>
}
     7ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     7d2:	f001 fb75 	bl	1ec0 <yield>
		while ((micros() - start) >= 1000) {
     7d6:	4904      	ldr	r1, [pc, #16]	; (7e8 <delay+0xa0>)
     7d8:	e7d9      	b.n	78e <delay+0x46>
     7da:	bf00      	nop
     7dc:	20000f84 	.word	0x20000f84
     7e0:	20000f80 	.word	0x20000f80
     7e4:	20000f7c 	.word	0x20000f7c
     7e8:	e0001000 	.word	0xe0001000
     7ec:	20000f78 	.word	0x20000f78

000007f0 <micros>:
{
     7f0:	b430      	push	{r4, r5}
     7f2:	4b0f      	ldr	r3, [pc, #60]	; (830 <micros+0x40>)
     7f4:	f04f 0c01 	mov.w	ip, #1
     7f8:	4d0e      	ldr	r5, [pc, #56]	; (834 <micros+0x44>)
     7fa:	4c0f      	ldr	r4, [pc, #60]	; (838 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     7fc:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
     800:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     802:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     804:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
     808:	2a00      	cmp	r2, #0
     80a:	d1f7      	bne.n	7fc <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     80c:	4b0b      	ldr	r3, [pc, #44]	; (83c <micros+0x4c>)
     80e:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     810:	4a0b      	ldr	r2, [pc, #44]	; (840 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
     812:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
     814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     818:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
     81a:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     81e:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
     822:	bc30      	pop	{r4, r5}
     824:	428a      	cmp	r2, r1
     826:	bf94      	ite	ls
     828:	1880      	addls	r0, r0, r2
     82a:	1840      	addhi	r0, r0, r1
     82c:	4770      	bx	lr
     82e:	bf00      	nop
     830:	20000f84 	.word	0x20000f84
     834:	20000f80 	.word	0x20000f80
     838:	20000f7c 	.word	0x20000f7c
     83c:	e0001000 	.word	0xe0001000
     840:	20000f78 	.word	0x20000f78

00000844 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     844:	2827      	cmp	r0, #39	; 0x27
     846:	d816      	bhi.n	876 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     848:	0102      	lsls	r2, r0, #4
     84a:	4b10      	ldr	r3, [pc, #64]	; (88c <digitalWrite+0x48>)
     84c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     850:	589b      	ldr	r3, [r3, r2]
{
     852:	b410      	push	{r4}
	mask = p->mask;
     854:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     856:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     858:	4214      	tst	r4, r2
     85a:	d005      	beq.n	868 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
     85c:	b961      	cbnz	r1, 878 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     85e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     866:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     868:	6883      	ldr	r3, [r0, #8]
		if (val) {
     86a:	b151      	cbz	r1, 882 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     86c:	4a08      	ldr	r2, [pc, #32]	; (890 <digitalWrite+0x4c>)
}
     86e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     872:	601a      	str	r2, [r3, #0]
}
     874:	4770      	bx	lr
     876:	4770      	bx	lr
     878:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     87c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     880:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     882:	4a04      	ldr	r2, [pc, #16]	; (894 <digitalWrite+0x50>)
}
     884:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     888:	601a      	str	r2, [r3, #0]
}
     88a:	4770      	bx	lr
     88c:	200002c8 	.word	0x200002c8
     890:	0001f038 	.word	0x0001f038
     894:	00013038 	.word	0x00013038

00000898 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     898:	2827      	cmp	r0, #39	; 0x27
     89a:	d829      	bhi.n	8f0 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     89c:	4b16      	ldr	r3, [pc, #88]	; (8f8 <pinMode+0x60>)
     89e:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     8a0:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     8a2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8a6:	589a      	ldr	r2, [r3, r2]
{
     8a8:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8aa:	6853      	ldr	r3, [r2, #4]
     8ac:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     8ae:	d00e      	beq.n	8ce <pinMode+0x36>
     8b0:	2904      	cmp	r1, #4
     8b2:	d00c      	beq.n	8ce <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     8b4:	ea23 0304 	bic.w	r3, r3, r4
     8b8:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8ba:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     8bc:	b1a9      	cbz	r1, 8ea <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     8be:	2902      	cmp	r1, #2
     8c0:	d017      	beq.n	8f2 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     8c2:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     8c4:	bf0c      	ite	eq
     8c6:	4a0d      	ldreq	r2, [pc, #52]	; (8fc <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     8c8:	4a0d      	ldrne	r2, [pc, #52]	; (900 <pinMode+0x68>)
     8ca:	601a      	str	r2, [r3, #0]
     8cc:	e007      	b.n	8de <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     8ce:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     8d0:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     8d2:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8d4:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     8d6:	d008      	beq.n	8ea <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     8d8:	f640 0238 	movw	r2, #2104	; 0x838
     8dc:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     8de:	6843      	ldr	r3, [r0, #4]
     8e0:	2215      	movs	r2, #21
}
     8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     8e6:	601a      	str	r2, [r3, #0]
}
     8e8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     8ea:	2238      	movs	r2, #56	; 0x38
     8ec:	601a      	str	r2, [r3, #0]
     8ee:	e7f6      	b.n	8de <pinMode+0x46>
     8f0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     8f2:	4a04      	ldr	r2, [pc, #16]	; (904 <pinMode+0x6c>)
     8f4:	601a      	str	r2, [r3, #0]
     8f6:	e7f2      	b.n	8de <pinMode+0x46>
     8f8:	200002c8 	.word	0x200002c8
     8fc:	00013038 	.word	0x00013038
     900:	00010038 	.word	0x00010038
     904:	0001f038 	.word	0x0001f038

00000908 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     908:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     90a:	f7ff fc59 	bl	1c0 <setup>
	while (1) {
		loop();
     90e:	f7ff fccf 	bl	2b0 <loop>
		yield();
     912:	f001 fad5 	bl	1ec0 <yield>
	while (1) {
     916:	e7fa      	b.n	90e <main+0x6>

00000918 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
     918:	f04f 0c01 	mov.w	ip, #1
     91c:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
     920:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     924:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
     928:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
     92a:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
     92e:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     932:	4c25      	ldr	r4, [pc, #148]	; (9c8 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
     934:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     938:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     93a:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     93c:	fb0e 3303 	mla	r3, lr, r3, r3
     940:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
     944:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     946:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
     94a:	4573      	cmp	r3, lr
     94c:	b2a4      	uxth	r4, r4
     94e:	bf28      	it	cs
     950:	4673      	movcs	r3, lr
     952:	4334      	orrs	r4, r6
	switch (channel) {
     954:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     956:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
     95a:	d00d      	beq.n	978 <flexpwmWrite+0x60>
     95c:	2a02      	cmp	r2, #2
     95e:	d028      	beq.n	9b2 <flexpwmWrite+0x9a>
     960:	b1c2      	cbz	r2, 994 <flexpwmWrite+0x7c>
     962:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     966:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
     96a:	fa1f fc8c 	uxth.w	ip, ip
     96e:	ea4c 0c02 	orr.w	ip, ip, r2
     972:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
     976:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
     978:	b29b      	uxth	r3, r3
     97a:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     97e:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
     980:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     982:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     986:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
     98a:	b29b      	uxth	r3, r3
     98c:	432b      	orrs	r3, r5
     98e:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
     992:	e7e8      	b.n	966 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
     994:	ebae 0e03 	sub.w	lr, lr, r3
     998:	f00c 020f 	and.w	r2, ip, #15
     99c:	fa1f fe8e 	uxth.w	lr, lr
     9a0:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
     9a4:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     9a8:	b29b      	uxth	r3, r3
     9aa:	4313      	orrs	r3, r2
     9ac:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
     9b0:	e7d9      	b.n	966 <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
     9b2:	b29b      	uxth	r3, r3
     9b4:	f00c 020f 	and.w	r2, ip, #15
     9b8:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
     9ba:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     9be:	b29b      	uxth	r3, r3
     9c0:	431e      	orrs	r6, r3
     9c2:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
     9c6:	e7ce      	b.n	966 <flexpwmWrite+0x4e>
     9c8:	200006fe 	.word	0x200006fe

000009cc <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
     9cc:	2827      	cmp	r0, #39	; 0x27
     9ce:	d84b      	bhi.n	a68 <analogWrite+0x9c>
{
     9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
     9d2:	4d2a      	ldr	r5, [pc, #168]	; (a7c <analogWrite+0xb0>)
     9d4:	4604      	mov	r4, r0
	if (info->type == 1) {
     9d6:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
     9da:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
     9de:	2a01      	cmp	r2, #1
     9e0:	d02d      	beq.n	a3e <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
     9e2:	2a02      	cmp	r2, #2
     9e4:	d13f      	bne.n	a66 <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     9e6:	786b      	ldrb	r3, [r5, #1]
     9e8:	f3c3 1001 	ubfx	r0, r3, #4, #2
     9ec:	2803      	cmp	r0, #3
     9ee:	d03e      	beq.n	a6e <analogWrite+0xa2>
     9f0:	4a23      	ldr	r2, [pc, #140]	; (a80 <analogWrite+0xb4>)
     9f2:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
     9f6:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     9fa:	4822      	ldr	r0, [pc, #136]	; (a84 <analogWrite+0xb8>)
     9fc:	b289      	uxth	r1, r1
     9fe:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     a00:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     a04:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     a06:	f8bc e006 	ldrh.w	lr, [ip, #6]
     a0a:	0158      	lsls	r0, r3, #5
     a0c:	f8bc 3010 	ldrh.w	r3, [ip, #16]
     a10:	fa1f fe8e 	uxth.w	lr, lr
     a14:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
     a18:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     a1c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
     a20:	fb0e f101 	mul.w	r1, lr, r1
     a24:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
     a26:	458e      	cmp	lr, r1
     a28:	d923      	bls.n	a72 <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
     a2a:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
     a2c:	f1c3 0301 	rsb	r3, r3, #1
     a30:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
     a32:	b289      	uxth	r1, r1
     a34:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
     a36:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
     a3a:	8211      	strh	r1, [r2, #16]
}
     a3c:	e00d      	b.n	a5a <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
     a3e:	786a      	ldrb	r2, [r5, #1]
     a40:	f3c2 1301 	ubfx	r3, r2, #4, #2
     a44:	2b03      	cmp	r3, #3
     a46:	d010      	beq.n	a6a <analogWrite+0x9e>
     a48:	480f      	ldr	r0, [pc, #60]	; (a88 <analogWrite+0xbc>)
     a4a:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
     a4e:	b28b      	uxth	r3, r1
     a50:	f002 0103 	and.w	r1, r2, #3
     a54:	78aa      	ldrb	r2, [r5, #2]
     a56:	f7ff ff5f 	bl	918 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
     a5a:	4b0c      	ldr	r3, [pc, #48]	; (a8c <analogWrite+0xc0>)
     a5c:	78ea      	ldrb	r2, [r5, #3]
     a5e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
     a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a68:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
     a6a:	4809      	ldr	r0, [pc, #36]	; (a90 <analogWrite+0xc4>)
     a6c:	e7ef      	b.n	a4e <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
     a6e:	4a09      	ldr	r2, [pc, #36]	; (a94 <analogWrite+0xc8>)
     a70:	e7c1      	b.n	9f6 <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
     a72:	1e99      	subs	r1, r3, #2
     a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
     a78:	e7db      	b.n	a32 <analogWrite+0x66>
     a7a:	bf00      	nop
     a7c:	20000548 	.word	0x20000548
     a80:	401dc000 	.word	0x401dc000
     a84:	200006fe 	.word	0x200006fe
     a88:	403dc000 	.word	0x403dc000
     a8c:	200002c8 	.word	0x200002c8
     a90:	403e8000 	.word	0x403e8000
     a94:	401e8000 	.word	0x401e8000

00000a98 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     a98:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
     a9a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     a9c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
     aa0:	4619      	mov	r1, r3
{
     aa2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     aa4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     aa8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     aac:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ab0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
     ab4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
     ab8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
     aba:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     abe:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     ac2:	b29b      	uxth	r3, r3
     ac4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     ac8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     acc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
     ad0:	3101      	adds	r1, #1
     ad2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
     ad6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     ad8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     ada:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     ade:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     ae0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     ae2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     ae4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     ae6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
     aea:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     aec:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     aee:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     af0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
     af2:	d1eb      	bne.n	acc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     af4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     af8:	b29b      	uxth	r3, r3
     afa:	f043 030f 	orr.w	r3, r3, #15
     afe:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     b02:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     b06:	b29b      	uxth	r3, r3
     b08:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     b0c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
     b10:	bd10      	pop	{r4, pc}
     b12:	bf00      	nop

00000b14 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b14:	4b37      	ldr	r3, [pc, #220]	; (bf4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b16:	4a38      	ldr	r2, [pc, #224]	; (bf8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b18:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
     b1a:	4838      	ldr	r0, [pc, #224]	; (bfc <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b1c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
     b20:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     b22:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b24:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b28:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b2c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b30:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     b34:	430a      	orrs	r2, r1
     b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
     b3a:	f7ff ffad 	bl	a98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
     b3e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b42:	f7ff ffa9 	bl	a98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
     b46:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b4a:	f7ff ffa5 	bl	a98 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
     b4e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
     b52:	f7ff ffa1 	bl	a98 <flexpwm_init>
	for (i=0; i < 4; i++) {
     b56:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     b58:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b5c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
     b60:	4611      	mov	r1, r2
     b62:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     b66:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     b6a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     b6c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     b6e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     b70:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b72:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b76:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b78:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     b7a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     b7e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b80:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     b82:	d1ee      	bne.n	b62 <pwm_init+0x4e>
     b84:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     b86:	481e      	ldr	r0, [pc, #120]	; (c00 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b88:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b8c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     b90:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b92:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b96:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     b9a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     b9e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     ba2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     ba4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     ba6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     ba8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     baa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     bae:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     bb0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     bb2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     bb6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     bb8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
     bba:	d1ee      	bne.n	b9a <pwm_init+0x86>
     bbc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
     bbe:	4811      	ldr	r0, [pc, #68]	; (c04 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     bc0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     bc2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
     bc6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     bc8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     bcc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
     bd0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
     bd4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
     bd8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     bda:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
     bdc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
     bde:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     be0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     be2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     be4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     be6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
     bea:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     bec:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
     bf0:	d1ee      	bne.n	bd0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     bf2:	bd70      	pop	{r4, r5, r6, pc}
     bf4:	400fc000 	.word	0x400fc000
     bf8:	fc030000 	.word	0xfc030000
     bfc:	403dc000 	.word	0x403dc000
     c00:	401e0000 	.word	0x401e0000
     c04:	401e4000 	.word	0x401e4000

00000c08 <unused_interrupt_vector>:
	__disable_irq();
     c08:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     c0a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     c0e:	4c52      	ldr	r4, [pc, #328]	; (d58 <unused_interrupt_vector+0x150>)
     c10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     c14:	f01e 0f04 	tst.w	lr, #4
     c18:	bf0c      	ite	eq
     c1a:	f3ef 8208 	mrseq	r2, MSP
     c1e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     c22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     c26:	4e4d      	ldr	r6, [pc, #308]	; (d5c <unused_interrupt_vector+0x154>)
	while (p < end) {
     c28:	4d4d      	ldr	r5, [pc, #308]	; (d60 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     c2a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     c2e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     c32:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     c36:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     c3a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     c3e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     c42:	6993      	ldr	r3, [r2, #24]
     c44:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     c48:	69d3      	ldr	r3, [r2, #28]
     c4a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
     c4e:	f000 f8a3 	bl	d98 <tempmonGetTemp>
     c52:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
     c56:	f001 fc17 	bl	2488 <rtc_get>
	info->len = sizeof(*info) / 4;
     c5a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
     c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
     c60:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
     c64:	460b      	mov	r3, r1
     c66:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     c6a:	493e      	ldr	r1, [pc, #248]	; (d64 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
     c6c:	1d30      	adds	r0, r6, #4
     c6e:	405a      	eors	r2, r3
     c70:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
     c72:	f002 0301 	and.w	r3, r2, #1
     c76:	3c01      	subs	r4, #1
     c78:	fb01 f303 	mul.w	r3, r1, r3
     c7c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
     c80:	d1f7      	bne.n	c72 <unused_interrupt_vector+0x6a>
	while (p < end) {
     c82:	42a8      	cmp	r0, r5
     c84:	d002      	beq.n	c8c <unused_interrupt_vector+0x84>
		crc ^= *p++;
     c86:	6873      	ldr	r3, [r6, #4]
     c88:	4606      	mov	r6, r0
     c8a:	e7ef      	b.n	c6c <unused_interrupt_vector+0x64>
	info->crc = crc;
     c8c:	4b32      	ldr	r3, [pc, #200]	; (d58 <unused_interrupt_vector+0x150>)
     c8e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
     c92:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
     c96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c9a:	4930      	ldr	r1, [pc, #192]	; (d5c <unused_interrupt_vector+0x154>)
     c9c:	4a32      	ldr	r2, [pc, #200]	; (d68 <unused_interrupt_vector+0x160>)
     c9e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
     ca2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
     ca6:	f3bf 8f4f 	dsb	sy
	asm("isb");
     caa:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     cae:	4a2f      	ldr	r2, [pc, #188]	; (d6c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
     cb0:	2502      	movs	r5, #2
     cb2:	482f      	ldr	r0, [pc, #188]	; (d70 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     cb4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     cb6:	492f      	ldr	r1, [pc, #188]	; (d74 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
     cb8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
     cbc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
     cbe:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     cc0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     cc2:	482d      	ldr	r0, [pc, #180]	; (d78 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
     cc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ccc:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     cce:	680b      	ldr	r3, [r1, #0]
     cd0:	4283      	cmp	r3, r0
     cd2:	d83d      	bhi.n	d50 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
     cd4:	4d26      	ldr	r5, [pc, #152]	; (d70 <unused_interrupt_vector+0x168>)
     cd6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
     cd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
     ce0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     ce2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
     ce4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
     ce8:	4924      	ldr	r1, [pc, #144]	; (d7c <unused_interrupt_vector+0x174>)
     cea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
     cee:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
     cf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
     cf6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
     cfa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
     cfe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
     d02:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
     d06:	e001      	b.n	d0c <unused_interrupt_vector+0x104>
		usb_isr();
     d08:	f000 f938 	bl	f7c <usb_isr>
		if (PIT_TFLG0) {
     d0c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     d10:	2b00      	cmp	r3, #0
     d12:	d0f9      	beq.n	d08 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
     d14:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
     d16:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
     d1a:	2c4f      	cmp	r4, #79	; 0x4f
     d1c:	d9f4      	bls.n	d08 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d1e:	4b18      	ldr	r3, [pc, #96]	; (d80 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
     d20:	2002      	movs	r0, #2
     d22:	4918      	ldr	r1, [pc, #96]	; (d84 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
     d28:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
     d2c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d2e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
     d32:	b93b      	cbnz	r3, d44 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
     d34:	4814      	ldr	r0, [pc, #80]	; (d88 <unused_interrupt_vector+0x180>)
     d36:	4915      	ldr	r1, [pc, #84]	; (d8c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d38:	4a0d      	ldr	r2, [pc, #52]	; (d70 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
     d3a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
     d3c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
     d40:	2b00      	cmp	r3, #0
     d42:	d0fa      	beq.n	d3a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
     d44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     d48:	4a11      	ldr	r2, [pc, #68]	; (d90 <unused_interrupt_vector+0x188>)
     d4a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
     d4e:	e7fe      	b.n	d4e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
     d50:	f001 f956 	bl	2000 <set_arm_clock>
     d54:	e7be      	b.n	cd4 <unused_interrupt_vector+0xcc>
     d56:	bf00      	nop
     d58:	2027ff00 	.word	0x2027ff00
     d5c:	2027ff80 	.word	0x2027ff80
     d60:	2027ffa8 	.word	0x2027ffa8
     d64:	edb88320 	.word	0xedb88320
     d68:	2027ffa0 	.word	0x2027ffa0
     d6c:	400fc000 	.word	0x400fc000
     d70:	40084000 	.word	0x40084000
     d74:	20000670 	.word	0x20000670
     d78:	0bcd3d80 	.word	0x0bcd3d80
     d7c:	00249f00 	.word	0x00249f00
     d80:	400d9000 	.word	0x400d9000
     d84:	402e0000 	.word	0x402e0000
     d88:	400f8000 	.word	0x400f8000
     d8c:	0bad00f1 	.word	0x0bad00f1
     d90:	05fa0004 	.word	0x05fa0004

00000d94 <Panic_Temp_isr>:
  unused_interrupt_vector();
     d94:	f7ff bf38 	b.w	c08 <unused_interrupt_vector>

00000d98 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
     d98:	4a12      	ldr	r2, [pc, #72]	; (de4 <tempmonGetTemp+0x4c>)
     d9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
     d9e:	075b      	lsls	r3, r3, #29
     da0:	d5fb      	bpl.n	d9a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     da2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     da6:	4810      	ldr	r0, [pc, #64]	; (de8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     da8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     dac:	490f      	ldr	r1, [pc, #60]	; (dec <tempmonGetTemp+0x54>)
     dae:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
     db2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
     db6:	ed91 6a00 	vldr	s12, [r1]
     dba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     dbe:	4a0c      	ldr	r2, [pc, #48]	; (df0 <tempmonGetTemp+0x58>)
     dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     dc4:	4b0b      	ldr	r3, [pc, #44]	; (df4 <tempmonGetTemp+0x5c>)
     dc6:	edd2 6a00 	vldr	s13, [r2]
     dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
     dce:	ed93 7a00 	vldr	s14, [r3]
     dd2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
     dd6:	ee67 7a86 	vmul.f32	s15, s15, s12
     dda:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
     dde:	ee37 0a40 	vsub.f32	s0, s14, s0
     de2:	4770      	bx	lr
     de4:	400d8100 	.word	0x400d8100
     de8:	20000f68 	.word	0x20000f68
     dec:	20000f70 	.word	0x20000f70
     df0:	20000f74 	.word	0x20000f74
     df4:	20000f6c 	.word	0x20000f6c

00000df8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     df8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
     dfa:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
     dfc:	b11b      	cbz	r3, e06 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     dfe:	6853      	ldr	r3, [r2, #4]
     e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e04:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     e06:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     e08:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     e0a:	b33c      	cbz	r4, e5c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     e0c:	4b1a      	ldr	r3, [pc, #104]	; (e78 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
     e0e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     e10:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     e14:	420c      	tst	r4, r1
     e16:	d11d      	bne.n	e54 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     e18:	4e18      	ldr	r6, [pc, #96]	; (e7c <schedule_transfer+0x84>)
     e1a:	6877      	ldr	r7, [r6, #4]
     e1c:	e004      	b.n	e28 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     e1e:	6874      	ldr	r4, [r6, #4]
     e20:	1be4      	subs	r4, r4, r7
     e22:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     e26:	d20b      	bcs.n	e40 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     e28:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e2c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     e30:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     e34:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     e38:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e3c:	0464      	lsls	r4, r4, #17
     e3e:	d5ee      	bpl.n	e1e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     e40:	400d      	ands	r5, r1
     e42:	d107      	bne.n	e54 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
     e44:	4c0c      	ldr	r4, [pc, #48]	; (e78 <schedule_transfer+0x80>)
		endpoint->status = 0;
     e46:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
     e4a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e4e:	430b      	orrs	r3, r1
     e50:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
     e54:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     e56:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     e58:	bcf0      	pop	{r4, r5, r6, r7}
     e5a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
     e5c:	4d06      	ldr	r5, [pc, #24]	; (e78 <schedule_transfer+0x80>)
	endpoint->status = 0;
     e5e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
     e62:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
     e66:	430b      	orrs	r3, r1
     e68:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     e6c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
     e6e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     e70:	b662      	cpsie	i
}
     e72:	bcf0      	pop	{r4, r5, r6, r7}
     e74:	4770      	bx	lr
     e76:	bf00      	nop
     e78:	402e0000 	.word	0x402e0000
     e7c:	e0001000 	.word	0xe0001000

00000e80 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     e80:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     e82:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
     e84:	b19d      	cbz	r5, eae <run_callbacks+0x2e>
     e86:	4606      	mov	r6, r0
     e88:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
     e8a:	2400      	movs	r4, #0
     e8c:	e003      	b.n	e96 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     e8e:	6812      	ldr	r2, [r2, #0]
		count++;
     e90:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
     e92:	2a01      	cmp	r2, #1
     e94:	d00c      	beq.n	eb0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
     e96:	6853      	ldr	r3, [r2, #4]
     e98:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     e9c:	d0f7      	beq.n	e8e <run_callbacks+0xe>
			ep->first_transfer = t;
     e9e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ea0:	b12c      	cbz	r4, eae <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
     ea2:	4628      	mov	r0, r5
		ep->callback_function(first);
     ea4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
     ea6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
     ea8:	4798      	blx	r3
	while (count) {
     eaa:	3c01      	subs	r4, #1
     eac:	d1f9      	bne.n	ea2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
     eae:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
     eb0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
     eb4:	e7f4      	b.n	ea0 <run_callbacks+0x20>
     eb6:	bf00      	nop

00000eb8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     eb8:	b430      	push	{r4, r5}
	if (len > 0) {
     eba:	b9d9      	cbnz	r1, ef4 <endpoint0_transmit.constprop.0+0x3c>
     ebc:	4c1f      	ldr	r4, [pc, #124]	; (f3c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
     ebe:	4b20      	ldr	r3, [pc, #128]	; (f40 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
     ec0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ec2:	4a20      	ldr	r2, [pc, #128]	; (f44 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
     ec4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ec6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
     eca:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
     ecc:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
     ece:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ed2:	2480      	movs	r4, #128	; 0x80
     ed4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     ed6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     eda:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     ede:	481a      	ldr	r0, [pc, #104]	; (f48 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
     ee0:	432b      	orrs	r3, r5
     ee2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     ee6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
     ee8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     eec:	2b00      	cmp	r3, #0
     eee:	d1fb      	bne.n	ee8 <endpoint0_transmit.constprop.0+0x30>
}
     ef0:	bc30      	pop	{r4, r5}
     ef2:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     ef4:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
     ef6:	4b15      	ldr	r3, [pc, #84]	; (f4c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     ef8:	4c10      	ldr	r4, [pc, #64]	; (f3c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
     efa:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     efc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     f00:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
     f02:	4a10      	ldr	r2, [pc, #64]	; (f44 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f04:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f06:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
     f0a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f0c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f0e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     f12:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f14:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f16:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f1a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f1e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
     f20:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f22:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
     f24:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
     f26:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     f2e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     f32:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f36:	2b00      	cmp	r3, #0
     f38:	d1fb      	bne.n	f32 <endpoint0_transmit.constprop.0+0x7a>
     f3a:	e7c0      	b.n	ebe <endpoint0_transmit.constprop.0+0x6>
     f3c:	20000000 	.word	0x20000000
     f40:	20000b20 	.word	0x20000b20
     f44:	402e0000 	.word	0x402e0000
     f48:	20000f0c 	.word	0x20000f0c
     f4c:	20000b40 	.word	0x20000b40

00000f50 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
     f50:	4908      	ldr	r1, [pc, #32]	; (f74 <usb_stop_sof_interrupts+0x24>)
     f52:	2201      	movs	r2, #1
     f54:	780b      	ldrb	r3, [r1, #0]
     f56:	fa02 f000 	lsl.w	r0, r2, r0
     f5a:	ea23 0000 	bic.w	r0, r3, r0
     f5e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
     f60:	b930      	cbnz	r0, f70 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
     f62:	4a05      	ldr	r2, [pc, #20]	; (f78 <usb_stop_sof_interrupts+0x28>)
     f64:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
     f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f6c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
     f70:	4770      	bx	lr
     f72:	bf00      	nop
     f74:	20000fb2 	.word	0x20000fb2
     f78:	402e0000 	.word	0x402e0000

00000f7c <usb_isr>:
{
     f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
     f80:	4c97      	ldr	r4, [pc, #604]	; (11e0 <usb_isr+0x264>)
{
     f82:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
     f84:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     f88:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
     f8a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
     f8e:	d553      	bpl.n	1038 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     f90:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
     f94:	2a00      	cmp	r2, #0
     f96:	d04a      	beq.n	102e <usb_isr+0xb2>
     f98:	4e92      	ldr	r6, [pc, #584]	; (11e4 <usb_isr+0x268>)
     f9a:	f8df a260 	ldr.w	sl, [pc, #608]	; 11fc <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
     f9e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1214 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
     fa2:	f8df b274 	ldr.w	fp, [pc, #628]	; 1218 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
     fa6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 121c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
     faa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
     fae:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
     fb2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     fba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     fbe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fc2:	049d      	lsls	r5, r3, #18
     fc4:	d5f5      	bpl.n	fb2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     fc6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     fce:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     fd2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
     fd6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     fda:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
     fde:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
     fe2:	d1fa      	bne.n	fda <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
     fe4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
     fe6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
     fe8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
     fec:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
     ff0:	f000 81cf 	beq.w	1392 <usb_isr+0x416>
     ff4:	f200 80db 	bhi.w	11ae <usb_isr+0x232>
     ff8:	f240 3102 	movw	r1, #770	; 0x302
     ffc:	428b      	cmp	r3, r1
     ffe:	f000 81e7 	beq.w	13d0 <usb_isr+0x454>
    1002:	f200 809a 	bhi.w	113a <usb_isr+0x1be>
    1006:	2b82      	cmp	r3, #130	; 0x82
    1008:	f000 81cb 	beq.w	13a2 <usb_isr+0x426>
    100c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1010:	f040 808a 	bne.w	1128 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    1014:	f010 0f78 	tst.w	r0, #120	; 0x78
    1018:	b283      	uxth	r3, r0
    101a:	f000 8203 	beq.w	1424 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    101e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1022:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1026:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    102a:	2a00      	cmp	r2, #0
    102c:	d1bd      	bne.n	faa <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    102e:	4a6c      	ldr	r2, [pc, #432]	; (11e0 <usb_isr+0x264>)
    1030:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1034:	2b00      	cmp	r3, #0
    1036:	d142      	bne.n	10be <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1038:	067e      	lsls	r6, r7, #25
    103a:	d516      	bpl.n	106a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    103c:	4b68      	ldr	r3, [pc, #416]	; (11e0 <usb_isr+0x264>)
    103e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1042:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    1046:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    104a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    104e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    1052:	2c00      	cmp	r4, #0
    1054:	d1fb      	bne.n	104e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    1056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    105a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    105e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    1062:	f000 fd31 	bl	1ac8 <usb_serial_reset>
		endpointN_notify_mask = 0;
    1066:	4b60      	ldr	r3, [pc, #384]	; (11e8 <usb_isr+0x26c>)
    1068:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    106a:	01fc      	lsls	r4, r7, #7
    106c:	d503      	bpl.n	1076 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    106e:	4b5f      	ldr	r3, [pc, #380]	; (11ec <usb_isr+0x270>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	b103      	cbz	r3, 1076 <usb_isr+0xfa>
    1074:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    1076:	01b8      	lsls	r0, r7, #6
    1078:	d503      	bpl.n	1082 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    107a:	4b5d      	ldr	r3, [pc, #372]	; (11f0 <usb_isr+0x274>)
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	b103      	cbz	r3, 1082 <usb_isr+0x106>
    1080:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    1082:	0779      	lsls	r1, r7, #29
    1084:	d508      	bpl.n	1098 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1086:	4b56      	ldr	r3, [pc, #344]	; (11e0 <usb_isr+0x264>)
    1088:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    108c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1090:	d047      	beq.n	1122 <usb_isr+0x1a6>
			usb_high_speed = 1;
    1092:	4b58      	ldr	r3, [pc, #352]	; (11f4 <usb_isr+0x278>)
    1094:	2201      	movs	r2, #1
    1096:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1098:	4b51      	ldr	r3, [pc, #324]	; (11e0 <usb_isr+0x264>)
    109a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    109e:	061a      	lsls	r2, r3, #24
    10a0:	d50a      	bpl.n	10b8 <usb_isr+0x13c>
    10a2:	063b      	lsls	r3, r7, #24
    10a4:	d508      	bpl.n	10b8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    10a6:	4a54      	ldr	r2, [pc, #336]	; (11f8 <usb_isr+0x27c>)
    10a8:	7813      	ldrb	r3, [r2, #0]
    10aa:	b12b      	cbz	r3, 10b8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    10ac:	3b01      	subs	r3, #1
    10ae:	b2db      	uxtb	r3, r3
    10b0:	7013      	strb	r3, [r2, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	f000 8272 	beq.w	159c <usb_isr+0x620>
}
    10b8:	b003      	add	sp, #12
    10ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    10be:	494f      	ldr	r1, [pc, #316]	; (11fc <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    10c0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    10c4:	6808      	ldr	r0, [r1, #0]
    10c6:	4203      	tst	r3, r0
    10c8:	f040 81d1 	bne.w	146e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    10cc:	4a46      	ldr	r2, [pc, #280]	; (11e8 <usb_isr+0x26c>)
    10ce:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    10d0:	401c      	ands	r4, r3
    10d2:	d0b1      	beq.n	1038 <usb_isr+0xbc>
				while (tx) {
    10d4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    10d8:	d010      	beq.n	10fc <usb_isr+0x180>
    10da:	4e42      	ldr	r6, [pc, #264]	; (11e4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    10dc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    10e0:	fa98 f5a8 	rbit	r5, r8
    10e4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    10e8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    10ec:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    10f0:	3040      	adds	r0, #64	; 0x40
    10f2:	f7ff fec5 	bl	e80 <run_callbacks>
				while (tx) {
    10f6:	ea38 0805 	bics.w	r8, r8, r5
    10fa:	d1f1      	bne.n	10e0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    10fc:	b2a4      	uxth	r4, r4
				while(rx) {
    10fe:	2c00      	cmp	r4, #0
    1100:	d09a      	beq.n	1038 <usb_isr+0xbc>
    1102:	4e38      	ldr	r6, [pc, #224]	; (11e4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    1104:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    1108:	fa94 f5a4 	rbit	r5, r4
    110c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1110:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    1114:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1118:	f7ff feb2 	bl	e80 <run_callbacks>
				while(rx) {
    111c:	43ac      	bics	r4, r5
    111e:	d1f3      	bne.n	1108 <usb_isr+0x18c>
    1120:	e78a      	b.n	1038 <usb_isr+0xbc>
			usb_high_speed = 0;
    1122:	4a34      	ldr	r2, [pc, #208]	; (11f4 <usb_isr+0x278>)
    1124:	7013      	strb	r3, [r2, #0]
    1126:	e7b7      	b.n	1098 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1128:	2b80      	cmp	r3, #128	; 0x80
    112a:	f47f af78 	bne.w	101e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    112e:	4834      	ldr	r0, [pc, #208]	; (1200 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1130:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    1132:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    1134:	f7ff fec0 	bl	eb8 <endpoint0_transmit.constprop.0>
		return;
    1138:	e775      	b.n	1026 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    113a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    113e:	f000 810b 	beq.w	1358 <usb_isr+0x3dc>
    1142:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    1146:	2b01      	cmp	r3, #1
    1148:	f63f af69 	bhi.w	101e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    114c:	4b2d      	ldr	r3, [pc, #180]	; (1204 <usb_isr+0x288>)
    114e:	685d      	ldr	r5, [r3, #4]
    1150:	2d00      	cmp	r5, #0
    1152:	f43f af64 	beq.w	101e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1156:	fa1f fc8c 	uxth.w	ip, ip
    115a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    115e:	e004      	b.n	116a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1160:	691d      	ldr	r5, [r3, #16]
    1162:	330c      	adds	r3, #12
    1164:	2d00      	cmp	r5, #0
    1166:	f43f af5a 	beq.w	101e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    116a:	881a      	ldrh	r2, [r3, #0]
    116c:	4572      	cmp	r2, lr
    116e:	d1f7      	bne.n	1160 <usb_isr+0x1e4>
    1170:	885a      	ldrh	r2, [r3, #2]
    1172:	4562      	cmp	r2, ip
    1174:	d1f4      	bne.n	1160 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    1176:	ea4f 221e 	mov.w	r2, lr, lsr #8
    117a:	2a03      	cmp	r2, #3
    117c:	f000 81a5 	beq.w	14ca <usb_isr+0x54e>
					datalen = list->length;
    1180:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    1182:	0c00      	lsrs	r0, r0, #16
    1184:	4282      	cmp	r2, r0
    1186:	bf28      	it	cs
    1188:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    118a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    118e:	f040 81a1 	bne.w	14d4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    1192:	4b18      	ldr	r3, [pc, #96]	; (11f4 <usb_isr+0x278>)
    1194:	491c      	ldr	r1, [pc, #112]	; (1208 <usb_isr+0x28c>)
    1196:	7818      	ldrb	r0, [r3, #0]
    1198:	4b1c      	ldr	r3, [pc, #112]	; (120c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    119a:	9201      	str	r2, [sp, #4]
    119c:	2800      	cmp	r0, #0
    119e:	bf18      	it	ne
    11a0:	4619      	movne	r1, r3
    11a2:	481b      	ldr	r0, [pc, #108]	; (1210 <usb_isr+0x294>)
    11a4:	f001 f8a4 	bl	22f0 <memcpy>
    11a8:	4d19      	ldr	r5, [pc, #100]	; (1210 <usb_isr+0x294>)
    11aa:	9a01      	ldr	r2, [sp, #4]
    11ac:	e1e1      	b.n	1572 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    11ae:	f242 2121 	movw	r1, #8737	; 0x2221
    11b2:	428b      	cmp	r3, r1
    11b4:	d07c      	beq.n	12b0 <usb_isr+0x334>
    11b6:	d933      	bls.n	1220 <usb_isr+0x2a4>
    11b8:	f242 3121 	movw	r1, #8993	; 0x2321
    11bc:	428b      	cmp	r3, r1
    11be:	f000 8081 	beq.w	12c4 <usb_isr+0x348>
    11c2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    11c6:	428b      	cmp	r3, r1
    11c8:	f47f af29 	bne.w	101e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    11cc:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    11d0:	b283      	uxth	r3, r0
    11d2:	f47f af24 	bne.w	101e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    11d6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    11da:	f363 0c0f 	bfi	ip, r3, #0, #16
    11de:	e7b5      	b.n	114c <usb_isr+0x1d0>
    11e0:	402e0000 	.word	0x402e0000
    11e4:	20000000 	.word	0x20000000
    11e8:	20000f10 	.word	0x20000f10
    11ec:	20000f98 	.word	0x20000f98
    11f0:	20000f9c 	.word	0x20000f9c
    11f4:	20000fb9 	.word	0x20000fb9
    11f8:	20000fba 	.word	0x20000fba
    11fc:	20000f0c 	.word	0x20000f0c
    1200:	20000f30 	.word	0x20000f30
    1204:	200005e8 	.word	0x200005e8
    1208:	60001b30 	.word	0x60001b30
    120c:	60001b94 	.word	0x60001b94
    1210:	20200000 	.word	0x20200000
    1214:	20000f04 	.word	0x20000f04
    1218:	b8c6cf5d 	.word	0xb8c6cf5d
    121c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1220:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1224:	d066      	beq.n	12f4 <usb_isr+0x378>
    1226:	f242 0121 	movw	r1, #8225	; 0x2021
    122a:	428b      	cmp	r3, r1
    122c:	f47f aef7 	bne.w	101e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1230:	0c03      	lsrs	r3, r0, #16
    1232:	2b07      	cmp	r3, #7
    1234:	f47f aef3 	bne.w	101e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1238:	4bb2      	ldr	r3, [pc, #712]	; (1504 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    123a:	49b3      	ldr	r1, [pc, #716]	; (1508 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    123c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    123e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1240:	49b2      	ldr	r1, [pc, #712]	; (150c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1242:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1244:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1248:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    124c:	2201      	movs	r2, #1
    124e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1250:	4aaf      	ldr	r2, [pc, #700]	; (1510 <usb_isr+0x594>)
    1252:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1254:	4aaf      	ldr	r2, [pc, #700]	; (1514 <usb_isr+0x598>)
    1256:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1258:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    125c:	f041 0101 	orr.w	r1, r1, #1
    1260:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1264:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1268:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    126c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    126e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1270:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1274:	2b00      	cmp	r3, #0
    1276:	d1fb      	bne.n	1270 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1278:	4aa7      	ldr	r2, [pc, #668]	; (1518 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    127a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    127c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    127e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1280:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1282:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1284:	f248 0380 	movw	r3, #32896	; 0x8080
    1288:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    128a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    128e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1292:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    129a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    129e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    12a2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    12a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12aa:	2b00      	cmp	r3, #0
    12ac:	d1fb      	bne.n	12a6 <usb_isr+0x32a>
    12ae:	e6ba      	b.n	1026 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    12b0:	b280      	uxth	r0, r0
    12b2:	b938      	cbnz	r0, 12c4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    12b4:	4b99      	ldr	r3, [pc, #612]	; (151c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    12b6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    12ba:	6819      	ldr	r1, [r3, #0]
    12bc:	4b98      	ldr	r3, [pc, #608]	; (1520 <usb_isr+0x5a4>)
    12be:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    12c0:	4b98      	ldr	r3, [pc, #608]	; (1524 <usb_isr+0x5a8>)
    12c2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    12c4:	4b94      	ldr	r3, [pc, #592]	; (1518 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    12c6:	2200      	movs	r2, #0
    12c8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    12ca:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    12cc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    12ce:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    12d0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12d2:	2280      	movs	r2, #128	; 0x80
    12d4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    12da:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    12de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    12e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    12ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    12ee:	2b00      	cmp	r3, #0
    12f0:	d1fb      	bne.n	12ea <usb_isr+0x36e>
    12f2:	e698      	b.n	1026 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    12f4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    12f8:	4b8b      	ldr	r3, [pc, #556]	; (1528 <usb_isr+0x5ac>)
    12fa:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    12fc:	4b8b      	ldr	r3, [pc, #556]	; (152c <usb_isr+0x5b0>)
    12fe:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    1302:	4b8b      	ldr	r3, [pc, #556]	; (1530 <usb_isr+0x5b4>)
    1304:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1308:	4b8a      	ldr	r3, [pc, #552]	; (1534 <usb_isr+0x5b8>)
    130a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    130e:	f000 fbdd 	bl	1acc <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	4629      	mov	r1, r5
    1316:	4888      	ldr	r0, [pc, #544]	; (1538 <usb_isr+0x5bc>)
    1318:	f001 fa4c 	bl	27b4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    131c:	4b87      	ldr	r3, [pc, #540]	; (153c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    131e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1320:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1324:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1328:	4b7b      	ldr	r3, [pc, #492]	; (1518 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    132a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    132c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    132e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1330:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    1332:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1334:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1336:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    133a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    133e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1346:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    134a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    134e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1352:	2b00      	cmp	r3, #0
    1354:	d1fb      	bne.n	134e <usb_isr+0x3d2>
    1356:	e666      	b.n	1026 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1358:	4b6f      	ldr	r3, [pc, #444]	; (1518 <usb_isr+0x59c>)
    135a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    135c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    135e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1360:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1362:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1364:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1366:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1368:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    136c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1370:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1378:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    137c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1380:	2b00      	cmp	r3, #0
    1382:	d1fb      	bne.n	137c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1384:	0c13      	lsrs	r3, r2, #16
    1386:	065b      	lsls	r3, r3, #25
    1388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    138c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1390:	e649      	b.n	1026 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    1392:	4b65      	ldr	r3, [pc, #404]	; (1528 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1394:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    1396:	486a      	ldr	r0, [pc, #424]	; (1540 <usb_isr+0x5c4>)
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    139c:	f7ff fd8c 	bl	eb8 <endpoint0_transmit.constprop.0>
		return;
    13a0:	e641      	b.n	1026 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    13a2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    13a4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    13a8:	f47f ae39 	bne.w	101e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    13ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    13b0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    13b4:	4a62      	ldr	r2, [pc, #392]	; (1540 <usb_isr+0x5c4>)
    13b6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    13b8:	0618      	lsls	r0, r3, #24
    13ba:	f100 809e 	bmi.w	14fa <usb_isr+0x57e>
    13be:	07cb      	lsls	r3, r1, #31
    13c0:	d501      	bpl.n	13c6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    13c2:	2301      	movs	r3, #1
    13c4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    13c6:	2102      	movs	r1, #2
    13c8:	485d      	ldr	r0, [pc, #372]	; (1540 <usb_isr+0x5c4>)
    13ca:	f7ff fd75 	bl	eb8 <endpoint0_transmit.constprop.0>
		return;
    13ce:	e62a      	b.n	1026 <usb_isr+0xaa>
		if (endpoint > 7) break;
    13d0:	f010 0f78 	tst.w	r0, #120	; 0x78
    13d4:	b283      	uxth	r3, r0
    13d6:	f47f ae22 	bne.w	101e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    13da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    13de:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    13e2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    13e6:	bf14      	ite	ne
    13e8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    13ec:	f043 0301 	orreq.w	r3, r3, #1
    13f0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    13f4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    13f6:	4b48      	ldr	r3, [pc, #288]	; (1518 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    13f8:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    13fa:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    13fc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    13fe:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1400:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1402:	2280      	movs	r2, #128	; 0x80
    1404:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1406:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    140a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    140e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1416:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    141a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    141e:	2b00      	cmp	r3, #0
    1420:	d1fb      	bne.n	141a <usb_isr+0x49e>
    1422:	e600      	b.n	1026 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    1424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1428:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    142c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1430:	bf14      	ite	ne
    1432:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1436:	f023 0301 	biceq.w	r3, r3, #1
    143a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    143e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1440:	4b35      	ldr	r3, [pc, #212]	; (1518 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1442:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1444:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    1446:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1448:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    144a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    144c:	2280      	movs	r2, #128	; 0x80
    144e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1450:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1454:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1458:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1460:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1464:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1468:	2b00      	cmp	r3, #0
    146a:	d1fb      	bne.n	1464 <usb_isr+0x4e8>
    146c:	e5db      	b.n	1026 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    146e:	2000      	movs	r0, #0
    1470:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1472:	4926      	ldr	r1, [pc, #152]	; (150c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1474:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    1476:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1478:	f242 0121 	movw	r1, #8225	; 0x2021
    147c:	428c      	cmp	r4, r1
    147e:	f47f ae25 	bne.w	10cc <usb_isr+0x150>
    1482:	b280      	uxth	r0, r0
    1484:	2800      	cmp	r0, #0
    1486:	f47f ae21 	bne.w	10cc <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    148a:	492e      	ldr	r1, [pc, #184]	; (1544 <usb_isr+0x5c8>)
    148c:	4c2e      	ldr	r4, [pc, #184]	; (1548 <usb_isr+0x5cc>)
    148e:	c903      	ldmia	r1, {r0, r1}
    1490:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    1492:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1494:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1498:	6020      	str	r0, [r4, #0]
    149a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    149c:	f47f ae16 	bne.w	10cc <usb_isr+0x150>
	__disable_irq();
    14a0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    14a2:	482a      	ldr	r0, [pc, #168]	; (154c <usb_isr+0x5d0>)
    14a4:	7801      	ldrb	r1, [r0, #0]
    14a6:	f041 0108 	orr.w	r1, r1, #8
    14aa:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    14ac:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    14b0:	060d      	lsls	r5, r1, #24
    14b2:	d405      	bmi.n	14c0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    14b4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    14b6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    14b8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    14bc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    14c0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    14c2:	4a23      	ldr	r2, [pc, #140]	; (1550 <usb_isr+0x5d4>)
    14c4:	2150      	movs	r1, #80	; 0x50
    14c6:	7011      	strb	r1, [r2, #0]
    14c8:	e600      	b.n	10cc <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    14ca:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    14cc:	782a      	ldrb	r2, [r5, #0]
    14ce:	4282      	cmp	r2, r0
    14d0:	bf28      	it	cs
    14d2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    14d4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    14d8:	d144      	bne.n	1564 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    14da:	4b1e      	ldr	r3, [pc, #120]	; (1554 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    14dc:	4d1e      	ldr	r5, [pc, #120]	; (1558 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    14de:	7818      	ldrb	r0, [r3, #0]
    14e0:	491e      	ldr	r1, [pc, #120]	; (155c <usb_isr+0x5e0>)
    14e2:	4b1f      	ldr	r3, [pc, #124]	; (1560 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    14e4:	9201      	str	r2, [sp, #4]
    14e6:	2800      	cmp	r0, #0
    14e8:	bf18      	it	ne
    14ea:	4619      	movne	r1, r3
    14ec:	4628      	mov	r0, r5
    14ee:	f000 feff 	bl	22f0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    14f2:	2307      	movs	r3, #7
    14f4:	706b      	strb	r3, [r5, #1]
    14f6:	9a01      	ldr	r2, [sp, #4]
    14f8:	e03b      	b.n	1572 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    14fa:	03c9      	lsls	r1, r1, #15
    14fc:	f53f af61 	bmi.w	13c2 <usb_isr+0x446>
    1500:	e761      	b.n	13c6 <usb_isr+0x44a>
    1502:	bf00      	nop
    1504:	20000b40 	.word	0x20000b40
    1508:	20001f04 	.word	0x20001f04
    150c:	20000ce0 	.word	0x20000ce0
    1510:	00070080 	.word	0x00070080
    1514:	20002f04 	.word	0x20002f04
    1518:	20000b20 	.word	0x20000b20
    151c:	20000f80 	.word	0x20000f80
    1520:	20000f94 	.word	0x20000f94
    1524:	20000fb7 	.word	0x20000fb7
    1528:	20000fb8 	.word	0x20000fb8
    152c:	00cc0002 	.word	0x00cc0002
    1530:	000200c8 	.word	0x000200c8
    1534:	00c80002 	.word	0x00c80002
    1538:	20000080 	.word	0x20000080
    153c:	74d59319 	.word	0x74d59319
    1540:	20000f30 	.word	0x20000f30
    1544:	20000f04 	.word	0x20000f04
    1548:	20000f8c 	.word	0x20000f8c
    154c:	20000fb2 	.word	0x20000fb2
    1550:	20000fba 	.word	0x20000fba
    1554:	20000fb9 	.word	0x20000fb9
    1558:	20200000 	.word	0x20200000
    155c:	60001b94 	.word	0x60001b94
    1560:	60001b30 	.word	0x60001b30
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1564:	4629      	mov	r1, r5
    1566:	4d10      	ldr	r5, [pc, #64]	; (15a8 <usb_isr+0x62c>)
    1568:	9201      	str	r2, [sp, #4]
    156a:	4628      	mov	r0, r5
    156c:	f000 fec0 	bl	22f0 <memcpy>
    1570:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1572:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1576:	4415      	add	r5, r2
	asm("dsb");
    1578:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    157c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1580:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    1584:	3320      	adds	r3, #32
	} while (location < end_addr);
    1586:	429d      	cmp	r5, r3
    1588:	d8fa      	bhi.n	1580 <usb_isr+0x604>
	asm("dsb");
    158a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    158e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1592:	4805      	ldr	r0, [pc, #20]	; (15a8 <usb_isr+0x62c>)
    1594:	4611      	mov	r1, r2
    1596:	f7ff fc8f 	bl	eb8 <endpoint0_transmit.constprop.0>
				return;
    159a:	e544      	b.n	1026 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    159c:	2003      	movs	r0, #3
    159e:	f7ff fcd7 	bl	f50 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    15a2:	f001 f9cd 	bl	2940 <___reboot_Teensyduino__veneer>
    15a6:	bf00      	nop
    15a8:	20200000 	.word	0x20200000

000015ac <usb_config_rx>:
{
    15ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15b0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    15b2:	1e83      	subs	r3, r0, #2
    15b4:	2b02      	cmp	r3, #2
    15b6:	d901      	bls.n	15bc <usb_config_rx+0x10>
}
    15b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15bc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 160c <usb_config_rx+0x60>
    15c0:	4615      	mov	r5, r2
    15c2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    15c4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15c6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    15ca:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    15cc:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    15d0:	2100      	movs	r1, #0
    15d2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15d6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    15d8:	f001 f8ec 	bl	27b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15dc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    15e0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    15e2:	0952      	lsrs	r2, r2, #5
    15e4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    15e8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    15ec:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    15f0:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    15f4:	2f00      	cmp	r7, #0
    15f6:	d0df      	beq.n	15b8 <usb_config_rx+0xc>
    15f8:	4a03      	ldr	r2, [pc, #12]	; (1608 <usb_config_rx+0x5c>)
    15fa:	40b3      	lsls	r3, r6
    15fc:	6811      	ldr	r1, [r2, #0]
    15fe:	430b      	orrs	r3, r1
    1600:	6013      	str	r3, [r2, #0]
}
    1602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1606:	bf00      	nop
    1608:	20000f10 	.word	0x20000f10
    160c:	20000000 	.word	0x20000000

00001610 <usb_config_tx>:
{
    1610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1614:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1616:	1e81      	subs	r1, r0, #2
    1618:	2902      	cmp	r1, #2
    161a:	d901      	bls.n	1620 <usb_config_tx+0x10>
}
    161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1620:	01c7      	lsls	r7, r0, #7
    1622:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1670 <usb_config_tx+0x60>
    1626:	4692      	mov	sl, r2
    1628:	4604      	mov	r4, r0
    162a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    162c:	223c      	movs	r2, #60	; 0x3c
    162e:	2100      	movs	r1, #0
    1630:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1632:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1636:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1638:	f108 0004 	add.w	r0, r8, #4
    163c:	f001 f8ba 	bl	27b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1640:	faba f28a 	clz	r2, sl
    1644:	0952      	lsrs	r2, r2, #5
    1646:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    164a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    164e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1650:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1654:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1658:	2e00      	cmp	r6, #0
    165a:	d0df      	beq.n	161c <usb_config_tx+0xc>
    165c:	4b03      	ldr	r3, [pc, #12]	; (166c <usb_config_tx+0x5c>)
    165e:	3410      	adds	r4, #16
    1660:	6819      	ldr	r1, [r3, #0]
    1662:	40a2      	lsls	r2, r4
    1664:	430a      	orrs	r2, r1
    1666:	601a      	str	r2, [r3, #0]
}
    1668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    166c:	20000f10 	.word	0x20000f10
    1670:	20000000 	.word	0x20000000

00001674 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1674:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1676:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1678:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    167a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    167e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1682:	b410      	push	{r4}
	transfer->next = 1;
    1684:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1686:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1688:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    168c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    168e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1692:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1696:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1698:	6181      	str	r1, [r0, #24]
}
    169a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    169e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    16a2:	4770      	bx	lr

000016a4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16a4:	1e83      	subs	r3, r0, #2
{
    16a6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16a8:	2b02      	cmp	r3, #2
    16aa:	d900      	bls.n	16ae <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    16ac:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    16ae:	4b06      	ldr	r3, [pc, #24]	; (16c8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    16b0:	f100 0110 	add.w	r1, r0, #16
    16b4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    16b8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    16bc:	fa0c f101 	lsl.w	r1, ip, r1
    16c0:	3040      	adds	r0, #64	; 0x40
    16c2:	f7ff bb99 	b.w	df8 <schedule_transfer>
    16c6:	bf00      	nop
    16c8:	20000000 	.word	0x20000000

000016cc <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16cc:	1e83      	subs	r3, r0, #2
{
    16ce:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    16d0:	2b02      	cmp	r3, #2
    16d2:	d900      	bls.n	16d6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    16d4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    16d6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    16d8:	4b02      	ldr	r3, [pc, #8]	; (16e4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    16da:	4081      	lsls	r1, r0
    16dc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    16e0:	f7ff bb8a 	b.w	df8 <schedule_transfer>
    16e4:	20000000 	.word	0x20000000

000016e8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    16e8:	6840      	ldr	r0, [r0, #4]
#endif
}
    16ea:	4770      	bx	lr

000016ec <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    16ec:	4a12      	ldr	r2, [pc, #72]	; (1738 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    16ee:	4b13      	ldr	r3, [pc, #76]	; (173c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    16f0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    16f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    16f8:	4298      	cmp	r0, r3
{
    16fa:	b510      	push	{r4, lr}
    16fc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    16fe:	d202      	bcs.n	1706 <usb_init_serialnumber+0x1a>
    1700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1704:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    1706:	4c0e      	ldr	r4, [pc, #56]	; (1740 <usb_init_serialnumber+0x54>)
    1708:	a901      	add	r1, sp, #4
    170a:	220a      	movs	r2, #10
    170c:	f000 fe8a 	bl	2424 <ultoa>
	for (i=0; i<10; i++) {
    1710:	a901      	add	r1, sp, #4
    1712:	2300      	movs	r3, #0
    1714:	4620      	mov	r0, r4
		char c = buf[i];
    1716:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    171a:	3301      	adds	r3, #1
		if (!c) break;
    171c:	b13a      	cbz	r2, 172e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    171e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    1720:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    1724:	d1f7      	bne.n	1716 <usb_init_serialnumber+0x2a>
    1726:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1728:	7023      	strb	r3, [r4, #0]
}
    172a:	b004      	add	sp, #16
    172c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    172e:	005b      	lsls	r3, r3, #1
    1730:	b2db      	uxtb	r3, r3
    1732:	7023      	strb	r3, [r4, #0]
}
    1734:	b004      	add	sp, #16
    1736:	bd10      	pop	{r4, pc}
    1738:	401f4400 	.word	0x401f4400
    173c:	00989680 	.word	0x00989680
    1740:	200006e8 	.word	0x200006e8

00001744 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    1744:	f000 bae0 	b.w	1d08 <usb_serial_flush_input>

00001748 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1748:	f000 bab0 	b.w	1cac <usb_serial_peekchar>

0000174c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    174c:	f000 bb14 	b.w	1d78 <usb_serial_getchar>

00001750 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1750:	f000 bace 	b.w	1cf0 <usb_serial_available>

00001754 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1754:	f000 bb6a 	b.w	1e2c <usb_serial_flush_output>

00001758 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1758:	f000 bb40 	b.w	1ddc <usb_serial_write_buffer_free>

0000175c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    175c:	4608      	mov	r0, r1
    175e:	4611      	mov	r1, r2
    1760:	f000 bb30 	b.w	1dc4 <usb_serial_write>

00001764 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1764:	4608      	mov	r0, r1
    1766:	f000 bb17 	b.w	1d98 <usb_serial_putchar>
    176a:	bf00      	nop

0000176c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    176e:	4c14      	ldr	r4, [pc, #80]	; (17c0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1770:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1774:	4e13      	ldr	r6, [pc, #76]	; (17c4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    177a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    177e:	4f12      	ldr	r7, [pc, #72]	; (17c8 <rx_queue_transfer+0x5c>)
    1780:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    1784:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1786:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    178a:	4621      	mov	r1, r4
    178c:	883a      	ldrh	r2, [r7, #0]
    178e:	4630      	mov	r0, r6
    1790:	f7ff ff70 	bl	1674 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    1794:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1796:	4423      	add	r3, r4
	asm("dsb");
    1798:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    179c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    17a0:	3420      	adds	r4, #32
	} while (location < end_addr);
    17a2:	42a3      	cmp	r3, r4
    17a4:	d8fa      	bhi.n	179c <rx_queue_transfer+0x30>
	asm("dsb");
    17a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    17aa:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    17ae:	2003      	movs	r0, #3
    17b0:	4631      	mov	r1, r6
    17b2:	f7ff ff8b 	bl	16cc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    17b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    17ba:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    17be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17c0:	20200080 	.word	0x20200080
    17c4:	20000b60 	.word	0x20000b60
    17c8:	20000fa0 	.word	0x20000fa0

000017cc <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17cc:	4b24      	ldr	r3, [pc, #144]	; (1860 <rx_event+0x94>)
{
    17ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17d2:	881c      	ldrh	r4, [r3, #0]
    17d4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    17d6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    17d8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    17dc:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    17de:	2c00      	cmp	r4, #0
    17e0:	dd24      	ble.n	182c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    17e2:	4920      	ldr	r1, [pc, #128]	; (1864 <rx_event+0x98>)
		if (head != rx_tail) {
    17e4:	4820      	ldr	r0, [pc, #128]	; (1868 <rx_event+0x9c>)
		uint32_t head = rx_head;
    17e6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    17e8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    17ea:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    17ec:	4e1f      	ldr	r6, [pc, #124]	; (186c <rx_event+0xa0>)
		if (head != rx_tail) {
    17ee:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    17f0:	481f      	ldr	r0, [pc, #124]	; (1870 <rx_event+0xa4>)
		if (head != rx_tail) {
    17f2:	d007      	beq.n	1804 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    17f4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    17f8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    17fc:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1800:	4294      	cmp	r4, r2
    1802:	d918      	bls.n	1836 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1804:	3301      	adds	r3, #1
		rx_index[i] = 0;
    1806:	2200      	movs	r2, #0
		rx_count[i] = len;
    1808:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    180c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    180e:	4e19      	ldr	r6, [pc, #100]	; (1874 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1810:	bf88      	it	hi
    1812:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    1814:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    1818:	bf98      	it	ls
    181a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    181c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    181e:	4b16      	ldr	r3, [pc, #88]	; (1878 <rx_event+0xac>)
		rx_head = head;
    1820:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1822:	681a      	ldr	r2, [r3, #0]
    1824:	4414      	add	r4, r2
    1826:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    182c:	4628      	mov	r0, r5
}
    182e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    1832:	f7ff bf9b 	b.w	176c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1836:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    183a:	4910      	ldr	r1, [pc, #64]	; (187c <rx_event+0xb0>)
    183c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    183e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1840:	4408      	add	r0, r1
    1842:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1846:	f000 fd53 	bl	22f0 <memcpy>
				rx_available += len;
    184a:	4a0b      	ldr	r2, [pc, #44]	; (1878 <rx_event+0xac>)
				rx_queue_transfer(i);
    184c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    184e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1852:	6813      	ldr	r3, [r2, #0]
    1854:	4423      	add	r3, r4
}
    1856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    185a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    185c:	f7ff bf86 	b.w	176c <rx_queue_transfer>
    1860:	20000fa0 	.word	0x20000fa0
    1864:	20000fb0 	.word	0x20000fb0
    1868:	20000fb1 	.word	0x20000fb1
    186c:	20000f3c 	.word	0x20000f3c
    1870:	20000f5c 	.word	0x20000f5c
    1874:	20000f4c 	.word	0x20000f4c
    1878:	20000f38 	.word	0x20000f38
    187c:	20200080 	.word	0x20200080

00001880 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1880:	4b1d      	ldr	r3, [pc, #116]	; (18f8 <usb_serial_flush_callback+0x78>)
    1882:	781a      	ldrb	r2, [r3, #0]
    1884:	2a00      	cmp	r2, #0
    1886:	d136      	bne.n	18f6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    1888:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    188c:	4a1b      	ldr	r2, [pc, #108]	; (18fc <usb_serial_flush_callback+0x7c>)
    188e:	7812      	ldrb	r2, [r2, #0]
    1890:	b38a      	cbz	r2, 18f6 <usb_serial_flush_callback+0x76>
{
    1892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1896:	4d1a      	ldr	r5, [pc, #104]	; (1900 <usb_serial_flush_callback+0x80>)
    1898:	882a      	ldrh	r2, [r5, #0]
    189a:	b352      	cbz	r2, 18f2 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    189c:	4e19      	ldr	r6, [pc, #100]	; (1904 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    189e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    18a2:	4f19      	ldr	r7, [pc, #100]	; (1908 <usb_serial_flush_callback+0x88>)
    18a4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    18a6:	4c19      	ldr	r4, [pc, #100]	; (190c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    18a8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    18ac:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    18b0:	4642      	mov	r2, r8
    18b2:	4638      	mov	r0, r7
    18b4:	4621      	mov	r1, r4
    18b6:	f7ff fedd 	bl	1674 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    18ba:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    18be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    18c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    18c6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    18ca:	3420      	adds	r4, #32
	} while (location < end_addr);
    18cc:	42a2      	cmp	r2, r4
    18ce:	d8fa      	bhi.n	18c6 <usb_serial_flush_callback+0x46>
	asm("dsb");
    18d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    18d4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    18d8:	2004      	movs	r0, #4
    18da:	4639      	mov	r1, r7
    18dc:	f7ff fee2 	bl	16a4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    18e0:	7833      	ldrb	r3, [r6, #0]
    18e2:	3301      	adds	r3, #1
    18e4:	b2db      	uxtb	r3, r3
    18e6:	2b03      	cmp	r3, #3
    18e8:	bf88      	it	hi
    18ea:	2300      	movhi	r3, #0
    18ec:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    18ee:	2300      	movs	r3, #0
    18f0:	802b      	strh	r3, [r5, #0]
}
    18f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18f6:	4770      	bx	lr
    18f8:	20000fb6 	.word	0x20000fb6
    18fc:	20000fb8 	.word	0x20000fb8
    1900:	20000fa2 	.word	0x20000fa2
    1904:	20000fb5 	.word	0x20000fb5
    1908:	20000c60 	.word	0x20000c60
    190c:	20201080 	.word	0x20201080

00001910 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    1910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1914:	b085      	sub	sp, #20
	while (size > 0) {
    1916:	e9cd 1001 	strd	r1, r0, [sp, #4]
    191a:	2900      	cmp	r1, #0
    191c:	f000 80bf 	beq.w	1a9e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    1920:	2300      	movs	r3, #0
    1922:	4c60      	ldr	r4, [pc, #384]	; (1aa4 <usb_serial_write.part.0+0x194>)
    1924:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1ac0 <usb_serial_write.part.0+0x1b0>
    1928:	f8df a198 	ldr.w	sl, [pc, #408]	; 1ac4 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    192c:	4f5e      	ldr	r7, [pc, #376]	; (1aa8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    192e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    1930:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    1932:	4a5e      	ldr	r2, [pc, #376]	; (1aac <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    1934:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    1936:	4b5e      	ldr	r3, [pc, #376]	; (1ab0 <usb_serial_write.part.0+0x1a0>)
    1938:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    193a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    193e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    1942:	2b00      	cmp	r3, #0
    1944:	f040 80a7 	bne.w	1a96 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    1948:	461e      	mov	r6, r3
		int waiting=0;
    194a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    194c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    194e:	4648      	mov	r0, r9
    1950:	f7ff feca 	bl	16e8 <usb_transfer_status>
			if (!(status & 0x80)) {
    1954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    1958:	f000 808c 	beq.w	1a74 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    195c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    1960:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    1964:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    1968:	b905      	cbnz	r5, 196c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    196a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    196c:	2b00      	cmp	r3, #0
    196e:	d17d      	bne.n	1a6c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	1b9b      	subs	r3, r3, r6
    1974:	2b78      	cmp	r3, #120	; 0x78
    1976:	f200 8087 	bhi.w	1a88 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    197a:	4b4e      	ldr	r3, [pc, #312]	; (1ab4 <usb_serial_write.part.0+0x1a4>)
    197c:	781b      	ldrb	r3, [r3, #0]
    197e:	2b00      	cmp	r3, #0
    1980:	d074      	beq.n	1a6c <usb_serial_write.part.0+0x15c>
			yield();
    1982:	f000 fa9d 	bl	1ec0 <yield>
			tx_noautoflush = 1;
    1986:	2201      	movs	r2, #1
		while (!tx_available) {
    1988:	f8b8 3000 	ldrh.w	r3, [r8]
    198c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    198e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    1990:	2b00      	cmp	r3, #0
    1992:	d0dc      	beq.n	194e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1994:	4a46      	ldr	r2, [pc, #280]	; (1ab0 <usb_serial_write.part.0+0x1a0>)
    1996:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    199a:	7811      	ldrb	r1, [r2, #0]
    199c:	461a      	mov	r2, r3
    199e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    19a2:	4d45      	ldr	r5, [pc, #276]	; (1ab8 <usb_serial_write.part.0+0x1a8>)
    19a4:	02c9      	lsls	r1, r1, #11
    19a6:	4428      	add	r0, r5
		if (size >= tx_available) {
    19a8:	9d01      	ldr	r5, [sp, #4]
    19aa:	4295      	cmp	r5, r2
    19ac:	d217      	bcs.n	19de <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    19ae:	9303      	str	r3, [sp, #12]
    19b0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    19b4:	462a      	mov	r2, r5
    19b6:	f000 fc9b 	bl	22f0 <memcpy>
			tx_available -= size;
    19ba:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19bc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    19c0:	1b5b      	subs	r3, r3, r5
    19c2:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    19c6:	4b3d      	ldr	r3, [pc, #244]	; (1abc <usb_serial_write.part.0+0x1ac>)
    19c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    19cc:	f3bf 8f4f 	dsb	sy
			sent += size;
    19d0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    19d2:	2300      	movs	r3, #0
			sent += size;
    19d4:	4428      	add	r0, r5
		tx_noautoflush = 0;
    19d6:	7023      	strb	r3, [r4, #0]
}
    19d8:	b005      	add	sp, #20
    19da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    19de:	4b36      	ldr	r3, [pc, #216]	; (1ab8 <usb_serial_write.part.0+0x1a8>)
    19e0:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    19e2:	9902      	ldr	r1, [sp, #8]
    19e4:	f000 fc84 	bl	22f0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    19e8:	2300      	movs	r3, #0
    19ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19ee:	4629      	mov	r1, r5
    19f0:	4648      	mov	r0, r9
    19f2:	f7ff fe3f 	bl	1674 <usb_prepare_transfer>
	asm("dsb");
    19f6:	f3bf 8f4f 	dsb	sy
    19fa:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    19fe:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    1a02:	4293      	cmp	r3, r2
    1a04:	bf34      	ite	cc
    1a06:	2301      	movcc	r3, #1
    1a08:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    1a0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1a0e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    1a12:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    1a16:	3520      	adds	r5, #32
	} while (location < end_addr);
    1a18:	42ab      	cmp	r3, r5
    1a1a:	d1fa      	bne.n	1a12 <usb_serial_write.part.0+0x102>
	asm("dsb");
    1a1c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a20:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1a24:	2004      	movs	r0, #4
    1a26:	4649      	mov	r1, r9
    1a28:	f7ff fe3c 	bl	16a4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1a2c:	4a20      	ldr	r2, [pc, #128]	; (1ab0 <usb_serial_write.part.0+0x1a0>)
    1a2e:	7813      	ldrb	r3, [r2, #0]
    1a30:	3301      	adds	r3, #1
    1a32:	b2db      	uxtb	r3, r3
    1a34:	2b03      	cmp	r3, #3
    1a36:	bf84      	itt	hi
    1a38:	2300      	movhi	r3, #0
    1a3a:	4a1d      	ldrhi	r2, [pc, #116]	; (1ab0 <usb_serial_write.part.0+0x1a0>)
    1a3c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1a3e:	f8b8 3000 	ldrh.w	r3, [r8]
    1a42:	9a01      	ldr	r2, [sp, #4]
    1a44:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    1a46:	9a00      	ldr	r2, [sp, #0]
    1a48:	441a      	add	r2, r3
			size -= tx_available;
    1a4a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    1a4c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    1a4e:	9a02      	ldr	r2, [sp, #8]
    1a50:	441a      	add	r2, r3
			tx_available = 0;
    1a52:	2300      	movs	r3, #0
			data += tx_available;
    1a54:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    1a56:	4a19      	ldr	r2, [pc, #100]	; (1abc <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    1a58:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    1a5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    1a60:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    1a64:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    1a66:	2900      	cmp	r1, #0
    1a68:	f47f af62 	bne.w	1930 <usb_serial_write.part.0+0x20>
	return sent;
    1a6c:	9800      	ldr	r0, [sp, #0]
}
    1a6e:	b005      	add	sp, #20
    1a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    1a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a78:	4b0d      	ldr	r3, [pc, #52]	; (1ab0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    1a7a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a7e:	7819      	ldrb	r1, [r3, #0]
				break;
    1a80:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    1a82:	f8a8 2000 	strh.w	r2, [r8]
				break;
    1a86:	e78a      	b.n	199e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    1a88:	2301      	movs	r3, #1
				return sent;
    1a8a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    1a8c:	f88a 3000 	strb.w	r3, [sl]
}
    1a90:	b005      	add	sp, #20
    1a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a96:	461a      	mov	r2, r3
    1a98:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1a9c:	e77f      	b.n	199e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    1a9e:	9801      	ldr	r0, [sp, #4]
	return sent;
    1aa0:	e7e5      	b.n	1a6e <usb_serial_write.part.0+0x15e>
    1aa2:	bf00      	nop
    1aa4:	20000fb6 	.word	0x20000fb6
    1aa8:	20000f80 	.word	0x20000f80
    1aac:	20000c60 	.word	0x20000c60
    1ab0:	20000fb5 	.word	0x20000fb5
    1ab4:	20000fb8 	.word	0x20000fb8
    1ab8:	20201080 	.word	0x20201080
    1abc:	402e0000 	.word	0x402e0000
    1ac0:	20000fa2 	.word	0x20000fa2
    1ac4:	20000fb4 	.word	0x20000fb4

00001ac8 <usb_serial_reset>:
}
    1ac8:	4770      	bx	lr
    1aca:	bf00      	nop

00001acc <usb_serial_configure>:
	if (usb_high_speed) {
    1acc:	4b2d      	ldr	r3, [pc, #180]	; (1b84 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1ace:	2100      	movs	r1, #0
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	482d      	ldr	r0, [pc, #180]	; (1b88 <usb_serial_configure+0xbc>)
{
    1ad4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1ad6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1ad8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1ada:	4d2c      	ldr	r5, [pc, #176]	; (1b8c <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1adc:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1ade:	4e2c      	ldr	r6, [pc, #176]	; (1b90 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1ae0:	bf0c      	ite	eq
    1ae2:	2340      	moveq	r3, #64	; 0x40
    1ae4:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1ae8:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1aea:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1aec:	f000 fe62 	bl	27b4 <memset>
	tx_head = 0;
    1af0:	4a28      	ldr	r2, [pc, #160]	; (1b94 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1af2:	4621      	mov	r1, r4
	tx_available = 0;
    1af4:	4b28      	ldr	r3, [pc, #160]	; (1b98 <usb_serial_configure+0xcc>)
	tx_head = 0;
    1af6:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1af8:	f44f 7280 	mov.w	r2, #256	; 0x100
    1afc:	4827      	ldr	r0, [pc, #156]	; (1b9c <usb_serial_configure+0xd0>)
	tx_available = 0;
    1afe:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b00:	f000 fe58 	bl	27b4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1b04:	4a26      	ldr	r2, [pc, #152]	; (1ba0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b06:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1b08:	4b26      	ldr	r3, [pc, #152]	; (1ba4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b0a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1b0c:	e9c2 4400 	strd	r4, r4, [r2]
    1b10:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1b14:	4a24      	ldr	r2, [pc, #144]	; (1ba8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1b16:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1b1a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1b1c:	4a23      	ldr	r2, [pc, #140]	; (1bac <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1b1e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1b22:	4b23      	ldr	r3, [pc, #140]	; (1bb0 <usb_serial_configure+0xe4>)
    1b24:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b26:	4623      	mov	r3, r4
	rx_available = 0;
    1b28:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b2a:	4622      	mov	r2, r4
    1b2c:	f7ff fd70 	bl	1610 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1b30:	4622      	mov	r2, r4
    1b32:	8831      	ldrh	r1, [r6, #0]
    1b34:	2003      	movs	r0, #3
    1b36:	4b1f      	ldr	r3, [pc, #124]	; (1bb4 <usb_serial_configure+0xe8>)
    1b38:	f7ff fd38 	bl	15ac <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1b3c:	4623      	mov	r3, r4
    1b3e:	2201      	movs	r2, #1
    1b40:	8829      	ldrh	r1, [r5, #0]
    1b42:	2004      	movs	r0, #4
    1b44:	f7ff fd64 	bl	1610 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b48:	4620      	mov	r0, r4
    1b4a:	3401      	adds	r4, #1
    1b4c:	f7ff fe0e 	bl	176c <rx_queue_transfer>
    1b50:	2c08      	cmp	r4, #8
    1b52:	d1f9      	bne.n	1b48 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1b54:	4b18      	ldr	r3, [pc, #96]	; (1bb8 <usb_serial_configure+0xec>)
    1b56:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1b58:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1b5a:	4818      	ldr	r0, [pc, #96]	; (1bbc <usb_serial_configure+0xf0>)
    1b5c:	4c18      	ldr	r4, [pc, #96]	; (1bc0 <usb_serial_configure+0xf4>)
    1b5e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1b60:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1b68:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1b6c:	4915      	ldr	r1, [pc, #84]	; (1bc4 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1b6e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1b72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1b76:	b121      	cbz	r1, 1b82 <usb_serial_configure+0xb6>
    1b78:	4a13      	ldr	r2, [pc, #76]	; (1bc8 <usb_serial_configure+0xfc>)
    1b7a:	7813      	ldrb	r3, [r2, #0]
    1b7c:	f043 0301 	orr.w	r3, r3, #1
    1b80:	7013      	strb	r3, [r2, #0]
}
    1b82:	bd70      	pop	{r4, r5, r6, pc}
    1b84:	20000fb9 	.word	0x20000fb9
    1b88:	20000c60 	.word	0x20000c60
    1b8c:	20000fa4 	.word	0x20000fa4
    1b90:	20000fa0 	.word	0x20000fa0
    1b94:	20000fb5 	.word	0x20000fb5
    1b98:	20000fa2 	.word	0x20000fa2
    1b9c:	20000b60 	.word	0x20000b60
    1ba0:	20000f3c 	.word	0x20000f3c
    1ba4:	20000f4c 	.word	0x20000f4c
    1ba8:	20000fb0 	.word	0x20000fb0
    1bac:	20000f38 	.word	0x20000f38
    1bb0:	20000fb1 	.word	0x20000fb1
    1bb4:	000017cd 	.word	0x000017cd
    1bb8:	402e0000 	.word	0x402e0000
    1bbc:	20000f98 	.word	0x20000f98
    1bc0:	00001881 	.word	0x00001881
    1bc4:	00000000 	.word	0x00000000
    1bc8:	20000fbd 	.word	0x20000fbd

00001bcc <usb_serial_read>:
{
    1bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1bd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    1bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1ca4 <usb_serial_read+0xd8>
{
    1bdc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1bde:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    1be2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    1be4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    1be8:	2900      	cmp	r1, #0
    1bea:	d04f      	beq.n	1c8c <usb_serial_read+0xc0>
    1bec:	4680      	mov	r8, r0
    1bee:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    1bf0:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    1bf2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1ca8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    1bf6:	4b26      	ldr	r3, [pc, #152]	; (1c90 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    1bf8:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1bfc:	4925      	ldr	r1, [pc, #148]	; (1c94 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    1c02:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    1c06:	d03f      	beq.n	1c88 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    1c08:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    1c0a:	4b23      	ldr	r3, [pc, #140]	; (1c98 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c0c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    1c0e:	bf28      	it	cs
    1c10:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1c12:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    1c14:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c18:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    1c1c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    1c1e:	4b1f      	ldr	r3, [pc, #124]	; (1c9c <usb_serial_read+0xd0>)
    1c20:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    1c24:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    1c28:	42aa      	cmp	r2, r5
    1c2a:	d21c      	bcs.n	1c66 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1c2c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    1c30:	4918      	ldr	r1, [pc, #96]	; (1c94 <usb_serial_read+0xc8>)
			rx_available -= len;
    1c32:	4c1b      	ldr	r4, [pc, #108]	; (1ca0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1c34:	4461      	add	r1, ip
    1c36:	9201      	str	r2, [sp, #4]
    1c38:	f000 fb5a 	bl	22f0 <memcpy>
			rx_available -= len;
    1c3c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    1c3e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    1c42:	4658      	mov	r0, fp
			rx_index[i] += len;
    1c44:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    1c46:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    1c4a:	442a      	add	r2, r5
			rx_available -= len;
    1c4c:	4439      	add	r1, r7
			rx_index[i] += len;
    1c4e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    1c52:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1c54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1c5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    1c60:	b003      	add	sp, #12
    1c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c66:	462a      	mov	r2, r5
			count += avail;
    1c68:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c6a:	f000 fb41 	bl	22f0 <memcpy>
			rx_available -= avail;
    1c6e:	490c      	ldr	r1, [pc, #48]	; (1ca0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    1c70:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1c72:	4630      	mov	r0, r6
			rx_available -= avail;
    1c74:	680a      	ldr	r2, [r1, #0]
			p += avail;
    1c76:	44a8      	add	r8, r5
			rx_available -= avail;
    1c78:	1b52      	subs	r2, r2, r5
    1c7a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    1c7c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    1c80:	f7ff fd74 	bl	176c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    1c84:	45bb      	cmp	fp, r7
    1c86:	d8b6      	bhi.n	1bf6 <usb_serial_read+0x2a>
	return count;
    1c88:	4638      	mov	r0, r7
    1c8a:	e7e3      	b.n	1c54 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    1c8c:	4608      	mov	r0, r1
    1c8e:	e7e1      	b.n	1c54 <usb_serial_read+0x88>
    1c90:	20000fb0 	.word	0x20000fb0
    1c94:	20200080 	.word	0x20200080
    1c98:	20000f5c 	.word	0x20000f5c
    1c9c:	20000f3c 	.word	0x20000f3c
    1ca0:	20000f38 	.word	0x20000f38
    1ca4:	20000fb1 	.word	0x20000fb1
    1ca8:	20000f4c 	.word	0x20000f4c

00001cac <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    1cac:	4b0b      	ldr	r3, [pc, #44]	; (1cdc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    1cae:	4a0c      	ldr	r2, [pc, #48]	; (1ce0 <usb_serial_peekchar+0x34>)
    1cb0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    1cb2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    1cb4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    1cb6:	428a      	cmp	r2, r1
    1cb8:	d00d      	beq.n	1cd6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1cba:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1cbc:	4809      	ldr	r0, [pc, #36]	; (1ce4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cbe:	4a0a      	ldr	r2, [pc, #40]	; (1ce8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    1cc0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cc2:	490a      	ldr	r1, [pc, #40]	; (1cec <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    1cc4:	bf28      	it	cs
    1cc6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1cc8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    1cce:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    1cd2:	5c58      	ldrb	r0, [r3, r1]
    1cd4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    1cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1cda:	4770      	bx	lr
    1cdc:	20000fb0 	.word	0x20000fb0
    1ce0:	20000fb1 	.word	0x20000fb1
    1ce4:	20000f5c 	.word	0x20000f5c
    1ce8:	20200080 	.word	0x20200080
    1cec:	20000f4c 	.word	0x20000f4c

00001cf0 <usb_serial_available>:
	uint32_t n = rx_available;
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <usb_serial_available+0x14>)
{
    1cf2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1cf4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1cf6:	b10c      	cbz	r4, 1cfc <usb_serial_available+0xc>
}
    1cf8:	4620      	mov	r0, r4
    1cfa:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    1cfc:	f000 f8e0 	bl	1ec0 <yield>
}
    1d00:	4620      	mov	r0, r4
    1d02:	bd10      	pop	{r4, pc}
    1d04:	20000f38 	.word	0x20000f38

00001d08 <usb_serial_flush_input>:
{
    1d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1d0c:	4e14      	ldr	r6, [pc, #80]	; (1d60 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    1d0e:	4d15      	ldr	r5, [pc, #84]	; (1d64 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    1d10:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    1d12:	782a      	ldrb	r2, [r5, #0]
    1d14:	4293      	cmp	r3, r2
    1d16:	d021      	beq.n	1d5c <usb_serial_flush_input+0x54>
    1d18:	b2dc      	uxtb	r4, r3
    1d1a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1d6c <usb_serial_flush_input+0x64>
    1d1e:	f8df b050 	ldr.w	fp, [pc, #80]	; 1d70 <usb_serial_flush_input+0x68>
    1d22:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1d74 <usb_serial_flush_input+0x6c>
    1d26:	4f10      	ldr	r7, [pc, #64]	; (1d68 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    1d28:	3401      	adds	r4, #1
    1d2a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    1d2c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    1d30:	d901      	bls.n	1d36 <usb_serial_flush_input+0x2e>
    1d32:	2400      	movs	r4, #0
    1d34:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    1d36:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1d3a:	f8db 3000 	ldr.w	r3, [fp]
    1d3e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    1d42:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    1d46:	1a52      	subs	r2, r2, r1
    1d48:	1a9b      	subs	r3, r3, r2
    1d4a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1d4e:	f7ff fd0d 	bl	176c <rx_queue_transfer>
		rx_tail = tail;
    1d52:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    1d56:	782b      	ldrb	r3, [r5, #0]
    1d58:	42a3      	cmp	r3, r4
    1d5a:	d1e5      	bne.n	1d28 <usb_serial_flush_input+0x20>
}
    1d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d60:	20000fb1 	.word	0x20000fb1
    1d64:	20000fb0 	.word	0x20000fb0
    1d68:	20000f4c 	.word	0x20000f4c
    1d6c:	20000f5c 	.word	0x20000f5c
    1d70:	20000f38 	.word	0x20000f38
    1d74:	20000f3c 	.word	0x20000f3c

00001d78 <usb_serial_getchar>:
{
    1d78:	b500      	push	{lr}
    1d7a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    1d7c:	2101      	movs	r1, #1
    1d7e:	f10d 0007 	add.w	r0, sp, #7
    1d82:	f7ff ff23 	bl	1bcc <usb_serial_read>
    1d86:	b120      	cbz	r0, 1d92 <usb_serial_getchar+0x1a>
    1d88:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    1d8c:	b003      	add	sp, #12
    1d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    1d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d96:	e7f9      	b.n	1d8c <usb_serial_getchar+0x14>

00001d98 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    1d98:	4b09      	ldr	r3, [pc, #36]	; (1dc0 <usb_serial_putchar+0x28>)
{
    1d9a:	b500      	push	{lr}
    1d9c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    1d9e:	781b      	ldrb	r3, [r3, #0]
{
    1da0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    1da4:	b13b      	cbz	r3, 1db6 <usb_serial_putchar+0x1e>
    1da6:	2101      	movs	r1, #1
    1da8:	f10d 0007 	add.w	r0, sp, #7
    1dac:	f7ff fdb0 	bl	1910 <usb_serial_write.part.0>
}
    1db0:	b003      	add	sp, #12
    1db2:	f85d fb04 	ldr.w	pc, [sp], #4
    1db6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1dba:	b003      	add	sp, #12
    1dbc:	f85d fb04 	ldr.w	pc, [sp], #4
    1dc0:	20000fb8 	.word	0x20000fb8

00001dc4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    1dc4:	4b04      	ldr	r3, [pc, #16]	; (1dd8 <usb_serial_write+0x14>)
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1dcc:	b10b      	cbz	r3, 1dd2 <usb_serial_write+0xe>
    1dce:	f7ff bd9f 	b.w	1910 <usb_serial_write.part.0>
}
    1dd2:	4610      	mov	r0, r2
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	20000fb8 	.word	0x20000fb8

00001ddc <usb_serial_write_buffer_free>:
{
    1ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    1de0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    1de2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1e28 <usb_serial_write_buffer_free+0x4c>
    1de6:	2301      	movs	r3, #1
    1de8:	4d0d      	ldr	r5, [pc, #52]	; (1e20 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    1dea:	4627      	mov	r7, r4
    1dec:	4e0d      	ldr	r6, [pc, #52]	; (1e24 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    1dee:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    1df2:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1df4:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    1df6:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    1df8:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    1dfa:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1dfe:	d005      	beq.n	1e0c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1e00:	f7ff fc72 	bl	16e8 <usb_transfer_status>
    1e04:	0603      	lsls	r3, r0, #24
    1e06:	bf58      	it	pl
    1e08:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e0c:	2c04      	cmp	r4, #4
    1e0e:	d1f0      	bne.n	1df2 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    1e10:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    1e14:	2300      	movs	r3, #0
}
    1e16:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    1e18:	f888 3000 	strb.w	r3, [r8]
}
    1e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e20:	20000c60 	.word	0x20000c60
    1e24:	20000fb5 	.word	0x20000fb5
    1e28:	20000fb6 	.word	0x20000fb6

00001e2c <usb_serial_flush_output>:
{
    1e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    1e30:	4b1d      	ldr	r3, [pc, #116]	; (1ea8 <usb_serial_flush_output+0x7c>)
    1e32:	781b      	ldrb	r3, [r3, #0]
    1e34:	b113      	cbz	r3, 1e3c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1e36:	4d1d      	ldr	r5, [pc, #116]	; (1eac <usb_serial_flush_output+0x80>)
    1e38:	882a      	ldrh	r2, [r5, #0]
    1e3a:	b90a      	cbnz	r2, 1e40 <usb_serial_flush_output+0x14>
}
    1e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    1e40:	4e1b      	ldr	r6, [pc, #108]	; (1eb0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    1e42:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1e46:	491b      	ldr	r1, [pc, #108]	; (1eb4 <usb_serial_flush_output+0x88>)
    1e48:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e4a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e4c:	4c1a      	ldr	r4, [pc, #104]	; (1eb8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1e4e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    1e52:	4f1a      	ldr	r7, [pc, #104]	; (1ebc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e54:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    1e58:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e5a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    1e5c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e5e:	4621      	mov	r1, r4
    1e60:	2300      	movs	r3, #0
    1e62:	f7ff fc07 	bl	1674 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1e66:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    1e6a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1e6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1e72:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1e76:	3420      	adds	r4, #32
	} while (location < end_addr);
    1e78:	42a2      	cmp	r2, r4
    1e7a:	d8fa      	bhi.n	1e72 <usb_serial_flush_output+0x46>
	asm("dsb");
    1e7c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1e80:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1e84:	2004      	movs	r0, #4
    1e86:	4641      	mov	r1, r8
    1e88:	f7ff fc0c 	bl	16a4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1e8c:	7833      	ldrb	r3, [r6, #0]
    1e8e:	3301      	adds	r3, #1
    1e90:	b2db      	uxtb	r3, r3
    1e92:	2b03      	cmp	r3, #3
    1e94:	bf88      	it	hi
    1e96:	2300      	movhi	r3, #0
    1e98:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1e9a:	2300      	movs	r3, #0
    1e9c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    1e9e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    1ea2:	703b      	strb	r3, [r7, #0]
}
    1ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ea8:	20000fb8 	.word	0x20000fb8
    1eac:	20000fa2 	.word	0x20000fa2
    1eb0:	20000fb5 	.word	0x20000fb5
    1eb4:	20000c60 	.word	0x20000c60
    1eb8:	20201080 	.word	0x20201080
    1ebc:	20000fb6 	.word	0x20000fb6

00001ec0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    1ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    1ec4:	4b2d      	ldr	r3, [pc, #180]	; (1f7c <yield+0xbc>)
    1ec6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1ec8:	b166      	cbz	r6, 1ee4 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    1eca:	4f2d      	ldr	r7, [pc, #180]	; (1f80 <yield+0xc0>)
    1ecc:	783b      	ldrb	r3, [r7, #0]
    1ece:	b94b      	cbnz	r3, 1ee4 <yield+0x24>
	running = 1;
    1ed0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1ed2:	07f1      	lsls	r1, r6, #31
	running = 1;
    1ed4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1ed6:	d443      	bmi.n	1f60 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1ed8:	07b2      	lsls	r2, r6, #30
    1eda:	d426      	bmi.n	1f2a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    1edc:	2300      	movs	r3, #0
    1ede:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    1ee0:	0773      	lsls	r3, r6, #29
    1ee2:	d401      	bmi.n	1ee8 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    1ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1ee8:	4b26      	ldr	r3, [pc, #152]	; (1f84 <yield+0xc4>)
    1eea:	681a      	ldr	r2, [r3, #0]
    1eec:	2a00      	cmp	r2, #0
    1eee:	d0f9      	beq.n	1ee4 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1ef0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1ef4:	2a00      	cmp	r2, #0
    1ef6:	d1f5      	bne.n	1ee4 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ef8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    1efc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    1efe:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1f00:	2800      	cmp	r0, #0
    1f02:	d034      	beq.n	1f6e <yield+0xae>
		if (runningFromYield) {
    1f04:	4c20      	ldr	r4, [pc, #128]	; (1f88 <yield+0xc8>)
    1f06:	7821      	ldrb	r1, [r4, #0]
    1f08:	2900      	cmp	r1, #0
    1f0a:	d130      	bne.n	1f6e <yield+0xae>
		runningFromYield = true;
    1f0c:	2201      	movs	r2, #1
    1f0e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    1f10:	6942      	ldr	r2, [r0, #20]
    1f12:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    1f14:	2a00      	cmp	r2, #0
    1f16:	d02e      	beq.n	1f76 <yield+0xb6>
			firstYield->_prev = nullptr;
    1f18:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f1a:	b905      	cbnz	r5, 1f1e <yield+0x5e>
    1f1c:	b662      	cpsie	i
		first->_triggered = false;
    1f1e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1f20:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    1f22:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1f24:	4798      	blx	r3
		runningFromYield = false;
    1f26:	7025      	strb	r5, [r4, #0]
    1f28:	e7dc      	b.n	1ee4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f2a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1f90 <yield+0xd0>
    1f2e:	f898 3000 	ldrb.w	r3, [r8]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d0d2      	beq.n	1edc <yield+0x1c>
    1f36:	2500      	movs	r5, #0
    1f38:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1f94 <yield+0xd4>
    1f3c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    1f3e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f42:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1f44:	6823      	ldr	r3, [r4, #0]
    1f46:	4620      	mov	r0, r4
    1f48:	691b      	ldr	r3, [r3, #16]
    1f4a:	4798      	blx	r3
    1f4c:	b110      	cbz	r0, 1f54 <yield+0x94>
    1f4e:	6963      	ldr	r3, [r4, #20]
    1f50:	689b      	ldr	r3, [r3, #8]
    1f52:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f54:	f898 2000 	ldrb.w	r2, [r8]
    1f58:	b2eb      	uxtb	r3, r5
    1f5a:	429a      	cmp	r2, r3
    1f5c:	d8ef      	bhi.n	1f3e <yield+0x7e>
    1f5e:	e7bd      	b.n	1edc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    1f60:	f7ff fec6 	bl	1cf0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    1f64:	2800      	cmp	r0, #0
    1f66:	d0b7      	beq.n	1ed8 <yield+0x18>
    1f68:	f3af 8000 	nop.w
    1f6c:	e7b4      	b.n	1ed8 <yield+0x18>
		if (doit) __enable_irq();
    1f6e:	2d00      	cmp	r5, #0
    1f70:	d1b8      	bne.n	1ee4 <yield+0x24>
    1f72:	b662      	cpsie	i
    1f74:	e7b6      	b.n	1ee4 <yield+0x24>
			lastYield = nullptr;
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <yield+0xcc>)
    1f78:	601a      	str	r2, [r3, #0]
    1f7a:	e7ce      	b.n	1f1a <yield+0x5a>
    1f7c:	20000fbd 	.word	0x20000fbd
    1f80:	20000fa8 	.word	0x20000fa8
    1f84:	20000cf0 	.word	0x20000cf0
    1f88:	20000fa6 	.word	0x20000fa6
    1f8c:	20000cfc 	.word	0x20000cfc
    1f90:	20000fa7 	.word	0x20000fa7
    1f94:	20000d00 	.word	0x20000d00

00001f98 <EventResponder::runFromInterrupt()>:
{
    1f98:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f9a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1f9e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1fa0:	4c0c      	ldr	r4, [pc, #48]	; (1fd4 <EventResponder::runFromInterrupt()+0x3c>)
    1fa2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1fa4:	b180      	cbz	r0, 1fc8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    1fa6:	4e0c      	ldr	r6, [pc, #48]	; (1fd8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1fa8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1faa:	6943      	ldr	r3, [r0, #20]
    1fac:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1fae:	b173      	cbz	r3, 1fce <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1fb0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    1fb2:	b902      	cbnz	r2, 1fb6 <EventResponder::runFromInterrupt()+0x1e>
    1fb4:	b662      	cpsie	i
			(*(first->_function))(*first);
    1fb6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1fb8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1fba:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1fbc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1fc0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1fc2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1fc4:	2800      	cmp	r0, #0
    1fc6:	d1f0      	bne.n	1faa <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1fc8:	b902      	cbnz	r2, 1fcc <EventResponder::runFromInterrupt()+0x34>
    1fca:	b662      	cpsie	i
}
    1fcc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1fce:	6033      	str	r3, [r6, #0]
    1fd0:	e7ef      	b.n	1fb2 <EventResponder::runFromInterrupt()+0x1a>
    1fd2:	bf00      	nop
    1fd4:	20000cf8 	.word	0x20000cf8
    1fd8:	20000cf4 	.word	0x20000cf4

00001fdc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1fdc:	f7ff bfdc 	b.w	1f98 <EventResponder::runFromInterrupt()>

00001fe0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1fe0:	4904      	ldr	r1, [pc, #16]	; (1ff4 <systick_isr+0x14>)
	systick_millis_count++;
    1fe2:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1fe4:	6849      	ldr	r1, [r1, #4]
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <systick_isr+0x1c>)
    1fe8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1fea:	6813      	ldr	r3, [r2, #0]
    1fec:	3301      	adds	r3, #1
    1fee:	6013      	str	r3, [r2, #0]
}
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	e0001000 	.word	0xe0001000
    1ff8:	20000f80 	.word	0x20000f80
    1ffc:	20000f7c 	.word	0x20000f7c

00002000 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2000:	49a2      	ldr	r1, [pc, #648]	; (228c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2002:	4ba3      	ldr	r3, [pc, #652]	; (2290 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2004:	4288      	cmp	r0, r1
{
    2006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    200a:	4ca2      	ldr	r4, [pc, #648]	; (2294 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    200c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    200e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2010:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2014:	d91b      	bls.n	204e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2016:	4ba0      	ldr	r3, [pc, #640]	; (2298 <set_arm_clock+0x298>)
    2018:	4298      	cmp	r0, r3
    201a:	f240 8102 	bls.w	2222 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    201e:	1ac3      	subs	r3, r0, r3
    2020:	499e      	ldr	r1, [pc, #632]	; (229c <set_arm_clock+0x29c>)
    2022:	0a1b      	lsrs	r3, r3, #8
    2024:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2028:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    202c:	09db      	lsrs	r3, r3, #7
    202e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2032:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2036:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    203a:	428b      	cmp	r3, r1
    203c:	bf28      	it	cs
    203e:	460b      	movcs	r3, r1
    2040:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2044:	4b96      	ldr	r3, [pc, #600]	; (22a0 <set_arm_clock+0x2a0>)
    2046:	fba3 3707 	umull	r3, r7, r3, r7
    204a:	08ff      	lsrs	r7, r7, #3
    204c:	e004      	b.n	2058 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    204e:	4f95      	ldr	r7, [pc, #596]	; (22a4 <set_arm_clock+0x2a4>)
    2050:	42b8      	cmp	r0, r7
    2052:	bf8c      	ite	hi
    2054:	270e      	movhi	r7, #14
    2056:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2058:	498d      	ldr	r1, [pc, #564]	; (2290 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    205a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    205e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2062:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2068:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    206c:	d20c      	bcs.n	2088 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    206e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2072:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2076:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    207a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    207e:	680b      	ldr	r3, [r1, #0]
    2080:	2b00      	cmp	r3, #0
    2082:	dafc      	bge.n	207e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2084:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2088:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    208c:	d124      	bne.n	20d8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    208e:	4986      	ldr	r1, [pc, #536]	; (22a8 <set_arm_clock+0x2a8>)
    2090:	690c      	ldr	r4, [r1, #16]
    2092:	4986      	ldr	r1, [pc, #536]	; (22ac <set_arm_clock+0x2ac>)
    2094:	43a1      	bics	r1, r4
    2096:	f000 80ea 	beq.w	226e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    209a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    209e:	4634      	mov	r4, r6
    20a0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    20a4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    20a8:	d004      	beq.n	20b4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    20aa:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    20ae:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    20b0:	4b77      	ldr	r3, [pc, #476]	; (2290 <set_arm_clock+0x290>)
    20b2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    20b4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    20b8:	d007      	beq.n	20ca <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    20ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    20be:	4974      	ldr	r1, [pc, #464]	; (2290 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    20c0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    20c2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    20c4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    20c6:	071a      	lsls	r2, r3, #28
    20c8:	d4fc      	bmi.n	20c4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    20ca:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    20ce:	4a70      	ldr	r2, [pc, #448]	; (2290 <set_arm_clock+0x290>)
    20d0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    20d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    20d4:	069b      	lsls	r3, r3, #26
    20d6:	d4fc      	bmi.n	20d2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    20d8:	4c75      	ldr	r4, [pc, #468]	; (22b0 <set_arm_clock+0x2b0>)
    20da:	42a0      	cmp	r0, r4
    20dc:	f200 80ce 	bhi.w	227c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    20e0:	f04f 0c01 	mov.w	ip, #1
    20e4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    20e6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    20e8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    20ec:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    20f0:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    20f4:	42a2      	cmp	r2, r4
    20f6:	d818      	bhi.n	212a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    20f8:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    20fc:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2100:	f040 808d 	bne.w	221e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2104:	f1bc 0f04 	cmp.w	ip, #4
    2108:	f200 8091 	bhi.w	222e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    210c:	180a      	adds	r2, r1, r0
    210e:	42a2      	cmp	r2, r4
    2110:	f200 80a4 	bhi.w	225c <set_arm_clock+0x25c>
    2114:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2118:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    211a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    211e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2122:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2126:	42a2      	cmp	r2, r4
    2128:	d9e6      	bls.n	20f8 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    212a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    212e:	028c      	lsls	r4, r1, #10
    2130:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2134:	485f      	ldr	r0, [pc, #380]	; (22b4 <set_arm_clock+0x2b4>)
    2136:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2138:	4a5f      	ldr	r2, [pc, #380]	; (22b8 <set_arm_clock+0x2b8>)
    213a:	4290      	cmp	r0, r2
    213c:	d97f      	bls.n	223e <set_arm_clock+0x23e>
    213e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 22e4 <set_arm_clock+0x2e4>
    2142:	226c      	movs	r2, #108	; 0x6c
    2144:	485d      	ldr	r0, [pc, #372]	; (22bc <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2146:	4d58      	ldr	r5, [pc, #352]	; (22a8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2148:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    214c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2150:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2154:	f8df c190 	ldr.w	ip, [pc, #400]	; 22e8 <set_arm_clock+0x2e8>
    2158:	ea0e 0c0c 	and.w	ip, lr, ip
    215c:	45d4      	cmp	ip, sl
    215e:	d009      	beq.n	2174 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2164:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2168:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    216c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    216e:	682a      	ldr	r2, [r5, #0]
    2170:	2a00      	cmp	r2, #0
    2172:	dafc      	bge.n	216e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2174:	4a46      	ldr	r2, [pc, #280]	; (2290 <set_arm_clock+0x290>)
    2176:	6915      	ldr	r5, [r2, #16]
    2178:	f005 0507 	and.w	r5, r5, #7
    217c:	429d      	cmp	r5, r3
    217e:	d003      	beq.n	2188 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2180:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2182:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2184:	03dd      	lsls	r5, r3, #15
    2186:	d4fc      	bmi.n	2182 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2188:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    218c:	d009      	beq.n	21a2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    218e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2192:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    2196:	4a3e      	ldr	r2, [pc, #248]	; (2290 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2198:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    219a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    219c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    219e:	0799      	lsls	r1, r3, #30
    21a0:	d4fc      	bmi.n	219c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21a2:	4947      	ldr	r1, [pc, #284]	; (22c0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    21a4:	4a47      	ldr	r2, [pc, #284]	; (22c4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21a6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    21a8:	4291      	cmp	r1, r2
    21aa:	d83c      	bhi.n	2226 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    21ac:	4b46      	ldr	r3, [pc, #280]	; (22c8 <set_arm_clock+0x2c8>)
    21ae:	09c9      	lsrs	r1, r1, #7
    21b0:	fba3 3101 	umull	r3, r1, r3, r1
    21b4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    21b6:	1e4b      	subs	r3, r1, #1
    21b8:	021b      	lsls	r3, r3, #8
    21ba:	ea86 0203 	eor.w	r2, r6, r3
    21be:	f412 7f40 	tst.w	r2, #768	; 0x300
    21c2:	d006      	beq.n	21d2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    21c4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    21c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    21cc:	4a30      	ldr	r2, [pc, #192]	; (2290 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    21ce:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    21d0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    21d2:	4a2f      	ldr	r2, [pc, #188]	; (2290 <set_arm_clock+0x290>)
    21d4:	6953      	ldr	r3, [r2, #20]
    21d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    21da:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    21dc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21de:	069b      	lsls	r3, r3, #26
    21e0:	d4fc      	bmi.n	21dc <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    21e2:	4b3a      	ldr	r3, [pc, #232]	; (22cc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    21e4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    21e6:	fba3 2300 	umull	r2, r3, r3, r0
    21ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    21ee:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    21f2:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    21f6:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    21fa:	4a35      	ldr	r2, [pc, #212]	; (22d0 <set_arm_clock+0x2d0>)
    21fc:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    21fe:	4a35      	ldr	r2, [pc, #212]	; (22d4 <set_arm_clock+0x2d4>)
    2200:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2202:	4a35      	ldr	r2, [pc, #212]	; (22d8 <set_arm_clock+0x2d8>)
    2204:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2206:	d208      	bcs.n	221a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2208:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    220c:	4a21      	ldr	r2, [pc, #132]	; (2294 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    220e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2212:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2214:	6813      	ldr	r3, [r2, #0]
    2216:	2b00      	cmp	r3, #0
    2218:	dafc      	bge.n	2214 <set_arm_clock+0x214>
	}

	return frequency;
}
    221a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    221e:	4673      	mov	r3, lr
    2220:	e762      	b.n	20e8 <set_arm_clock+0xe8>
    2222:	2712      	movs	r7, #18
    2224:	e718      	b.n	2058 <set_arm_clock+0x58>
    2226:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    222a:	2104      	movs	r1, #4
    222c:	e7c5      	b.n	21ba <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    222e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2232:	4820      	ldr	r0, [pc, #128]	; (22b4 <set_arm_clock+0x2b4>)
    2234:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2236:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2238:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    223a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    223e:	4a27      	ldr	r2, [pc, #156]	; (22dc <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2240:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 22ec <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2244:	fba2 2000 	umull	r2, r0, r2, r0
    2248:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    224a:	4825      	ldr	r0, [pc, #148]	; (22e0 <set_arm_clock+0x2e0>)
    224c:	2a36      	cmp	r2, #54	; 0x36
    224e:	bf38      	it	cc
    2250:	2236      	movcc	r2, #54	; 0x36
    2252:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2256:	ea42 0a0a 	orr.w	sl, r2, sl
    225a:	e774      	b.n	2146 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    225c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2260:	2300      	movs	r3, #0
    2262:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    2266:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    226a:	46ac      	mov	ip, r5
    226c:	e762      	b.n	2134 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    226e:	461d      	mov	r5, r3
    2270:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2274:	4611      	mov	r1, r2
    2276:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    227a:	e713      	b.n	20a4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    227c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    227e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2282:	4602      	mov	r2, r0
    2284:	4631      	mov	r1, r6
    2286:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    2288:	46e6      	mov	lr, ip
    228a:	e753      	b.n	2134 <set_arm_clock+0x134>
    228c:	1f78a400 	.word	0x1f78a400
    2290:	400fc000 	.word	0x400fc000
    2294:	40080000 	.word	0x40080000
    2298:	23c34600 	.word	0x23c34600
    229c:	004cb223 	.word	0x004cb223
    22a0:	51eb851f 	.word	0x51eb851f
    22a4:	016e3600 	.word	0x016e3600
    22a8:	400d8000 	.word	0x400d8000
    22ac:	80003040 	.word	0x80003040
    22b0:	269fb1ff 	.word	0x269fb1ff
    22b4:	005b8d80 	.word	0x005b8d80
    22b8:	4df67eff 	.word	0x4df67eff
    22bc:	4d3f6400 	.word	0x4d3f6400
    22c0:	08f0d17f 	.word	0x08f0d17f
    22c4:	2cb4177f 	.word	0x2cb4177f
    22c8:	00e5109f 	.word	0x00e5109f
    22cc:	431bde83 	.word	0x431bde83
    22d0:	20000670 	.word	0x20000670
    22d4:	2000066c 	.word	0x2000066c
    22d8:	20000f78 	.word	0x20000f78
    22dc:	165e9f81 	.word	0x165e9f81
    22e0:	00b71b00 	.word	0x00b71b00
    22e4:	8000206c 	.word	0x8000206c
    22e8:	8001307f 	.word	0x8001307f
    22ec:	80002000 	.word	0x80002000

000022f0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    22f0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    22f2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    22f6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    22fa:	d16d      	bne.n	23d8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    22fc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    22fe:	d341      	bcc.n	2384 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2300:	f851 3b04 	ldr.w	r3, [r1], #4
    2304:	f840 3b04 	str.w	r3, [r0], #4
    2308:	f851 3b04 	ldr.w	r3, [r1], #4
    230c:	f840 3b04 	str.w	r3, [r0], #4
    2310:	f851 3b04 	ldr.w	r3, [r1], #4
    2314:	f840 3b04 	str.w	r3, [r0], #4
    2318:	f851 3b04 	ldr.w	r3, [r1], #4
    231c:	f840 3b04 	str.w	r3, [r0], #4
    2320:	f851 3b04 	ldr.w	r3, [r1], #4
    2324:	f840 3b04 	str.w	r3, [r0], #4
    2328:	f851 3b04 	ldr.w	r3, [r1], #4
    232c:	f840 3b04 	str.w	r3, [r0], #4
    2330:	f851 3b04 	ldr.w	r3, [r1], #4
    2334:	f840 3b04 	str.w	r3, [r0], #4
    2338:	f851 3b04 	ldr.w	r3, [r1], #4
    233c:	f840 3b04 	str.w	r3, [r0], #4
    2340:	f851 3b04 	ldr.w	r3, [r1], #4
    2344:	f840 3b04 	str.w	r3, [r0], #4
    2348:	f851 3b04 	ldr.w	r3, [r1], #4
    234c:	f840 3b04 	str.w	r3, [r0], #4
    2350:	f851 3b04 	ldr.w	r3, [r1], #4
    2354:	f840 3b04 	str.w	r3, [r0], #4
    2358:	f851 3b04 	ldr.w	r3, [r1], #4
    235c:	f840 3b04 	str.w	r3, [r0], #4
    2360:	f851 3b04 	ldr.w	r3, [r1], #4
    2364:	f840 3b04 	str.w	r3, [r0], #4
    2368:	f851 3b04 	ldr.w	r3, [r1], #4
    236c:	f840 3b04 	str.w	r3, [r0], #4
    2370:	f851 3b04 	ldr.w	r3, [r1], #4
    2374:	f840 3b04 	str.w	r3, [r0], #4
    2378:	f851 3b04 	ldr.w	r3, [r1], #4
    237c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2380:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2382:	d2bd      	bcs.n	2300 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2384:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2386:	d311      	bcc.n	23ac <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2388:	f851 3b04 	ldr.w	r3, [r1], #4
    238c:	f840 3b04 	str.w	r3, [r0], #4
    2390:	f851 3b04 	ldr.w	r3, [r1], #4
    2394:	f840 3b04 	str.w	r3, [r0], #4
    2398:	f851 3b04 	ldr.w	r3, [r1], #4
    239c:	f840 3b04 	str.w	r3, [r0], #4
    23a0:	f851 3b04 	ldr.w	r3, [r1], #4
    23a4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    23a8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    23aa:	d2ed      	bcs.n	2388 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    23ac:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    23ae:	d305      	bcc.n	23bc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    23b0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    23b4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    23b8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    23ba:	d2f9      	bcs.n	23b0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    23bc:	3204      	adds	r2, #4
	beq	.Ldone
    23be:	d008      	beq.n	23d2 <memcpy+0xe2>

	lsls	r2, r2, #31
    23c0:	07d2      	lsls	r2, r2, #31
	itt ne
    23c2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    23c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    23c8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    23cc:	d301      	bcc.n	23d2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    23ce:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    23d0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    23d2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    23d4:	4770      	bx	lr
    23d6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    23d8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    23da:	d313      	bcc.n	2404 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    23dc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    23de:	d08d      	beq.n	22fc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    23e0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    23e4:	d08a      	beq.n	22fc <memcpy+0xc>

	rsb	r3, #4
    23e6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    23ea:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    23ec:	07db      	lsls	r3, r3, #31
	itt ne
    23ee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    23f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    23f4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    23f8:	d380      	bcc.n	22fc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    23fa:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    23fe:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2402:	e77b      	b.n	22fc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2404:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2406:	d3d9      	bcc.n	23bc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2408:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    240a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    240e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2412:	d2f9      	bcs.n	2408 <memcpy+0x118>

	ldrb	r3, [r1]
    2414:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2416:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2418:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    241a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    241c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    241e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2420:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2422:	4770      	bx	lr

00002424 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    2424:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    2428:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    242a:	4666      	mov	r6, ip
	int i=0, j;
    242c:	2400      	movs	r4, #0
    242e:	e000      	b.n	2432 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2430:	3401      	adds	r4, #1
		digit = val % radix;
    2432:	fbb0 f5f2 	udiv	r5, r0, r2
    2436:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    243a:	2b09      	cmp	r3, #9
    243c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2440:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2444:	fa5f fe8e 	uxtb.w	lr, lr
    2448:	bf98      	it	ls
    244a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    244e:	4290      	cmp	r0, r2
		val /= radix;
    2450:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2452:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    2456:	d2eb      	bcs.n	2430 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2458:	1c63      	adds	r3, r4, #1
    245a:	2200      	movs	r2, #0
    245c:	18c8      	adds	r0, r1, r3
    245e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2460:	b17c      	cbz	r4, 2482 <ultoa+0x5e>
		t = buf[j];
    2462:	4662      	mov	r2, ip
    2464:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2468:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    246c:	eba1 030c 	sub.w	r3, r1, ip
    2470:	3202      	adds	r2, #2
		buf[j] = buf[i];
    2472:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    2476:	3b01      	subs	r3, #1
    2478:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    247a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    247c:	4423      	add	r3, r4
    247e:	429a      	cmp	r2, r3
    2480:	dbef      	blt.n	2462 <ultoa+0x3e>
	}
	return buf;
}
    2482:	4608      	mov	r0, r1
    2484:	bd70      	pop	{r4, r5, r6, pc}
    2486:	bf00      	nop

00002488 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    2488:	4a07      	ldr	r2, [pc, #28]	; (24a8 <rtc_get+0x20>)
    248a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    248c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    248e:	4619      	mov	r1, r3
    2490:	4684      	mov	ip, r0
    2492:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    2494:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    2496:	4299      	cmp	r1, r3
    2498:	d1f9      	bne.n	248e <rtc_get+0x6>
    249a:	4584      	cmp	ip, r0
    249c:	d1f7      	bne.n	248e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    249e:	0bdb      	lsrs	r3, r3, #15
}
    24a0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    24a4:	4770      	bx	lr
    24a6:	bf00      	nop
    24a8:	400d4000 	.word	0x400d4000

000024ac <__aeabi_atexit>:
    24ac:	4603      	mov	r3, r0
    24ae:	4608      	mov	r0, r1
    24b0:	4619      	mov	r1, r3
    24b2:	f000 b9d1 	b.w	2858 <__cxa_atexit>
    24b6:	bf00      	nop

000024b8 <__aeabi_uldivmod>:
    24b8:	b953      	cbnz	r3, 24d0 <__aeabi_uldivmod+0x18>
    24ba:	b94a      	cbnz	r2, 24d0 <__aeabi_uldivmod+0x18>
    24bc:	2900      	cmp	r1, #0
    24be:	bf08      	it	eq
    24c0:	2800      	cmpeq	r0, #0
    24c2:	bf1c      	itt	ne
    24c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    24c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    24cc:	f000 b970 	b.w	27b0 <__aeabi_idiv0>
    24d0:	f1ad 0c08 	sub.w	ip, sp, #8
    24d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    24d8:	f000 f806 	bl	24e8 <__udivmoddi4>
    24dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    24e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    24e4:	b004      	add	sp, #16
    24e6:	4770      	bx	lr

000024e8 <__udivmoddi4>:
    24e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24ec:	9e08      	ldr	r6, [sp, #32]
    24ee:	460d      	mov	r5, r1
    24f0:	4604      	mov	r4, r0
    24f2:	460f      	mov	r7, r1
    24f4:	2b00      	cmp	r3, #0
    24f6:	d14a      	bne.n	258e <__udivmoddi4+0xa6>
    24f8:	428a      	cmp	r2, r1
    24fa:	4694      	mov	ip, r2
    24fc:	d965      	bls.n	25ca <__udivmoddi4+0xe2>
    24fe:	fab2 f382 	clz	r3, r2
    2502:	b143      	cbz	r3, 2516 <__udivmoddi4+0x2e>
    2504:	fa02 fc03 	lsl.w	ip, r2, r3
    2508:	f1c3 0220 	rsb	r2, r3, #32
    250c:	409f      	lsls	r7, r3
    250e:	fa20 f202 	lsr.w	r2, r0, r2
    2512:	4317      	orrs	r7, r2
    2514:	409c      	lsls	r4, r3
    2516:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    251a:	fa1f f58c 	uxth.w	r5, ip
    251e:	fbb7 f1fe 	udiv	r1, r7, lr
    2522:	0c22      	lsrs	r2, r4, #16
    2524:	fb0e 7711 	mls	r7, lr, r1, r7
    2528:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    252c:	fb01 f005 	mul.w	r0, r1, r5
    2530:	4290      	cmp	r0, r2
    2532:	d90a      	bls.n	254a <__udivmoddi4+0x62>
    2534:	eb1c 0202 	adds.w	r2, ip, r2
    2538:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    253c:	f080 811c 	bcs.w	2778 <__udivmoddi4+0x290>
    2540:	4290      	cmp	r0, r2
    2542:	f240 8119 	bls.w	2778 <__udivmoddi4+0x290>
    2546:	3902      	subs	r1, #2
    2548:	4462      	add	r2, ip
    254a:	1a12      	subs	r2, r2, r0
    254c:	b2a4      	uxth	r4, r4
    254e:	fbb2 f0fe 	udiv	r0, r2, lr
    2552:	fb0e 2210 	mls	r2, lr, r0, r2
    2556:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    255a:	fb00 f505 	mul.w	r5, r0, r5
    255e:	42a5      	cmp	r5, r4
    2560:	d90a      	bls.n	2578 <__udivmoddi4+0x90>
    2562:	eb1c 0404 	adds.w	r4, ip, r4
    2566:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    256a:	f080 8107 	bcs.w	277c <__udivmoddi4+0x294>
    256e:	42a5      	cmp	r5, r4
    2570:	f240 8104 	bls.w	277c <__udivmoddi4+0x294>
    2574:	4464      	add	r4, ip
    2576:	3802      	subs	r0, #2
    2578:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    257c:	1b64      	subs	r4, r4, r5
    257e:	2100      	movs	r1, #0
    2580:	b11e      	cbz	r6, 258a <__udivmoddi4+0xa2>
    2582:	40dc      	lsrs	r4, r3
    2584:	2300      	movs	r3, #0
    2586:	e9c6 4300 	strd	r4, r3, [r6]
    258a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    258e:	428b      	cmp	r3, r1
    2590:	d908      	bls.n	25a4 <__udivmoddi4+0xbc>
    2592:	2e00      	cmp	r6, #0
    2594:	f000 80ed 	beq.w	2772 <__udivmoddi4+0x28a>
    2598:	2100      	movs	r1, #0
    259a:	e9c6 0500 	strd	r0, r5, [r6]
    259e:	4608      	mov	r0, r1
    25a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25a4:	fab3 f183 	clz	r1, r3
    25a8:	2900      	cmp	r1, #0
    25aa:	d149      	bne.n	2640 <__udivmoddi4+0x158>
    25ac:	42ab      	cmp	r3, r5
    25ae:	d302      	bcc.n	25b6 <__udivmoddi4+0xce>
    25b0:	4282      	cmp	r2, r0
    25b2:	f200 80f8 	bhi.w	27a6 <__udivmoddi4+0x2be>
    25b6:	1a84      	subs	r4, r0, r2
    25b8:	eb65 0203 	sbc.w	r2, r5, r3
    25bc:	2001      	movs	r0, #1
    25be:	4617      	mov	r7, r2
    25c0:	2e00      	cmp	r6, #0
    25c2:	d0e2      	beq.n	258a <__udivmoddi4+0xa2>
    25c4:	e9c6 4700 	strd	r4, r7, [r6]
    25c8:	e7df      	b.n	258a <__udivmoddi4+0xa2>
    25ca:	b902      	cbnz	r2, 25ce <__udivmoddi4+0xe6>
    25cc:	deff      	udf	#255	; 0xff
    25ce:	fab2 f382 	clz	r3, r2
    25d2:	2b00      	cmp	r3, #0
    25d4:	f040 8090 	bne.w	26f8 <__udivmoddi4+0x210>
    25d8:	1a8a      	subs	r2, r1, r2
    25da:	ea4f 471c 	mov.w	r7, ip, lsr #16
    25de:	fa1f fe8c 	uxth.w	lr, ip
    25e2:	2101      	movs	r1, #1
    25e4:	fbb2 f5f7 	udiv	r5, r2, r7
    25e8:	fb07 2015 	mls	r0, r7, r5, r2
    25ec:	0c22      	lsrs	r2, r4, #16
    25ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    25f2:	fb0e f005 	mul.w	r0, lr, r5
    25f6:	4290      	cmp	r0, r2
    25f8:	d908      	bls.n	260c <__udivmoddi4+0x124>
    25fa:	eb1c 0202 	adds.w	r2, ip, r2
    25fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    2602:	d202      	bcs.n	260a <__udivmoddi4+0x122>
    2604:	4290      	cmp	r0, r2
    2606:	f200 80cb 	bhi.w	27a0 <__udivmoddi4+0x2b8>
    260a:	4645      	mov	r5, r8
    260c:	1a12      	subs	r2, r2, r0
    260e:	b2a4      	uxth	r4, r4
    2610:	fbb2 f0f7 	udiv	r0, r2, r7
    2614:	fb07 2210 	mls	r2, r7, r0, r2
    2618:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    261c:	fb0e fe00 	mul.w	lr, lr, r0
    2620:	45a6      	cmp	lr, r4
    2622:	d908      	bls.n	2636 <__udivmoddi4+0x14e>
    2624:	eb1c 0404 	adds.w	r4, ip, r4
    2628:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    262c:	d202      	bcs.n	2634 <__udivmoddi4+0x14c>
    262e:	45a6      	cmp	lr, r4
    2630:	f200 80bb 	bhi.w	27aa <__udivmoddi4+0x2c2>
    2634:	4610      	mov	r0, r2
    2636:	eba4 040e 	sub.w	r4, r4, lr
    263a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    263e:	e79f      	b.n	2580 <__udivmoddi4+0x98>
    2640:	f1c1 0720 	rsb	r7, r1, #32
    2644:	408b      	lsls	r3, r1
    2646:	fa22 fc07 	lsr.w	ip, r2, r7
    264a:	ea4c 0c03 	orr.w	ip, ip, r3
    264e:	fa05 f401 	lsl.w	r4, r5, r1
    2652:	fa20 f307 	lsr.w	r3, r0, r7
    2656:	40fd      	lsrs	r5, r7
    2658:	ea4f 491c 	mov.w	r9, ip, lsr #16
    265c:	4323      	orrs	r3, r4
    265e:	fbb5 f8f9 	udiv	r8, r5, r9
    2662:	fa1f fe8c 	uxth.w	lr, ip
    2666:	fb09 5518 	mls	r5, r9, r8, r5
    266a:	0c1c      	lsrs	r4, r3, #16
    266c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    2670:	fb08 f50e 	mul.w	r5, r8, lr
    2674:	42a5      	cmp	r5, r4
    2676:	fa02 f201 	lsl.w	r2, r2, r1
    267a:	fa00 f001 	lsl.w	r0, r0, r1
    267e:	d90b      	bls.n	2698 <__udivmoddi4+0x1b0>
    2680:	eb1c 0404 	adds.w	r4, ip, r4
    2684:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    2688:	f080 8088 	bcs.w	279c <__udivmoddi4+0x2b4>
    268c:	42a5      	cmp	r5, r4
    268e:	f240 8085 	bls.w	279c <__udivmoddi4+0x2b4>
    2692:	f1a8 0802 	sub.w	r8, r8, #2
    2696:	4464      	add	r4, ip
    2698:	1b64      	subs	r4, r4, r5
    269a:	b29d      	uxth	r5, r3
    269c:	fbb4 f3f9 	udiv	r3, r4, r9
    26a0:	fb09 4413 	mls	r4, r9, r3, r4
    26a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    26a8:	fb03 fe0e 	mul.w	lr, r3, lr
    26ac:	45a6      	cmp	lr, r4
    26ae:	d908      	bls.n	26c2 <__udivmoddi4+0x1da>
    26b0:	eb1c 0404 	adds.w	r4, ip, r4
    26b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
    26b8:	d26c      	bcs.n	2794 <__udivmoddi4+0x2ac>
    26ba:	45a6      	cmp	lr, r4
    26bc:	d96a      	bls.n	2794 <__udivmoddi4+0x2ac>
    26be:	3b02      	subs	r3, #2
    26c0:	4464      	add	r4, ip
    26c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    26c6:	fba3 9502 	umull	r9, r5, r3, r2
    26ca:	eba4 040e 	sub.w	r4, r4, lr
    26ce:	42ac      	cmp	r4, r5
    26d0:	46c8      	mov	r8, r9
    26d2:	46ae      	mov	lr, r5
    26d4:	d356      	bcc.n	2784 <__udivmoddi4+0x29c>
    26d6:	d053      	beq.n	2780 <__udivmoddi4+0x298>
    26d8:	b156      	cbz	r6, 26f0 <__udivmoddi4+0x208>
    26da:	ebb0 0208 	subs.w	r2, r0, r8
    26de:	eb64 040e 	sbc.w	r4, r4, lr
    26e2:	fa04 f707 	lsl.w	r7, r4, r7
    26e6:	40ca      	lsrs	r2, r1
    26e8:	40cc      	lsrs	r4, r1
    26ea:	4317      	orrs	r7, r2
    26ec:	e9c6 7400 	strd	r7, r4, [r6]
    26f0:	4618      	mov	r0, r3
    26f2:	2100      	movs	r1, #0
    26f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26f8:	f1c3 0120 	rsb	r1, r3, #32
    26fc:	fa02 fc03 	lsl.w	ip, r2, r3
    2700:	fa20 f201 	lsr.w	r2, r0, r1
    2704:	fa25 f101 	lsr.w	r1, r5, r1
    2708:	409d      	lsls	r5, r3
    270a:	432a      	orrs	r2, r5
    270c:	ea4f 471c 	mov.w	r7, ip, lsr #16
    2710:	fa1f fe8c 	uxth.w	lr, ip
    2714:	fbb1 f0f7 	udiv	r0, r1, r7
    2718:	fb07 1510 	mls	r5, r7, r0, r1
    271c:	0c11      	lsrs	r1, r2, #16
    271e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    2722:	fb00 f50e 	mul.w	r5, r0, lr
    2726:	428d      	cmp	r5, r1
    2728:	fa04 f403 	lsl.w	r4, r4, r3
    272c:	d908      	bls.n	2740 <__udivmoddi4+0x258>
    272e:	eb1c 0101 	adds.w	r1, ip, r1
    2732:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    2736:	d22f      	bcs.n	2798 <__udivmoddi4+0x2b0>
    2738:	428d      	cmp	r5, r1
    273a:	d92d      	bls.n	2798 <__udivmoddi4+0x2b0>
    273c:	3802      	subs	r0, #2
    273e:	4461      	add	r1, ip
    2740:	1b49      	subs	r1, r1, r5
    2742:	b292      	uxth	r2, r2
    2744:	fbb1 f5f7 	udiv	r5, r1, r7
    2748:	fb07 1115 	mls	r1, r7, r5, r1
    274c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    2750:	fb05 f10e 	mul.w	r1, r5, lr
    2754:	4291      	cmp	r1, r2
    2756:	d908      	bls.n	276a <__udivmoddi4+0x282>
    2758:	eb1c 0202 	adds.w	r2, ip, r2
    275c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    2760:	d216      	bcs.n	2790 <__udivmoddi4+0x2a8>
    2762:	4291      	cmp	r1, r2
    2764:	d914      	bls.n	2790 <__udivmoddi4+0x2a8>
    2766:	3d02      	subs	r5, #2
    2768:	4462      	add	r2, ip
    276a:	1a52      	subs	r2, r2, r1
    276c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    2770:	e738      	b.n	25e4 <__udivmoddi4+0xfc>
    2772:	4631      	mov	r1, r6
    2774:	4630      	mov	r0, r6
    2776:	e708      	b.n	258a <__udivmoddi4+0xa2>
    2778:	4639      	mov	r1, r7
    277a:	e6e6      	b.n	254a <__udivmoddi4+0x62>
    277c:	4610      	mov	r0, r2
    277e:	e6fb      	b.n	2578 <__udivmoddi4+0x90>
    2780:	4548      	cmp	r0, r9
    2782:	d2a9      	bcs.n	26d8 <__udivmoddi4+0x1f0>
    2784:	ebb9 0802 	subs.w	r8, r9, r2
    2788:	eb65 0e0c 	sbc.w	lr, r5, ip
    278c:	3b01      	subs	r3, #1
    278e:	e7a3      	b.n	26d8 <__udivmoddi4+0x1f0>
    2790:	4645      	mov	r5, r8
    2792:	e7ea      	b.n	276a <__udivmoddi4+0x282>
    2794:	462b      	mov	r3, r5
    2796:	e794      	b.n	26c2 <__udivmoddi4+0x1da>
    2798:	4640      	mov	r0, r8
    279a:	e7d1      	b.n	2740 <__udivmoddi4+0x258>
    279c:	46d0      	mov	r8, sl
    279e:	e77b      	b.n	2698 <__udivmoddi4+0x1b0>
    27a0:	3d02      	subs	r5, #2
    27a2:	4462      	add	r2, ip
    27a4:	e732      	b.n	260c <__udivmoddi4+0x124>
    27a6:	4608      	mov	r0, r1
    27a8:	e70a      	b.n	25c0 <__udivmoddi4+0xd8>
    27aa:	4464      	add	r4, ip
    27ac:	3802      	subs	r0, #2
    27ae:	e742      	b.n	2636 <__udivmoddi4+0x14e>

000027b0 <__aeabi_idiv0>:
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop

000027b4 <memset>:
    27b4:	0783      	lsls	r3, r0, #30
    27b6:	b530      	push	{r4, r5, lr}
    27b8:	d048      	beq.n	284c <memset+0x98>
    27ba:	1e54      	subs	r4, r2, #1
    27bc:	2a00      	cmp	r2, #0
    27be:	d03f      	beq.n	2840 <memset+0x8c>
    27c0:	b2ca      	uxtb	r2, r1
    27c2:	4603      	mov	r3, r0
    27c4:	e001      	b.n	27ca <memset+0x16>
    27c6:	3c01      	subs	r4, #1
    27c8:	d33a      	bcc.n	2840 <memset+0x8c>
    27ca:	f803 2b01 	strb.w	r2, [r3], #1
    27ce:	079d      	lsls	r5, r3, #30
    27d0:	d1f9      	bne.n	27c6 <memset+0x12>
    27d2:	2c03      	cmp	r4, #3
    27d4:	d92d      	bls.n	2832 <memset+0x7e>
    27d6:	b2cd      	uxtb	r5, r1
    27d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    27dc:	2c0f      	cmp	r4, #15
    27de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    27e2:	d936      	bls.n	2852 <memset+0x9e>
    27e4:	f1a4 0210 	sub.w	r2, r4, #16
    27e8:	f022 0c0f 	bic.w	ip, r2, #15
    27ec:	f103 0e20 	add.w	lr, r3, #32
    27f0:	44e6      	add	lr, ip
    27f2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    27f6:	f103 0210 	add.w	r2, r3, #16
    27fa:	e942 5504 	strd	r5, r5, [r2, #-16]
    27fe:	e942 5502 	strd	r5, r5, [r2, #-8]
    2802:	3210      	adds	r2, #16
    2804:	4572      	cmp	r2, lr
    2806:	d1f8      	bne.n	27fa <memset+0x46>
    2808:	f10c 0201 	add.w	r2, ip, #1
    280c:	f014 0f0c 	tst.w	r4, #12
    2810:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    2814:	f004 0c0f 	and.w	ip, r4, #15
    2818:	d013      	beq.n	2842 <memset+0x8e>
    281a:	f1ac 0304 	sub.w	r3, ip, #4
    281e:	f023 0303 	bic.w	r3, r3, #3
    2822:	3304      	adds	r3, #4
    2824:	4413      	add	r3, r2
    2826:	f842 5b04 	str.w	r5, [r2], #4
    282a:	4293      	cmp	r3, r2
    282c:	d1fb      	bne.n	2826 <memset+0x72>
    282e:	f00c 0403 	and.w	r4, ip, #3
    2832:	b12c      	cbz	r4, 2840 <memset+0x8c>
    2834:	b2c9      	uxtb	r1, r1
    2836:	441c      	add	r4, r3
    2838:	f803 1b01 	strb.w	r1, [r3], #1
    283c:	429c      	cmp	r4, r3
    283e:	d1fb      	bne.n	2838 <memset+0x84>
    2840:	bd30      	pop	{r4, r5, pc}
    2842:	4664      	mov	r4, ip
    2844:	4613      	mov	r3, r2
    2846:	2c00      	cmp	r4, #0
    2848:	d1f4      	bne.n	2834 <memset+0x80>
    284a:	e7f9      	b.n	2840 <memset+0x8c>
    284c:	4603      	mov	r3, r0
    284e:	4614      	mov	r4, r2
    2850:	e7bf      	b.n	27d2 <memset+0x1e>
    2852:	461a      	mov	r2, r3
    2854:	46a4      	mov	ip, r4
    2856:	e7e0      	b.n	281a <memset+0x66>

00002858 <__cxa_atexit>:
    2858:	4613      	mov	r3, r2
    285a:	460a      	mov	r2, r1
    285c:	4601      	mov	r1, r0
    285e:	2002      	movs	r0, #2
    2860:	f000 b828 	b.w	28b4 <__register_exitproc>

00002864 <__libc_init_array>:
    2864:	b570      	push	{r4, r5, r6, lr}
    2866:	4e0d      	ldr	r6, [pc, #52]	; (289c <__libc_init_array+0x38>)
    2868:	4d0d      	ldr	r5, [pc, #52]	; (28a0 <__libc_init_array+0x3c>)
    286a:	1b76      	subs	r6, r6, r5
    286c:	10b6      	asrs	r6, r6, #2
    286e:	d006      	beq.n	287e <__libc_init_array+0x1a>
    2870:	2400      	movs	r4, #0
    2872:	f855 3b04 	ldr.w	r3, [r5], #4
    2876:	3401      	adds	r4, #1
    2878:	4798      	blx	r3
    287a:	42a6      	cmp	r6, r4
    287c:	d1f9      	bne.n	2872 <__libc_init_array+0xe>
    287e:	4e09      	ldr	r6, [pc, #36]	; (28a4 <__libc_init_array+0x40>)
    2880:	4d09      	ldr	r5, [pc, #36]	; (28a8 <__libc_init_array+0x44>)
    2882:	1b76      	subs	r6, r6, r5
    2884:	f000 f860 	bl	2948 <___init_veneer>
    2888:	10b6      	asrs	r6, r6, #2
    288a:	d006      	beq.n	289a <__libc_init_array+0x36>
    288c:	2400      	movs	r4, #0
    288e:	f855 3b04 	ldr.w	r3, [r5], #4
    2892:	3401      	adds	r4, #1
    2894:	4798      	blx	r3
    2896:	42a6      	cmp	r6, r4
    2898:	d1f9      	bne.n	288e <__libc_init_array+0x2a>
    289a:	bd70      	pop	{r4, r5, r6, pc}
    289c:	60001af0 	.word	0x60001af0
    28a0:	60001af0 	.word	0x60001af0
    28a4:	60001afc 	.word	0x60001afc
    28a8:	60001af0 	.word	0x60001af0

000028ac <__retarget_lock_acquire_recursive>:
    28ac:	4770      	bx	lr
    28ae:	bf00      	nop

000028b0 <__retarget_lock_release_recursive>:
    28b0:	4770      	bx	lr
    28b2:	bf00      	nop

000028b4 <__register_exitproc>:
    28b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28b8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2938 <__register_exitproc+0x84>
    28bc:	4606      	mov	r6, r0
    28be:	f8da 0000 	ldr.w	r0, [sl]
    28c2:	4698      	mov	r8, r3
    28c4:	460f      	mov	r7, r1
    28c6:	4691      	mov	r9, r2
    28c8:	f7ff fff0 	bl	28ac <__retarget_lock_acquire_recursive>
    28cc:	4b18      	ldr	r3, [pc, #96]	; (2930 <__register_exitproc+0x7c>)
    28ce:	681c      	ldr	r4, [r3, #0]
    28d0:	b324      	cbz	r4, 291c <__register_exitproc+0x68>
    28d2:	6865      	ldr	r5, [r4, #4]
    28d4:	2d1f      	cmp	r5, #31
    28d6:	dc24      	bgt.n	2922 <__register_exitproc+0x6e>
    28d8:	b95e      	cbnz	r6, 28f2 <__register_exitproc+0x3e>
    28da:	1c6b      	adds	r3, r5, #1
    28dc:	3502      	adds	r5, #2
    28de:	f8da 0000 	ldr.w	r0, [sl]
    28e2:	6063      	str	r3, [r4, #4]
    28e4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    28e8:	f7ff ffe2 	bl	28b0 <__retarget_lock_release_recursive>
    28ec:	2000      	movs	r0, #0
    28ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28f2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    28f6:	2301      	movs	r3, #1
    28f8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    28fc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    2900:	40ab      	lsls	r3, r5
    2902:	431a      	orrs	r2, r3
    2904:	2e02      	cmp	r6, #2
    2906:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    290a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    290e:	d1e4      	bne.n	28da <__register_exitproc+0x26>
    2910:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    2914:	431a      	orrs	r2, r3
    2916:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    291a:	e7de      	b.n	28da <__register_exitproc+0x26>
    291c:	4c05      	ldr	r4, [pc, #20]	; (2934 <__register_exitproc+0x80>)
    291e:	601c      	str	r4, [r3, #0]
    2920:	e7d7      	b.n	28d2 <__register_exitproc+0x1e>
    2922:	f8da 0000 	ldr.w	r0, [sl]
    2926:	f7ff ffc3 	bl	28b0 <__retarget_lock_release_recursive>
    292a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    292e:	e7de      	b.n	28ee <__register_exitproc+0x3a>
    2930:	20000d1c 	.word	0x20000d1c
    2934:	20000d20 	.word	0x20000d20
    2938:	20000688 	.word	0x20000688
    293c:	00000000 	.word	0x00000000

00002940 <___reboot_Teensyduino__veneer>:
    2940:	f85f f000 	ldr.w	pc, [pc]	; 2944 <___reboot_Teensyduino__veneer+0x4>
    2944:	60001a05 	.word	0x60001a05

00002948 <___init_veneer>:
    2948:	f85f f000 	ldr.w	pc, [pc]	; 294c <___init_veneer+0x4>
    294c:	60001aad 	.word	0x60001aad

Disassembly of section .fini:

00002950 <_fini>:
    2950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2952:	bf00      	nop
